"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.defaultRadius = exports.defaultLineWidth = exports.defaultElevation = exports.featureAccessor = exports.geoJsonRequiredColumns = exports.geojsonVisConfigs = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _helpers = require("@turf/helpers");

var _booleanWithin = _interopRequireDefault(require("@turf/boolean-within"));

var _lodash = _interopRequireDefault(require("lodash.uniq"));

var _typeAnalyzer = require("type-analyzer");

var _baseLayer = _interopRequireWildcard(require("../base-layer"));

var _layers = require("@deck.gl/layers");

var _geojsonUtils = require("./geojson-utils");

var _layerUtils = require("../layer-utils");

var _geojsonLayerIcon = _interopRequireDefault(require("./geojson-layer-icon"));

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

var _deckglLayers = require("@kepler.gl/deckgl-layers");

var _SUPPORTED_ANALYZER_T;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SUPPORTED_ANALYZER_TYPES = (_SUPPORTED_ANALYZER_T = {}, (0, _defineProperty2["default"])(_SUPPORTED_ANALYZER_T, _typeAnalyzer.DATA_TYPES.GEOMETRY, true), (0, _defineProperty2["default"])(_SUPPORTED_ANALYZER_T, _typeAnalyzer.DATA_TYPES.GEOMETRY_FROM_STRING, true), (0, _defineProperty2["default"])(_SUPPORTED_ANALYZER_T, _typeAnalyzer.DATA_TYPES.PAIR_GEOMETRY_FROM_STRING, true), _SUPPORTED_ANALYZER_T);
var geojsonVisConfigs = {
  opacity: 'opacity',
  strokeOpacity: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.opacity), {}, {
    property: 'strokeOpacity'
  }),
  thickness: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.thickness), {}, {
    defaultValue: 0.5
  }),
  strokeColor: 'strokeColor',
  colorRange: 'colorRange',
  strokeColorRange: 'strokeColorRange',
  radius: 'radius',
  sizeRange: 'strokeWidthRange',
  radiusRange: 'radiusRange',
  heightRange: 'elevationRange',
  elevationScale: 'elevationScale',
  enableElevationZoomFactor: 'enableElevationZoomFactor',
  stroked: 'stroked',
  filled: 'filled',
  enable3d: 'enable3d',
  wireframe: 'wireframe'
};
exports.geojsonVisConfigs = geojsonVisConfigs;
var geoJsonRequiredColumns = ['geojson'];
exports.geoJsonRequiredColumns = geoJsonRequiredColumns;

var featureAccessor = function featureAccessor(_ref) {
  var geojson = _ref.geojson;
  return function (dc) {
    return function (d) {
      return dc.valueAt(d.index, geojson.fieldIdx);
    };
  };
};

exports.featureAccessor = featureAccessor;

var geoColumnAccessor = function geoColumnAccessor(_ref2) {
  var geojson = _ref2.geojson;
  return function (dc) {
    var _dc$getColumn;

    return (_dc$getColumn = dc.getColumn) === null || _dc$getColumn === void 0 ? void 0 : _dc$getColumn.call(dc, geojson.fieldIdx);
  };
};

var geoFieldAccessor = function geoFieldAccessor(_ref3) {
  var geojson = _ref3.geojson;
  return function (dc) {
    return dc.getField ? dc.getField(geojson.fieldIdx) : null;
  };
}; // access feature properties from geojson sub layer


var defaultElevation = 500;
exports.defaultElevation = defaultElevation;
var defaultLineWidth = 1;
exports.defaultLineWidth = defaultLineWidth;
var defaultRadius = 1;
exports.defaultRadius = defaultRadius;

var GeoJsonLayer = /*#__PURE__*/function (_Layer) {
  (0, _inherits2["default"])(GeoJsonLayer, _Layer);

  var _super = _createSuper(GeoJsonLayer);

  function GeoJsonLayer(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, GeoJsonLayer);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "dataToFeature", []);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "dataContainer", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filteredIndex", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filteredIndexTrigger", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "centroids", []);

    _this.registerVisConfig(geojsonVisConfigs);

    _this.getPositionAccessor = function (dataContainer) {
      return featureAccessor(_this.config.columns)(dataContainer);
    };

    return _this;
  }

  (0, _createClass2["default"])(GeoJsonLayer, [{
    key: "type",
    get: function get() {
      return GeoJsonLayer.type;
    }
  }, {
    key: "name",
    get: function get() {
      return 'Polygon';
    }
  }, {
    key: "layerIcon",
    get: function get() {
      return _geojsonLayerIcon["default"];
    }
  }, {
    key: "requiredLayerColumns",
    get: function get() {
      return geoJsonRequiredColumns;
    }
  }, {
    key: "visualChannels",
    get: function get() {
      var visualChannels = (0, _get2["default"])((0, _getPrototypeOf2["default"])(GeoJsonLayer.prototype), "visualChannels", this);
      return {
        color: _objectSpread(_objectSpread({}, visualChannels.color), {}, {
          accessor: 'getFillColor',
          condition: function condition(config) {
            return config.visConfig.filled;
          },
          nullValue: visualChannels.color.nullValue,
          getAttributeValue: function getAttributeValue(config) {
            return function (d) {
              return d.properties.fillColor || config.color;
            };
          },
          // used this to get updateTriggers
          defaultValue: function defaultValue(config) {
            return config.color;
          }
        }),
        strokeColor: {
          property: 'strokeColor',
          field: 'strokeColorField',
          scale: 'strokeColorScale',
          domain: 'strokeColorDomain',
          range: 'strokeColorRange',
          key: 'strokeColor',
          channelScaleType: _constants.CHANNEL_SCALES.color,
          accessor: 'getLineColor',
          condition: function condition(config) {
            return config.visConfig.stroked;
          },
          nullValue: visualChannels.color.nullValue,
          getAttributeValue: function getAttributeValue(config) {
            return function (d) {
              return d.properties.lineColor || config.visConfig.strokeColor || config.color;
            };
          },
          // used this to get updateTriggers
          defaultValue: function defaultValue(config) {
            return config.visConfig.strokeColor || config.color;
          }
        },
        size: _objectSpread(_objectSpread({}, visualChannels.size), {}, {
          property: 'stroke',
          accessor: 'getLineWidth',
          condition: function condition(config) {
            return config.visConfig.stroked;
          },
          nullValue: 0,
          getAttributeValue: function getAttributeValue() {
            return function (d) {
              return d.properties.lineWidth || defaultLineWidth;
            };
          }
        }),
        height: {
          property: 'height',
          field: 'heightField',
          scale: 'heightScale',
          domain: 'heightDomain',
          range: 'heightRange',
          key: 'height',
          channelScaleType: _constants.CHANNEL_SCALES.size,
          accessor: 'getElevation',
          condition: function condition(config) {
            return config.visConfig.enable3d;
          },
          nullValue: 0,
          getAttributeValue: function getAttributeValue() {
            return function (d) {
              return d.properties.elevation || defaultElevation;
            };
          }
        },
        radius: {
          property: 'radius',
          field: 'radiusField',
          scale: 'radiusScale',
          domain: 'radiusDomain',
          range: 'radiusRange',
          key: 'radius',
          channelScaleType: _constants.CHANNEL_SCALES.radius,
          accessor: 'getPointRadius',
          nullValue: 0,
          getAttributeValue: function getAttributeValue() {
            return function (d) {
              return d.properties.radius || defaultRadius;
            };
          }
        }
      };
    }
  }, {
    key: "getDefaultLayerConfig",
    value: function getDefaultLayerConfig(props) {
      return _objectSpread(_objectSpread({}, (0, _get2["default"])((0, _getPrototypeOf2["default"])(GeoJsonLayer.prototype), "getDefaultLayerConfig", this).call(this, props)), {}, {
        // add height visual channel
        heightField: null,
        heightDomain: [0, 1],
        heightScale: 'linear',
        // add radius visual channel
        radiusField: null,
        radiusDomain: [0, 1],
        radiusScale: 'linear',
        // add stroke color visual channel
        strokeColorField: null,
        strokeColorDomain: [0, 1],
        strokeColorScale: 'quantile'
      });
    }
  }, {
    key: "getHoverData",
    value: function getHoverData(object, dataContainer) {
      var _object$properties;

      // index of dataContainer is saved to feature.properties
      // for arrow format, `object` is the index of the row returned from deck
      var index = dataContainer instanceof _utils.ArrowDataContainer ? object : object === null || object === void 0 ? void 0 : (_object$properties = object.properties) === null || _object$properties === void 0 ? void 0 : _object$properties.index;

      if (index >= 0) {
        return dataContainer.row(index);
      }

      return null;
    }
  }, {
    key: "calculateDataAttribute",
    value: function calculateDataAttribute(_ref4, getPosition) {
      var _this2 = this;

      var dataContainer = _ref4.dataContainer,
          filteredIndex = _ref4.filteredIndex;

      if (dataContainer instanceof _utils.ArrowDataContainer) {
        // filter geojson/arrow table by values and make a partial copy of the raw table are expensive
        // so we will use filteredIndex to create an attribute e.g. filteredIndex [0|1] for GPU filtering
        // in deck.gl layer, see: FilterArrowExtension in @kepler.gl/deckgl-layers
        if (!this.filteredIndex || this.filteredIndex.length !== dataContainer.numRows()) {
          // for incremental data loading, we need to update filteredIndex
          this.filteredIndex = new Uint8ClampedArray(dataContainer.numRows());
          this.filteredIndex.fill(1);
        } // check if filteredIndex is a range from 0 to numRows if it is, we don't need to update it


        var isRange = filteredIndex && filteredIndex.length === dataContainer.numRows();

        if (!isRange || this.filteredIndexTrigger !== null) {
          this.filteredIndex.fill(0);

          for (var i = 0; i < filteredIndex.length; ++i) {
            this.filteredIndex[filteredIndex[i]] = 1;
          }

          this.filteredIndexTrigger = filteredIndex;
        } // for arrow, always return full dataToFeature instead of a filtered one, so there is no need to update attributes in GPU


        return this.dataToFeature;
      } // for geojson, this should work as well and more efficient. But we need to update some test cases e.g. #GeojsonLayer -> formatLayerData


      return filteredIndex.map(function (i) {
        return _this2.dataToFeature[i];
      }).filter(function (d) {
        return d;
      });
    }
  }, {
    key: "formatLayerData",
    value: function formatLayerData(datasets, oldLayerData) {
      var _this3 = this;

      if (this.config.dataId === null) {
        return {};
      }

      var _datasets$this$config = datasets[this.config.dataId],
          gpuFilter = _datasets$this$config.gpuFilter,
          dataContainer = _datasets$this$config.dataContainer;

      var _this$updateData = this.updateData(datasets, oldLayerData),
          data = _this$updateData.data;

      var customFilterValueAccessor = function customFilterValueAccessor(dc, d, fieldIndex) {
        return dc.valueAt(d.properties.index, fieldIndex);
      };

      var indexAccessor = function indexAccessor(f) {
        return f.properties.index;
      };

      var dataAccessor = function dataAccessor(dc) {
        return function (d) {
          return {
            index: d.properties.index
          };
        };
      };

      var accessors = this.getAttributeAccessors({
        dataAccessor: dataAccessor,
        dataContainer: dataContainer
      });

      var isFilteredAccessor = function isFilteredAccessor(d) {
        return _this3.filteredIndex ? _this3.filteredIndex[d.properties.index] : 1;
      };

      return _objectSpread({
        data: data,
        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(indexAccessor, customFilterValueAccessor),
        getFiltered: isFilteredAccessor
      }, accessors);
    }
  }, {
    key: "isInPolygon",
    value: function isInPolygon(data, index, polygon) {
      var _polygon$properties, _polygon$properties2;

      if (this.centroids.length === 0 || !this.centroids[index]) {
        return false;
      }

      var isReactangleSearchBox = ((_polygon$properties = polygon.properties) === null || _polygon$properties === void 0 ? void 0 : _polygon$properties.shape) === 'Rectangle';
      var point = this.centroids[index]; // if no valid centroid, return false

      if (!point) return false; // quick check if centroid is within the query rectangle

      if (isReactangleSearchBox && (_polygon$properties2 = polygon.properties) !== null && _polygon$properties2 !== void 0 && _polygon$properties2.bbox) {
        var _polygon$properties3;

        var _polygon$properties$b = (_polygon$properties3 = polygon.properties) === null || _polygon$properties3 === void 0 ? void 0 : _polygon$properties3.bbox,
            _polygon$properties$b2 = (0, _slicedToArray2["default"])(_polygon$properties$b, 4),
            minX = _polygon$properties$b2[0],
            minY = _polygon$properties$b2[1],
            maxX = _polygon$properties$b2[2],
            maxY = _polygon$properties$b2[3];

        return point[0] >= minX && point[0] <= maxX && point[1] >= minY && point[1] <= maxY;
      } // use turf.js to check if centroid is within query polygon


      return (0, _booleanWithin["default"])((0, _helpers.point)(point), polygon);
    }
  }, {
    key: "updateLayerMeta",
    value: function updateLayerMeta(dataContainer) {
      this.dataContainer = dataContainer;
      var getFeature = this.getPositionAccessor(dataContainer);
      var getGeoColumn = geoColumnAccessor(this.config.columns);
      var getGeoField = geoFieldAccessor(this.config.columns);

      if (dataContainer instanceof _utils.ArrowDataContainer) {
        // update the latest batch/chunk of geoarrow data when loading data incrementally
        if (this.dataToFeature.length < dataContainer.numChunks()) {
          // for incrementally loading data, we only load and render the latest batch; otherwise, we will load and render all batches
          var isIncrementalLoad = dataContainer.numChunks() - this.dataToFeature.length === 1;

          var _getGeojsonLayerMetaF = (0, _layerUtils.getGeojsonLayerMetaFromArrow)(_objectSpread({
            dataContainer: dataContainer,
            getGeoColumn: getGeoColumn,
            getGeoField: getGeoField
          }, isIncrementalLoad ? {
            chunkIndex: this.dataToFeature.length
          } : null)),
              dataToFeature = _getGeojsonLayerMetaF.dataToFeature,
              bounds = _getGeojsonLayerMetaF.bounds,
              fixedRadius = _getGeojsonLayerMetaF.fixedRadius,
              featureTypes = _getGeojsonLayerMetaF.featureTypes,
              centroids = _getGeojsonLayerMetaF.centroids;

          if (centroids) this.centroids = this.centroids.concat(centroids);
          this.updateMeta({
            bounds: bounds,
            fixedRadius: fixedRadius,
            featureTypes: featureTypes
          });
          this.dataToFeature = [].concat((0, _toConsumableArray2["default"])(this.dataToFeature), (0, _toConsumableArray2["default"])(dataToFeature));
        }
      } else {
        if (this.dataToFeature.length === 0) {
          var _getGeojsonLayerMeta = (0, _geojsonUtils.getGeojsonLayerMeta)({
            dataContainer: dataContainer,
            getFeature: getFeature
          }),
              _dataToFeature = _getGeojsonLayerMeta.dataToFeature,
              _bounds = _getGeojsonLayerMeta.bounds,
              _fixedRadius = _getGeojsonLayerMeta.fixedRadius,
              _featureTypes = _getGeojsonLayerMeta.featureTypes,
              _centroids = _getGeojsonLayerMeta.centroids;

          if (_centroids) this.centroids = _centroids;
          this.dataToFeature = _dataToFeature;
          this.updateMeta({
            bounds: _bounds,
            fixedRadius: _fixedRadius,
            featureTypes: _featureTypes
          });
        }
      }
    }
  }, {
    key: "setInitialLayerConfig",
    value: function setInitialLayerConfig(_ref5) {
      var dataContainer = _ref5.dataContainer;

      if (!dataContainer.numRows()) {
        return this;
      }

      this.updateLayerMeta(dataContainer);
      var featureTypes = this.meta.featureTypes; // default settings is stroke: true, filled: false

      if (featureTypes && featureTypes.polygon) {
        // set both fill and stroke to true
        return this.updateLayerVisConfig({
          filled: true,
          stroked: true,
          strokeColor: _baseLayer.colorMaker.next().value
        });
      } else if (featureTypes && featureTypes.point) {
        // set fill to true if detect point
        return this.updateLayerVisConfig({
          filled: true,
          stroked: false
        });
      }

      return this;
    }
  }, {
    key: "isLayerHovered",
    value: function isLayerHovered(objectInfo) {
      return this.dataContainer instanceof _utils.ArrowDataContainer ? (0, _layerUtils.isLayerHoveredFromArrow)(objectInfo, this.id) : (0, _get2["default"])((0, _getPrototypeOf2["default"])(GeoJsonLayer.prototype), "isLayerHovered", this).call(this, objectInfo);
    }
  }, {
    key: "hasHoveredObject",
    value: function hasHoveredObject(objectInfo) {
      return this.dataContainer instanceof _utils.ArrowDataContainer ? (0, _layerUtils.getHoveredObjectFromArrow)(objectInfo, this.dataContainer, this.id, geoColumnAccessor(this.config.columns), geoFieldAccessor(this.config.columns)) : (0, _get2["default"])((0, _getPrototypeOf2["default"])(GeoJsonLayer.prototype), "hasHoveredObject", this).call(this, objectInfo);
    }
  }, {
    key: "renderLayer",
    value: function renderLayer(opts) {
      var _this4 = this;

      var dataProps = opts.data,
          gpuFilter = opts.gpuFilter,
          objectHovered = opts.objectHovered,
          mapState = opts.mapState,
          interactionConfig = opts.interactionConfig;
      var _this$meta = this.meta,
          fixedRadius = _this$meta.fixedRadius,
          featureTypes = _this$meta.featureTypes;
      var radiusScale = this.getRadiusScaleByZoom(mapState, fixedRadius);
      var zoomFactor = this.getZoomFactor(mapState);
      var eleZoomFactor = this.getElevationZoomFactor(mapState);
      var visConfig = this.config.visConfig;
      var layerProps = {
        lineWidthScale: visConfig.thickness * zoomFactor * 8,
        elevationScale: visConfig.elevationScale * eleZoomFactor,
        pointRadiusScale: radiusScale,
        lineMiterLimit: 4
      };

      var updateTriggers = _objectSpread(_objectSpread({}, this.getVisualChannelUpdateTriggers()), {}, {
        getFilterValue: gpuFilter.filterValueUpdateTriggers,
        getFiltered: this.filteredIndexTrigger
      });

      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);
      var opaOverwrite = {
        opacity: visConfig.strokeOpacity
      };
      var pickable = interactionConfig.tooltip.enabled;
      var hoveredObject = this.hasHoveredObject(objectHovered);
      var data = dataProps.data,
          props = (0, _objectWithoutProperties2["default"])(dataProps, ["data"]); // arrow table can have multiple chunks, a deck.gl layer is created for each chunk

      var deckLayerData = this.dataContainer instanceof _utils.ArrowDataContainer ? data : [data];
      var deckLayers = deckLayerData.map(function (d, i) {
        return new _layers.GeoJsonLayer(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), layerProps), props), {}, {
          data: d,
          id: deckLayerData.length > 1 ? "".concat(_this4.id, "-").concat(i) : _this4.id,
          pickable: pickable,
          highlightColor: _constants.HIGHLIGH_COLOR_3D,
          autoHighlight: visConfig.enable3d && pickable,
          stroked: visConfig.stroked,
          filled: visConfig.filled,
          extruded: visConfig.enable3d,
          wireframe: visConfig.wireframe,
          wrapLongitude: false,
          lineMiterLimit: 2,
          capRounded: true,
          jointRounded: true,
          updateTriggers: updateTriggers,
          extensions: [].concat((0, _toConsumableArray2["default"])(defaultLayerProps.extensions), [new _deckglLayers.FilterArrowExtension()]),
          _subLayerProps: _objectSpread(_objectSpread(_objectSpread({}, featureTypes !== null && featureTypes !== void 0 && featureTypes.polygon ? {
            'polygons-stroke': opaOverwrite
          } : {}), featureTypes !== null && featureTypes !== void 0 && featureTypes.line ? {
            linestrings: opaOverwrite
          } : {}), featureTypes !== null && featureTypes !== void 0 && featureTypes.point ? {
            points: {
              lineOpacity: visConfig.strokeOpacity
            }
          } : {})
        }));
      });
      return [].concat((0, _toConsumableArray2["default"])(deckLayers), (0, _toConsumableArray2["default"])(hoveredObject && !visConfig.enable3d ? [new _layers.GeoJsonLayer(_objectSpread(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), layerProps), {}, {
        visible: defaultLayerProps.visible,
        wrapLongitude: false,
        data: [hoveredObject],
        getLineWidth: props.getLineWidth,
        getPointRadius: props.getPointRadius,
        getElevation: props.getElevation,
        getLineColor: this.config.highlightColor,
        getFillColor: this.config.highlightColor,
        // always draw outline
        stroked: true,
        filled: false
      }))] : []));
    }
  }], [{
    key: "type",
    get: function get() {
      return 'geojson';
    }
  }, {
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(_ref6) {
      var _this5 = this;

      var label = _ref6.label,
          _ref6$fields = _ref6.fields,
          fields = _ref6$fields === void 0 ? [] : _ref6$fields;
      var geojsonColumns = fields.filter(function (f) {
        return (f.type === 'geojson' || f.type === 'geoarrow') && SUPPORTED_ANALYZER_TYPES[f.analyzerType];
      }).map(function (f) {
        return f.name;
      });
      var defaultColumns = {
        geojson: (0, _lodash["default"])([].concat((0, _toConsumableArray2["default"])(_constants.GEOJSON_FIELDS.geojson), (0, _toConsumableArray2["default"])(geojsonColumns)))
      };
      var foundColumns = this.findDefaultColumnField(defaultColumns, fields);

      if (!foundColumns || !foundColumns.length) {
        return {
          props: []
        };
      }

      return {
        props: foundColumns.map(function (columns) {
          return {
            label: typeof label === 'string' && label.replace(/\.[^/.]+$/, '') || _this5.type,
            columns: columns,
            isVisible: true
          };
        })
      };
    }
  }]);
  return GeoJsonLayer;
}(_baseLayer["default"]);

exports["default"] = GeoJsonLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,