{"version":3,"sources":["../../../../src/encoders/video/stream-encoder.js"],"names":["FrameEncoder","StreamEncoder","constructor","settings","mimeType","extension","stream","mediaRecorder","chunks","start","bind","add","save","canvas","captureStream","framerate","MediaRecorder","ondataavailable","e","push","data","Promise","resolve","waiting","onstop","blob","Blob","type","stop"],"mappings":";AAqBA,OAAOA,YAAP,MAAyB,kBAAzB;;AAKA,MAAMC,aAAN,SAA4BD,YAA5B,CAAyC;AAWvCE,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,UAAMA,QAAN;;AADoB;;AAAA;;AAAA;;AAEpB,SAAKC,QAAL,GAAgB,YAAhB;AACA,SAAKC,SAAL,GAAiB,OAAjB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,GAAL,GAAW,KAAKA,GAAL,CAASD,IAAT,CAAc,IAAd,CAAX;AACA,SAAKE,IAAL,GAAY,KAAKA,IAAL,CAAUF,IAAV,CAAe,IAAf,CAAZ;AACD;;AAEDD,EAAAA,KAAK,GAAG;AACN,SAAKH,MAAL,GAAc,IAAd;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAKD,QAAMG,GAAN,CAAUE,MAAV,EAAkB;AAChB,QAAI,CAAC,KAAKP,MAAV,EAAkB;AAChB,WAAKA,MAAL,GAAcO,MAAM,CAACC,aAAP,CAAqB,KAAKC,SAA1B,CAAd;AACA,WAAKR,aAAL,GAAqB,IAAIS,aAAJ,CAAkB,KAAKV,MAAvB,CAArB;AACA,WAAKC,aAAL,CAAmBE,KAAnB;;AAEA,WAAKF,aAAL,CAAmBU,eAAnB,GAAqCC,CAAC,IAAI;AACxC,aAAKV,MAAL,CAAYW,IAAZ,CAAiBD,CAAC,CAACE,IAAnB;AACD,OAFD;AAGD;;AACD,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AAKD,QAAMV,IAAN,GAAa;AAEX,UAAMW,OAAO,GAAG,IAAIF,OAAJ,CAAYC,OAAO,IAAI;AACrC,WAAKf,aAAL,CAAmBiB,MAAnB,GAA4B,MAAM;AAChC,cAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,KAAKlB,MAAd,EAAsB;AAACmB,UAAAA,IAAI,EAAE;AAAP,SAAtB,CAAb;AACA,aAAKnB,MAAL,GAAc,EAAd;AACAc,QAAAA,OAAO,CAACG,IAAD,CAAP;AACD,OAJD;;AAKA,WAAKlB,aAAL,CAAmBqB,IAAnB;AACD,KAPe,CAAhB;AASA,WAAOL,OAAP;AACD;;AA5DsC;;AA+DzC,eAAetB,aAAf","sourcesContent":["// Copyright (c) 2020 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global MediaRecorder, Blob */\nimport FrameEncoder from '../frame-encoder';\n\n/*\n  HTMLCanvasElement.captureStream()\n*/\nclass StreamEncoder extends FrameEncoder {\n  /** @type {MediaStream} */\n  stream;\n  /** @type {MediaRecorder} */\n  mediaRecorder;\n  /** @type {Blob[]} */\n  chunks;\n\n  /**\n   * @param {import('types').FrameEncoderSettings} settings\n   */\n  constructor(settings) {\n    super(settings);\n    this.mimeType = 'video/webm';\n    this.extension = '.webm';\n    this.stream = null;\n    this.mediaRecorder = null;\n    this.chunks = [];\n    this.start = this.start.bind(this);\n    this.add = this.add.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  start() {\n    this.stream = null;\n    this.mediaRecorder = null;\n    this.chunks = [];\n  }\n\n  /**\n   * @param {HTMLCanvasElement} canvas\n   */\n  async add(canvas) {\n    if (!this.stream) {\n      this.stream = canvas.captureStream(this.framerate);\n      this.mediaRecorder = new MediaRecorder(this.stream);\n      this.mediaRecorder.start();\n\n      this.mediaRecorder.ondataavailable = e => {\n        this.chunks.push(e.data);\n      };\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * @return {Promise<Blob>}\n   */\n  async save() {\n    /** @type Promise<Blob> */\n    const waiting = new Promise(resolve => {\n      this.mediaRecorder.onstop = () => {\n        const blob = new Blob(this.chunks, {type: 'video/webm'});\n        this.chunks = [];\n        resolve(blob);\n      };\n      this.mediaRecorder.stop();\n    });\n\n    return waiting;\n  }\n}\n\nexport default StreamEncoder;\n"],"file":"stream-encoder.js"}