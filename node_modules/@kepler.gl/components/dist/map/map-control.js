"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _logo = _interopRequireDefault(require("../common/logo"));

var _splitMapButton = _interopRequireDefault(require("./split-map-button"));

var _toggle3dButton = _interopRequireDefault(require("./toggle-3d-button"));

var _layerSelectorPanel = _interopRequireDefault(require("./layer-selector-panel"));

var _mapLegendPanel = _interopRequireDefault(require("./map-legend-panel"));

var _mapDrawPanel = _interopRequireDefault(require("./map-draw-panel"));

var _localePanel = _interopRequireDefault(require("./locale-panel"));

var _templateObject;

var StyledMapControl = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  right: 0;\n  padding: ", "px;\n  z-index: 10;\n  margin-top: ", "px;\n  position: absolute;\n  display: grid;\n  row-gap: 8px;\n  justify-items: end;\n  pointer-events: none; /* prevent padding from blocking input */\n  & > * {\n    /* all children should allow input */\n    pointer-events: all;\n  }\n"])), function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.top || 0;
});

var LegendLogo = /*#__PURE__*/_react["default"].createElement(_logo["default"], {
  version: false,
  appName: "kepler.gl"
});

MapControlFactory.deps = [_splitMapButton["default"], _toggle3dButton["default"], _layerSelectorPanel["default"], _mapLegendPanel["default"], _mapDrawPanel["default"], _localePanel["default"]];

function MapControlFactory(SplitMapButton, Toggle3dButton, LayerSelectorPanel, MapLegendPanel, MapDrawPanel, LocalePanel) {
  var DEFAULT_ACTIONS = [SplitMapButton, LayerSelectorPanel, Toggle3dButton, MapDrawPanel, LocalePanel, MapLegendPanel];

  var MapControl = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var _ref$actionComponents = _ref.actionComponents,
        actionComponents = _ref$actionComponents === void 0 ? DEFAULT_ACTIONS : _ref$actionComponents,
        props = (0, _objectWithoutProperties2["default"])(_ref, ["actionComponents"]);
    return /*#__PURE__*/_react["default"].createElement(StyledMapControl, {
      className: "map-control",
      top: props.top
    }, actionComponents.map(function (ActionComponent, index) {
      return /*#__PURE__*/_react["default"].createElement(ActionComponent, (0, _extends2["default"])({
        key: index,
        className: "map-control-action"
      }, props));
    }));
  });

  MapControl.defaultProps = {
    isSplit: false,
    top: 0,
    mapIndex: 0,
    logoComponent: LegendLogo,
    actionComponents: DEFAULT_ACTIONS
  };
  MapControl.displayName = 'MapControl';
  return MapControl;
}

var _default = MapControlFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvbWFwLWNvbnRyb2wudHN4Il0sIm5hbWVzIjpbIlN0eWxlZE1hcENvbnRyb2wiLCJzdHlsZWQiLCJkaXYiLCJwcm9wcyIsInRoZW1lIiwibWFwQ29udHJvbCIsInBhZGRpbmciLCJ0b3AiLCJMZWdlbmRMb2dvIiwiTWFwQ29udHJvbEZhY3RvcnkiLCJkZXBzIiwiU3BsaXRNYXBCdXR0b25GYWN0b3J5IiwiVG9nZ2xlM2RCdXR0b25GYWN0b3J5IiwiTGF5ZXJTZWxlY3RvclBhbmVsRmFjdG9yeSIsIk1hcExlZ2VuZFBhbmVsRmFjdG9yeSIsIk1hcERyYXdQYW5lbEZhY3RvcnkiLCJMb2NhbGVQYW5lbEZhY3RvcnkiLCJTcGxpdE1hcEJ1dHRvbiIsIlRvZ2dsZTNkQnV0dG9uIiwiTGF5ZXJTZWxlY3RvclBhbmVsIiwiTWFwTGVnZW5kUGFuZWwiLCJNYXBEcmF3UGFuZWwiLCJMb2NhbGVQYW5lbCIsIkRFRkFVTFRfQUNUSU9OUyIsIk1hcENvbnRyb2wiLCJSZWFjdCIsIm1lbW8iLCJhY3Rpb25Db21wb25lbnRzIiwibWFwIiwiQWN0aW9uQ29tcG9uZW50IiwiaW5kZXgiLCJkZWZhdWx0UHJvcHMiLCJpc1NwbGl0IiwibWFwSW5kZXgiLCJsb2dvQ29tcG9uZW50IiwiZGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUNBOztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBVUEsSUFBTUEsZ0JBQWdCLEdBQUdDLDZCQUFPQyxHQUFWLDBZQUVULFVBQUFDLEtBQUs7QUFBQSxTQUFJQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUMsVUFBWixDQUF1QkMsT0FBM0I7QUFBQSxDQUZJLEVBSU4sVUFBQUgsS0FBSztBQUFBLFNBQUlBLEtBQUssQ0FBQ0ksR0FBTixJQUFhLENBQWpCO0FBQUEsQ0FKQyxDQUF0Qjs7QUFnQkEsSUFBTUMsVUFBVSxnQkFBRyxnQ0FBQyxnQkFBRDtBQUFjLEVBQUEsT0FBTyxFQUFFLEtBQXZCO0FBQThCLEVBQUEsT0FBTyxFQUFDO0FBQXRDLEVBQW5COztBQXlDQUMsaUJBQWlCLENBQUNDLElBQWxCLEdBQXlCLENBQ3ZCQywwQkFEdUIsRUFFdkJDLDBCQUZ1QixFQUd2QkMsOEJBSHVCLEVBSXZCQywwQkFKdUIsRUFLdkJDLHdCQUx1QixFQU12QkMsdUJBTnVCLENBQXpCOztBQVNBLFNBQVNQLGlCQUFULENBQ0VRLGNBREYsRUFFRUMsY0FGRixFQUdFQyxrQkFIRixFQUlFQyxjQUpGLEVBS0VDLFlBTEYsRUFNRUMsV0FORixFQU9FO0FBQ0EsTUFBTUMsZUFBZSxHQUFHLENBQ3RCTixjQURzQixFQUV0QkUsa0JBRnNCLEVBR3RCRCxjQUhzQixFQUl0QkcsWUFKc0IsRUFLdEJDLFdBTHNCLEVBTXRCRixjQU5zQixDQUF4Qjs7QUFTQSxNQUFNSSxVQUFxQyxnQkFBR0Msa0JBQU1DLElBQU4sQ0FDNUMsZ0JBQW9EO0FBQUEscUNBQWxEQyxnQkFBa0Q7QUFBQSxRQUFsREEsZ0JBQWtELHNDQUEvQkosZUFBK0I7QUFBQSxRQUFYcEIsS0FBVztBQUNsRCx3QkFDRSxnQ0FBQyxnQkFBRDtBQUFrQixNQUFBLFNBQVMsRUFBQyxhQUE1QjtBQUEwQyxNQUFBLEdBQUcsRUFBRUEsS0FBSyxDQUFDSTtBQUFyRCxPQUNHb0IsZ0JBQWdCLENBQUNDLEdBQWpCLENBQXFCLFVBQUNDLGVBQUQsRUFBa0JDLEtBQWxCO0FBQUEsMEJBQ3BCLGdDQUFDLGVBQUQ7QUFBaUIsUUFBQSxHQUFHLEVBQUVBLEtBQXRCO0FBQTZCLFFBQUEsU0FBUyxFQUFDO0FBQXZDLFNBQWdFM0IsS0FBaEUsRUFEb0I7QUFBQSxLQUFyQixDQURILENBREY7QUFPRCxHQVQyQyxDQUE5Qzs7QUFZQXFCLEVBQUFBLFVBQVUsQ0FBQ08sWUFBWCxHQUEwQjtBQUN4QkMsSUFBQUEsT0FBTyxFQUFFLEtBRGU7QUFFeEJ6QixJQUFBQSxHQUFHLEVBQUUsQ0FGbUI7QUFHeEIwQixJQUFBQSxRQUFRLEVBQUUsQ0FIYztBQUl4QkMsSUFBQUEsYUFBYSxFQUFFMUIsVUFKUztBQUt4Qm1CLElBQUFBLGdCQUFnQixFQUFFSjtBQUxNLEdBQTFCO0FBUUFDLEVBQUFBLFVBQVUsQ0FBQ1csV0FBWCxHQUF5QixZQUF6QjtBQUVBLFNBQU9YLFVBQVA7QUFDRDs7ZUFFY2YsaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgS2VwbGVyR2xMb2dvIGZyb20gJy4uL2NvbW1vbi9sb2dvJztcblxuLy8gZmFjdG9yaWVzXG5pbXBvcnQgU3BsaXRNYXBCdXR0b25GYWN0b3J5IGZyb20gJy4vc3BsaXQtbWFwLWJ1dHRvbic7XG5pbXBvcnQgVG9nZ2xlM2RCdXR0b25GYWN0b3J5IGZyb20gJy4vdG9nZ2xlLTNkLWJ1dHRvbic7XG5pbXBvcnQgTGF5ZXJTZWxlY3RvclBhbmVsRmFjdG9yeSBmcm9tICcuL2xheWVyLXNlbGVjdG9yLXBhbmVsJztcbmltcG9ydCBNYXBMZWdlbmRQYW5lbEZhY3RvcnkgZnJvbSAnLi9tYXAtbGVnZW5kLXBhbmVsJztcbmltcG9ydCBNYXBEcmF3UGFuZWxGYWN0b3J5IGZyb20gJy4vbWFwLWRyYXctcGFuZWwnO1xuaW1wb3J0IExvY2FsZVBhbmVsRmFjdG9yeSBmcm9tICcuL2xvY2FsZS1wYW5lbCc7XG5pbXBvcnQge0xheWVyfSBmcm9tICdAa2VwbGVyLmdsL2xheWVycyc7XG5pbXBvcnQge0VkaXRvciwgTWFwQ29udHJvbHMsIE1hcFN0YXRlfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCB7RGF0YXNldHN9IGZyb20gJ0BrZXBsZXIuZ2wvdGFibGUnO1xuaW1wb3J0IHtNYXBTdGF0ZUFjdGlvbnMsIFVJU3RhdGVBY3Rpb25zfSBmcm9tICdAa2VwbGVyLmdsL2FjdGlvbnMnO1xuXG5pbnRlcmZhY2UgU3R5bGVkTWFwQ29udHJvbFByb3BzIHtcbiAgdG9wPzogbnVtYmVyO1xufVxuXG5jb25zdCBTdHlsZWRNYXBDb250cm9sID0gc3R5bGVkLmRpdjxTdHlsZWRNYXBDb250cm9sUHJvcHM+YFxuICByaWdodDogMDtcbiAgcGFkZGluZzogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5tYXBDb250cm9sLnBhZGRpbmd9cHg7XG4gIHotaW5kZXg6IDEwO1xuICBtYXJnaW4tdG9wOiAke3Byb3BzID0+IHByb3BzLnRvcCB8fCAwfXB4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIHJvdy1nYXA6IDhweDtcbiAganVzdGlmeS1pdGVtczogZW5kO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTsgLyogcHJldmVudCBwYWRkaW5nIGZyb20gYmxvY2tpbmcgaW5wdXQgKi9cbiAgJiA+ICoge1xuICAgIC8qIGFsbCBjaGlsZHJlbiBzaG91bGQgYWxsb3cgaW5wdXQgKi9cbiAgICBwb2ludGVyLWV2ZW50czogYWxsO1xuICB9XG5gO1xuXG5jb25zdCBMZWdlbmRMb2dvID0gPEtlcGxlckdsTG9nbyB2ZXJzaW9uPXtmYWxzZX0gYXBwTmFtZT1cImtlcGxlci5nbFwiIC8+O1xuXG5leHBvcnQgdHlwZSBNYXBDb250cm9sUHJvcHMgPSB7XG4gIGF2YWlsYWJsZUxvY2FsZXM6IFJlYWRvbmx5QXJyYXk8c3RyaW5nPjtcbiAgZGF0YXNldHM6IERhdGFzZXRzO1xuICBkcmFnUm90YXRlOiBib29sZWFuO1xuICBpc1NwbGl0OiBib29sZWFuO1xuICBwcmltYXJ5OiBib29sZWFuO1xuICBsYXllcnM6IExheWVyW107XG4gIGxheWVyc1RvUmVuZGVyOiB7W2tleTogc3RyaW5nXTogYm9vbGVhbn07XG4gIG1hcEluZGV4OiBudW1iZXI7XG4gIG1hcENvbnRyb2xzOiBNYXBDb250cm9scztcbiAgb25Ub2dnbGVQZXJzcGVjdGl2ZTogKCkgPT4gdm9pZDtcbiAgb25Ub2dnbGVTcGxpdE1hcDogdHlwZW9mIE1hcFN0YXRlQWN0aW9ucy50b2dnbGVTcGxpdE1hcDtcbiAgb25Ub2dnbGVTcGxpdE1hcFZpZXdwb3J0OiAoe1xuICAgIGlzVmlld3BvcnRTeW5jZWQsXG4gICAgaXNab29tTG9ja2VkXG4gIH06IHtcbiAgICBpc1ZpZXdwb3J0U3luY2VkOiBib29sZWFuO1xuICAgIGlzWm9vbUxvY2tlZDogYm9vbGVhbjtcbiAgfSkgPT4gdm9pZDtcbiAgb25NYXBUb2dnbGVMYXllcjogKGxheWVySWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgb25Ub2dnbGVNYXBDb250cm9sOiAoY29udHJvbDogc3RyaW5nKSA9PiB2b2lkO1xuICBvblNldEVkaXRvck1vZGU6IChtb2RlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9uVG9nZ2xlRWRpdG9yVmlzaWJpbGl0eTogKCkgPT4gdm9pZDtcbiAgdG9wOiBudW1iZXI7XG4gIG9uU2V0TG9jYWxlOiB0eXBlb2YgVUlTdGF0ZUFjdGlvbnMuc2V0TG9jYWxlO1xuICBsb2NhbGU6IHN0cmluZztcbiAgbG9nb0NvbXBvbmVudD86IFJlYWN0LkZDIHwgUmVhY3QuUmVhY3ROb2RlO1xuICBpc0V4cG9ydD86IGJvb2xlYW47XG5cbiAgLy8gb3B0aW9uYWxcbiAgbWFwU3RhdGU/OiBNYXBTdGF0ZTtcbiAgcmVhZE9ubHk/OiBib29sZWFuO1xuICBzY2FsZT86IG51bWJlcjtcbiAgbWFwTGF5ZXJzPzoge1trZXk6IHN0cmluZ106IGJvb2xlYW59O1xuICBlZGl0b3I6IEVkaXRvcjtcbiAgYWN0aW9uQ29tcG9uZW50cz86IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PltdO1xuICBtYXBIZWlnaHQ/OiBudW1iZXI7XG59O1xuXG5NYXBDb250cm9sRmFjdG9yeS5kZXBzID0gW1xuICBTcGxpdE1hcEJ1dHRvbkZhY3RvcnksXG4gIFRvZ2dsZTNkQnV0dG9uRmFjdG9yeSxcbiAgTGF5ZXJTZWxlY3RvclBhbmVsRmFjdG9yeSxcbiAgTWFwTGVnZW5kUGFuZWxGYWN0b3J5LFxuICBNYXBEcmF3UGFuZWxGYWN0b3J5LFxuICBMb2NhbGVQYW5lbEZhY3Rvcnlcbl07XG5cbmZ1bmN0aW9uIE1hcENvbnRyb2xGYWN0b3J5KFxuICBTcGxpdE1hcEJ1dHRvbjogUmV0dXJuVHlwZTx0eXBlb2YgU3BsaXRNYXBCdXR0b25GYWN0b3J5PixcbiAgVG9nZ2xlM2RCdXR0b246IFJldHVyblR5cGU8dHlwZW9mIFRvZ2dsZTNkQnV0dG9uRmFjdG9yeT4sXG4gIExheWVyU2VsZWN0b3JQYW5lbDogUmV0dXJuVHlwZTx0eXBlb2YgTGF5ZXJTZWxlY3RvclBhbmVsRmFjdG9yeT4sXG4gIE1hcExlZ2VuZFBhbmVsOiBSZXR1cm5UeXBlPHR5cGVvZiBNYXBMZWdlbmRQYW5lbEZhY3Rvcnk+LFxuICBNYXBEcmF3UGFuZWw6IFJldHVyblR5cGU8dHlwZW9mIE1hcERyYXdQYW5lbEZhY3Rvcnk+LFxuICBMb2NhbGVQYW5lbDogUmV0dXJuVHlwZTx0eXBlb2YgTG9jYWxlUGFuZWxGYWN0b3J5PlxuKSB7XG4gIGNvbnN0IERFRkFVTFRfQUNUSU9OUyA9IFtcbiAgICBTcGxpdE1hcEJ1dHRvbixcbiAgICBMYXllclNlbGVjdG9yUGFuZWwsXG4gICAgVG9nZ2xlM2RCdXR0b24sXG4gICAgTWFwRHJhd1BhbmVsLFxuICAgIExvY2FsZVBhbmVsLFxuICAgIE1hcExlZ2VuZFBhbmVsXG4gIF07XG5cbiAgY29uc3QgTWFwQ29udHJvbDogUmVhY3QuRkM8TWFwQ29udHJvbFByb3BzPiA9IFJlYWN0Lm1lbW8oXG4gICAgKHthY3Rpb25Db21wb25lbnRzID0gREVGQVVMVF9BQ1RJT05TLCAuLi5wcm9wc30pID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRNYXBDb250cm9sIGNsYXNzTmFtZT1cIm1hcC1jb250cm9sXCIgdG9wPXtwcm9wcy50b3B9PlxuICAgICAgICAgIHthY3Rpb25Db21wb25lbnRzLm1hcCgoQWN0aW9uQ29tcG9uZW50LCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgPEFjdGlvbkNvbXBvbmVudCBrZXk9e2luZGV4fSBjbGFzc05hbWU9XCJtYXAtY29udHJvbC1hY3Rpb25cIiB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvU3R5bGVkTWFwQ29udHJvbD5cbiAgICAgICk7XG4gICAgfVxuICApO1xuXG4gIE1hcENvbnRyb2wuZGVmYXVsdFByb3BzID0ge1xuICAgIGlzU3BsaXQ6IGZhbHNlLFxuICAgIHRvcDogMCxcbiAgICBtYXBJbmRleDogMCxcbiAgICBsb2dvQ29tcG9uZW50OiBMZWdlbmRMb2dvLFxuICAgIGFjdGlvbkNvbXBvbmVudHM6IERFRkFVTFRfQUNUSU9OU1xuICB9O1xuXG4gIE1hcENvbnRyb2wuZGlzcGxheU5hbWUgPSAnTWFwQ29udHJvbCc7XG5cbiAgcmV0dXJuIE1hcENvbnRyb2w7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hcENvbnRyb2xGYWN0b3J5O1xuIl19