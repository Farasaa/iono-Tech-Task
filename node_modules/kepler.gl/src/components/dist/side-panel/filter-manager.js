"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactIntl = require("react-intl");

var _styledComponents = require("../common/styled-components");

var _sourceDataCatalog = _interopRequireDefault(require("./common/source-data-catalog"));

var _filterPanel = _interopRequireDefault(require("./filter-panel/filter-panel"));

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

var _panelViewListToggle = _interopRequireDefault(require("./panel-view-list-toggle"));

var _panelTitle = _interopRequireDefault(require("./panel-title"));

var _addFilterButton = _interopRequireDefault(require("./filter-panel/add-filter-button"));

var _datasetSection = _interopRequireDefault(require("./layer-panel/dataset-section"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

FilterManagerFactory.deps = [_datasetSection["default"], _filterPanel["default"], _panelTitle["default"], _addFilterButton["default"], _panelViewListToggle["default"], _sourceDataCatalog["default"]];

function FilterManagerFactory(DatasetSection, FilterPanel, PanelTitle, AddFilterButton, PanelViewListToggle, SourceDataCatalog) {
  var FilterList = function FilterList(_ref) {
    var filtersByIndex = _ref.filtersByIndex,
        filters = _ref.filters,
        datasets = _ref.datasets,
        layers = _ref.layers,
        isAnyFilterAnimating = _ref.isAnyFilterAnimating,
        visStateActions = _ref.visStateActions;
    var _removeFilter = visStateActions.removeFilter,
        setFilter = visStateActions.setFilter,
        toggleFilterAnimation = visStateActions.toggleFilterAnimation,
        _toggleFilterFeature = visStateActions.toggleFilterFeature,
        setFilterView = visStateActions.setFilterView;
    var filterPanelCallbacks = (0, _react.useMemo)(function () {
      return filtersByIndex.reduce(function (accu, _ref2) {
        var filter = _ref2.filter,
            idx = _ref2.idx;
        return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, filter.id, {
          removeFilter: function removeFilter() {
            return _removeFilter(idx);
          },
          toggleFilterView: function toggleFilterView() {
            return setFilterView(idx, (0, _utils.isSideFilter)(filter) ? _constants.FILTER_VIEW_TYPES.enlarged : _constants.FILTER_VIEW_TYPES.side);
          },
          toggleAnimation: function toggleAnimation() {
            return toggleFilterAnimation(idx);
          },
          toggleFilterFeature: function toggleFilterFeature() {
            return _toggleFilterFeature(idx);
          }
        }));
      }, {});
    }, [filtersByIndex, _removeFilter, setFilterView, toggleFilterAnimation, _toggleFilterFeature]);
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, (0, _toConsumableArray2["default"])(filtersByIndex).reverse().map(function (_ref3) {
      var filter = _ref3.filter,
          idx = _ref3.idx;
      return /*#__PURE__*/_react["default"].createElement(FilterPanel, {
        key: "".concat(filter.id, "-").concat(idx),
        idx: idx,
        filters: filters,
        filter: filter,
        datasets: datasets,
        layers: layers,
        isAnyFilterAnimating: isAnyFilterAnimating,
        removeFilter: filterPanelCallbacks[filter.id].removeFilter,
        enlargeFilter: filterPanelCallbacks[filter.id].toggleFilterView,
        toggleAnimation: filterPanelCallbacks[filter.id].toggleAnimation,
        toggleFilterFeature: filterPanelCallbacks[filter.id].toggleFilterFeature,
        setFilter: setFilter
      });
    }));
  };

  var DatasetFilterSection = function DatasetFilterSection(_ref4) {
    var filtersByIndex = _ref4.filtersByIndex,
        filters = _ref4.filters,
        dataset = _ref4.dataset,
        datasets = _ref4.datasets,
        layers = _ref4.layers,
        isAnyFilterAnimating = _ref4.isAnyFilterAnimating,
        visStateActions = _ref4.visStateActions,
        showDatasetTable = _ref4.showDatasetTable,
        updateTableColor = _ref4.updateTableColor,
        removeDataset = _ref4.removeDataset,
        showDeleteDataset = _ref4.showDeleteDataset;
    var datasetCatalog = (0, _react.useMemo)(function () {
      return (0, _defineProperty2["default"])({}, dataset.id, dataset);
    }, [dataset]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(SourceDataCatalog, {
      datasets: datasetCatalog,
      showDatasetTable: showDatasetTable,
      updateTableColor: updateTableColor,
      removeDataset: removeDataset,
      showDeleteDataset: showDeleteDataset
    }), /*#__PURE__*/_react["default"].createElement(FilterList, {
      filtersByIndex: filtersByIndex,
      filters: filters,
      datasets: datasets,
      layers: layers,
      isAnyFilterAnimating: isAnyFilterAnimating,
      visStateActions: visStateActions
    }));
  };

  var FilterManager = function FilterManager(_ref6) {
    var _ref6$filters = _ref6.filters,
        filters = _ref6$filters === void 0 ? [] : _ref6$filters,
        datasets = _ref6.datasets,
        layers = _ref6.layers,
        showDatasetTable = _ref6.showDatasetTable,
        updateTableColor = _ref6.updateTableColor,
        removeDataset = _ref6.removeDataset,
        showAddDataModal = _ref6.showAddDataModal,
        panelMetadata = _ref6.panelMetadata,
        panelListView = _ref6.panelListView,
        visStateActions = _ref6.visStateActions,
        uiStateActions = _ref6.uiStateActions;
    var addFilter = visStateActions.addFilter;
    var togglePanelListView = uiStateActions.togglePanelListView;
    var isAnyFilterAnimating = filters.some(function (f) {
      return f.isAnimating;
    });
    var onClickAddFilter = (0, _react.useCallback)(function (dataset) {
      return addFilter(dataset);
    }, [addFilter]);
    var isSortByDatasetMode = panelListView === _constants.PANEL_VIEW_TOGGLES.byDataset;
    var filtersByIndex = (0, _react.useMemo)(function () {
      return filters.map(function (f, idx) {
        return {
          filter: f,
          idx: idx
        };
      });
    }, [filters]);
    var filtersByDatasets = (0, _react.useMemo)(function () {
      return Object.keys(datasets).reduce(function (accu, dataId) {
        return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, dataId, filtersByIndex.filter(function (fidx) {
          return fidx.filter.dataId && fidx.filter.dataId[0] === dataId;
        })));
      }, {});
    }, [datasets, filtersByIndex]);

    var _TogglePanelListView = (0, _react.useCallback)(function (listView) {
      togglePanelListView({
        panelId: 'filter',
        listView: listView
      });
    }, [togglePanelListView]);

    var intl = (0, _reactIntl.useIntl)();
    var filterListProps = {
      datasets: datasets,
      filters: filters,
      layers: layers,
      isAnyFilterAnimating: isAnyFilterAnimating,
      visStateActions: visStateActions
    };
    var sourceDataCatalogProps = {
      showDatasetTable: showDatasetTable,
      updateTableColor: updateTableColor,
      removeDataset: removeDataset,
      showDeleteDataset: true
    };
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-manager"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(PanelViewListToggle, {
      togglePanelListView: _TogglePanelListView,
      mode: panelListView
    })), /*#__PURE__*/_react["default"].createElement(DatasetSection, (0, _extends2["default"])({
      datasets: datasets
    }, sourceDataCatalogProps, {
      showDatasetList: !isSortByDatasetMode,
      showAddDataModal: showAddDataModal
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelDivider, null), /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(PanelTitle, {
      className: "filter-manager-title",
      title: intl.formatMessage({
        id: panelMetadata.label
      })
    }, /*#__PURE__*/_react["default"].createElement(AddFilterButton, {
      datasets: datasets,
      onAdd: onClickAddFilter
    }))), /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, isSortByDatasetMode ? Object.keys(filtersByDatasets).map(function (dataId) {
      return /*#__PURE__*/_react["default"].createElement(DatasetFilterSection, (0, _extends2["default"])({
        key: dataId,
        filtersByIndex: filtersByDatasets[dataId],
        dataset: datasets[dataId]
      }, filterListProps, sourceDataCatalogProps));
    }) : /*#__PURE__*/_react["default"].createElement(FilterList, (0, _extends2["default"])({
      filtersByIndex: filtersByIndex
    }, filterListProps))));
  };

  return FilterManager;
}

var _default = FilterManagerFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,