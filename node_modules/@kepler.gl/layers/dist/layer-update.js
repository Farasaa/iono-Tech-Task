"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diffUpdateTriggers = diffUpdateTriggers;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/* eslint-disable guard-for-in */

/**
 *
 * @param {Object} updateTriggers {getPosition: {column}, getData: {filteredIndex}}
 * @param {Object} oldUpdateTriggers
 * @returns {boolean|object} `false` if nothing changed, or `triggerChanged` as an object
 */
function diffUpdateTriggers(updateTriggers) {
  var oldUpdateTriggers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var triggerChanged = {};
  var reason = false;

  for (var triggerName in updateTriggers) {
    var newTriggers = updateTriggers[triggerName] || {};
    var oldTriggers = oldUpdateTriggers[triggerName] || {};
    var diffReason = compareUpdateTrigger(newTriggers, oldTriggers, triggerName);

    if (diffReason) {
      triggerChanged[triggerName] = true;
      reason = triggerChanged;
    }
  }

  return reason;
}

function compareUpdateTrigger(newTriggers, oldTriggers, triggerName) {
  if ((0, _typeof2["default"])(oldTriggers) !== 'object') {
    return oldTriggers === newTriggers ? null : "".concat(triggerName, " changed shallowly");
  }

  for (var _key in oldTriggers) {
    if (!(_key in newTriggers)) {
      return "".concat(triggerName, ".").concat(_key, " deleted");
    } // shallow compare


    if (oldTriggers[_key] !== newTriggers[_key]) {
      return "".concat(triggerName, ".").concat(_key, " changed shallowly");
    }
  }

  for (var _key2 in newTriggers) {
    if (!(_key2 in oldTriggers)) {
      return "".concat(triggerName, ".").concat(_key2, " added");
    }
  }

  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sYXllci11cGRhdGUudHMiXSwibmFtZXMiOlsiZGlmZlVwZGF0ZVRyaWdnZXJzIiwidXBkYXRlVHJpZ2dlcnMiLCJvbGRVcGRhdGVUcmlnZ2VycyIsInRyaWdnZXJDaGFuZ2VkIiwicmVhc29uIiwidHJpZ2dlck5hbWUiLCJuZXdUcmlnZ2VycyIsIm9sZFRyaWdnZXJzIiwiZGlmZlJlYXNvbiIsImNvbXBhcmVVcGRhdGVUcmlnZ2VyIiwia2V5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0Esa0JBQVQsQ0FBNEJDLGNBQTVCLEVBQW9FO0FBQUEsTUFBeEJDLGlCQUF3Qix1RUFBSixFQUFJO0FBQ3pFLE1BQU1DLGNBQXFDLEdBQUcsRUFBOUM7QUFDQSxNQUFJQyxNQUF1QyxHQUFHLEtBQTlDOztBQUVBLE9BQUssSUFBTUMsV0FBWCxJQUEwQkosY0FBMUIsRUFBMEM7QUFDeEMsUUFBTUssV0FBVyxHQUFHTCxjQUFjLENBQUNJLFdBQUQsQ0FBZCxJQUErQixFQUFuRDtBQUNBLFFBQU1FLFdBQVcsR0FBR0wsaUJBQWlCLENBQUNHLFdBQUQsQ0FBakIsSUFBa0MsRUFBdEQ7QUFDQSxRQUFNRyxVQUFVLEdBQUdDLG9CQUFvQixDQUFDSCxXQUFELEVBQWNDLFdBQWQsRUFBMkJGLFdBQTNCLENBQXZDOztBQUVBLFFBQUlHLFVBQUosRUFBZ0I7QUFDZEwsTUFBQUEsY0FBYyxDQUFDRSxXQUFELENBQWQsR0FBOEIsSUFBOUI7QUFDQUQsTUFBQUEsTUFBTSxHQUFHRCxjQUFUO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQyxNQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssb0JBQVQsQ0FBOEJILFdBQTlCLEVBQTJDQyxXQUEzQyxFQUF3REYsV0FBeEQsRUFBcUU7QUFDbkUsTUFBSSx5QkFBT0UsV0FBUCxNQUF1QixRQUEzQixFQUFxQztBQUNuQyxXQUFPQSxXQUFXLEtBQUtELFdBQWhCLEdBQThCLElBQTlCLGFBQXdDRCxXQUF4Qyx1QkFBUDtBQUNEOztBQUVELE9BQUssSUFBTUssSUFBWCxJQUFrQkgsV0FBbEIsRUFBK0I7QUFDN0IsUUFBSSxFQUFFRyxJQUFHLElBQUlKLFdBQVQsQ0FBSixFQUEyQjtBQUN6Qix1QkFBVUQsV0FBVixjQUF5QkssSUFBekI7QUFDRCxLQUg0QixDQUs3Qjs7O0FBQ0EsUUFBSUgsV0FBVyxDQUFDRyxJQUFELENBQVgsS0FBcUJKLFdBQVcsQ0FBQ0ksSUFBRCxDQUFwQyxFQUEyQztBQUN6Qyx1QkFBVUwsV0FBVixjQUF5QkssSUFBekI7QUFDRDtBQUNGOztBQUVELE9BQUssSUFBTUEsS0FBWCxJQUFrQkosV0FBbEIsRUFBK0I7QUFDN0IsUUFBSSxFQUFFSSxLQUFHLElBQUlILFdBQVQsQ0FBSixFQUEyQjtBQUN6Qix1QkFBVUYsV0FBVixjQUF5QkssS0FBekI7QUFDRDtBQUNGOztBQUVELFNBQU8sSUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB1cGRhdGVUcmlnZ2VycyB7Z2V0UG9zaXRpb246IHtjb2x1bW59LCBnZXREYXRhOiB7ZmlsdGVyZWRJbmRleH19XG4gKiBAcGFyYW0ge09iamVjdH0gb2xkVXBkYXRlVHJpZ2dlcnNcbiAqIEByZXR1cm5zIHtib29sZWFufG9iamVjdH0gYGZhbHNlYCBpZiBub3RoaW5nIGNoYW5nZWQsIG9yIGB0cmlnZ2VyQ2hhbmdlZGAgYXMgYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmVXBkYXRlVHJpZ2dlcnModXBkYXRlVHJpZ2dlcnMsIG9sZFVwZGF0ZVRyaWdnZXJzID0ge30pIHtcbiAgY29uc3QgdHJpZ2dlckNoYW5nZWQ6IHtba2V5OiBzdHJpbmddOiB0cnVlfSA9IHt9O1xuICBsZXQgcmVhc29uOiBib29sZWFuIHwge1trZXk6IHN0cmluZ106IHRydWV9ID0gZmFsc2U7XG5cbiAgZm9yIChjb25zdCB0cmlnZ2VyTmFtZSBpbiB1cGRhdGVUcmlnZ2Vycykge1xuICAgIGNvbnN0IG5ld1RyaWdnZXJzID0gdXBkYXRlVHJpZ2dlcnNbdHJpZ2dlck5hbWVdIHx8IHt9O1xuICAgIGNvbnN0IG9sZFRyaWdnZXJzID0gb2xkVXBkYXRlVHJpZ2dlcnNbdHJpZ2dlck5hbWVdIHx8IHt9O1xuICAgIGNvbnN0IGRpZmZSZWFzb24gPSBjb21wYXJlVXBkYXRlVHJpZ2dlcihuZXdUcmlnZ2Vycywgb2xkVHJpZ2dlcnMsIHRyaWdnZXJOYW1lKTtcblxuICAgIGlmIChkaWZmUmVhc29uKSB7XG4gICAgICB0cmlnZ2VyQ2hhbmdlZFt0cmlnZ2VyTmFtZV0gPSB0cnVlO1xuICAgICAgcmVhc29uID0gdHJpZ2dlckNoYW5nZWQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlYXNvbjtcbn1cblxuZnVuY3Rpb24gY29tcGFyZVVwZGF0ZVRyaWdnZXIobmV3VHJpZ2dlcnMsIG9sZFRyaWdnZXJzLCB0cmlnZ2VyTmFtZSkge1xuICBpZiAodHlwZW9mIG9sZFRyaWdnZXJzICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvbGRUcmlnZ2VycyA9PT0gbmV3VHJpZ2dlcnMgPyBudWxsIDogYCR7dHJpZ2dlck5hbWV9IGNoYW5nZWQgc2hhbGxvd2x5YDtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IGluIG9sZFRyaWdnZXJzKSB7XG4gICAgaWYgKCEoa2V5IGluIG5ld1RyaWdnZXJzKSkge1xuICAgICAgcmV0dXJuIGAke3RyaWdnZXJOYW1lfS4ke2tleX0gZGVsZXRlZGA7XG4gICAgfVxuXG4gICAgLy8gc2hhbGxvdyBjb21wYXJlXG4gICAgaWYgKG9sZFRyaWdnZXJzW2tleV0gIT09IG5ld1RyaWdnZXJzW2tleV0pIHtcbiAgICAgIHJldHVybiBgJHt0cmlnZ2VyTmFtZX0uJHtrZXl9IGNoYW5nZWQgc2hhbGxvd2x5YDtcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBpbiBuZXdUcmlnZ2Vycykge1xuICAgIGlmICghKGtleSBpbiBvbGRUcmlnZ2VycykpIHtcbiAgICAgIHJldHVybiBgJHt0cmlnZ2VyTmFtZX0uJHtrZXl9IGFkZGVkYDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiJdfQ==