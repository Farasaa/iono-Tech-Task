"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames3 = _interopRequireDefault(require("classnames"));

var _sortable = require("@dnd-kit/sortable");

var _utilities = require("@dnd-kit/utilities");

var _layerPanel = _interopRequireDefault(require("./layer-panel"));

var _utils = require("@kepler.gl/utils");

var _constants = require("@kepler.gl/constants");

var _templateObject, _templateObject2;

// make sure the element is always visible while is being dragged
// item being dragged is appended in body, here to reset its global style
var Container = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n"])));

var SortableStyledItem = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  z-index: ", ";\n  transition: ", ";\n  transform: ", ";\n  &.sorting {\n    opacity: 0.3;\n    pointer-events: none;\n  }\n  &.sorting-layers .layer-panel__header {\n    background-color: ", ";\n    font-family: ", ";\n    font-weight: ", ";\n    font-size: ", ";\n    line-height: ", ";\n    *,\n    *:before,\n    *:after {\n      box-sizing: border-box;\n    }\n    .layer__drag-handle {\n      opacity: 1;\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.dropdownWrapperZ + 1;
}, function (props) {
  return props.transition;
}, function (props) {
  return props.transform;
}, function (props) {
  return props.theme.panelBackgroundHover;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.fontWeight;
}, function (props) {
  return props.theme.fontSize;
}, function (props) {
  return props.theme.lineHeight;
}, function (props) {
  return props.theme.textColorHl;
});

var INITIAL_LAYERS_TO_SHOW = [];
LayerListFactory.deps = [_layerPanel["default"]];

function LayerListFactory(LayerPanel) {
  // By wrapping layer panel using a sortable element we don't have to implement the drag and drop logic into the panel itself;
  // Developers can provide any layer panel implementation and it will still be sortable
  var SortableItem = function SortableItem(_ref) {
    var layer = _ref.layer,
        idx = _ref.idx,
        panelProps = _ref.panelProps,
        layerActions = _ref.layerActions,
        disabled = _ref.disabled;

    var _useSortable = (0, _sortable.useSortable)({
      id: layer.id,
      data: {
        type: _constants.SORTABLE_LAYER_TYPE,
        parent: _constants.SORTABLE_SIDE_PANEL_TYPE
      },
      disabled: disabled
    }),
        attributes = _useSortable.attributes,
        listeners = _useSortable.listeners,
        setNodeRef = _useSortable.setNodeRef,
        isDragging = _useSortable.isDragging,
        transform = _useSortable.transform,
        transition = _useSortable.transition;

    return /*#__PURE__*/_react["default"].createElement(SortableStyledItem, (0, _extends2["default"])({
      ref: setNodeRef,
      className: (0, _classnames3["default"])((0, _defineProperty2["default"])({}, _constants.dataTestIds.sortableLayerItem, !disabled), (0, _defineProperty2["default"])({}, _constants.dataTestIds.staticLayerItem, disabled), {
        sorting: isDragging
      }),
      "data-testid": disabled ? _constants.dataTestIds.staticLayerItem : _constants.dataTestIds.sortableLayerItem,
      transform: _utilities.CSS.Transform.toString(transform),
      transition: transition
    }, attributes), /*#__PURE__*/_react["default"].createElement(LayerPanel, (0, _extends2["default"])({}, panelProps, layerActions, {
      key: layer.id,
      idx: idx,
      layer: layer,
      listeners: listeners,
      isDraggable: !disabled
    })));
  };

  var LayerList = function LayerList(props) {
    var layers = props.layers,
        datasets = props.datasets,
        layerOrder = props.layerOrder,
        uiStateActions = props.uiStateActions,
        visStateActions = props.visStateActions,
        layerClasses = props.layerClasses,
        _props$isSortable = props.isSortable,
        isSortable = _props$isSortable === void 0 ? true : _props$isSortable;
    var openModal = uiStateActions.toggleModal;
    var layersToShow = (0, _react.useMemo)(function () {
      return layerOrder.reduce(function (acc, layerId) {
        var layer = (0, _utils.findById)(layerId)(layers.filter(Boolean));

        if (!layer) {
          return acc;
        }

        return !layer.config.hidden ? [].concat((0, _toConsumableArray2["default"])(acc), [layer]) : acc;
      }, INITIAL_LAYERS_TO_SHOW);
    }, [layers, layerOrder]);
    var sidePanelDndItems = (0, _react.useMemo)(function () {
      return layersToShow.map(function (_ref2) {
        var id = _ref2.id;
        return id;
      });
    }, [layersToShow]);
    var layerTypeOptions = (0, _react.useMemo)(function () {
      return Object.keys(layerClasses).map(function (key) {
        var layer = new layerClasses[key]({
          dataId: ''
        });
        return {
          id: key,
          label: layer.name,
          icon: layer.layerIcon,
          requireData: layer.requireData
        };
      });
    }, [layerClasses]);
    var layerActions = (0, _react.useMemo)(function () {
      return {
        layerColorUIChange: visStateActions.layerColorUIChange,
        layerConfigChange: visStateActions.layerConfigChange,
        layerVisualChannelConfigChange: visStateActions.layerVisualChannelConfigChange,
        layerTypeChange: visStateActions.layerTypeChange,
        layerVisConfigChange: visStateActions.layerVisConfigChange,
        layerTextLabelChange: visStateActions.layerTextLabelChange,
        removeLayer: visStateActions.removeLayer,
        duplicateLayer: visStateActions.duplicateLayer,
        layerSetIsValid: visStateActions.layerSetIsValid
      };
    }, [visStateActions]);
    var panelProps = (0, _react.useMemo)(function () {
      return {
        datasets: datasets,
        openModal: openModal,
        layerTypeOptions: layerTypeOptions
      };
    }, [datasets, openModal, layerTypeOptions]);
    return /*#__PURE__*/_react["default"].createElement(Container, null, /*#__PURE__*/_react["default"].createElement(_sortable.SortableContext, {
      id: _constants.SORTABLE_SIDE_PANEL_TYPE,
      items: sidePanelDndItems,
      strategy: _sortable.verticalListSortingStrategy,
      disabled: !isSortable
    }, layersToShow.map(function (layer) {
      return /*#__PURE__*/_react["default"].createElement(SortableItem, {
        key: layer.id,
        layer: layer,
        idx: layers.findIndex(function (l) {
          return (l === null || l === void 0 ? void 0 : l.id) === layer.id;
        }),
        panelProps: panelProps,
        layerActions: layerActions,
        disabled: !isSortable
      });
    })));
  };

  return LayerList;
}

var _default = LayerListFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,