{"version":3,"file":"table-accessors.js","names":["isTable","table","_table$data","shape","Array","isArray","data","features","Boolean","numRows","undefined","getTableLength","length","arrowTable","column","Object","values","Error","getTableNumCols","schema","fields","keys","numCols","getTableCell","rowIndex","columnName","_arrowTable$getChildA","columnIndex","getTableColumnIndex","arrowColumnIndex","findIndex","field","name","getChildAt","get","getTableCellAt","_arrowTable$getChildA2","columnName1","getTableColumnName","columnName2","columnName3","getTableRowShape","_table$schema","_table$schema2","_table$schema2$fields","getTableRowAsObject","target","copy","fromEntries","entries","objectRow","i","row","getTableRowAsArray","from","arrayRow","makeArrayRowTable","makeObjectRowTable","makeColumnarTable","makeRowIterator","makeArrayRowIterator","makeObjectRowIterator","arguments"],"sources":["../../../../src/lib/table/simple-table/table-accessors.ts"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable no-else-return */\n\nimport {Table, ArrayRowTable, ObjectRowTable} from '../../../types/category-table';\n\nexport function isTable(table: any): table is Table {\n  const shape = typeof table === 'object' && table?.shape;\n  switch (shape) {\n    case 'array-row-table':\n    case 'object-row-table':\n      return Array.isArray(table.data);\n\n    case 'geojson-table':\n      return Array.isArray(table.features);\n\n    case 'columnar-table':\n      return table.data && typeof table.data === 'object';\n\n    case 'arrow-table':\n      return Boolean(table?.data?.numRows !== undefined);\n\n    default:\n      return false;\n  }\n}\n\n/**\n * Returns the length of the table (i.e. the number of rows)\n */\nexport function getTableLength(table: Table): number {\n  switch (table.shape) {\n    case 'array-row-table':\n    case 'object-row-table':\n      return table.data.length;\n\n    case 'geojson-table':\n      return table.features.length;\n\n    case 'arrow-table':\n      const arrowTable = table.data as any;\n      return arrowTable.numRows;\n\n    case 'columnar-table':\n      for (const column of Object.values(table.data)) {\n        return column.length || 0;\n      }\n      return 0;\n    default:\n      throw new Error('table');\n  }\n}\n\n/**\n * Returns the number of columns in the table\n * @throws Fails to deduce number of columns if the table has no schema and is empty\n */\nexport function getTableNumCols(table: Table): number {\n  if (table.schema) {\n    return table.schema.fields.length;\n  }\n  if (getTableLength(table) === 0) {\n    throw new Error('empty table');\n  }\n  switch (table.shape) {\n    case 'array-row-table':\n      return table.data[0].length;\n    case 'object-row-table':\n      return Object.keys(table.data[0]).length;\n    case 'geojson-table':\n      return Object.keys(table.features[0]).length;\n    case 'columnar-table':\n      return Object.keys(table.data).length;\n    case 'arrow-table':\n      const arrowTable = table.data as any;\n      return arrowTable.numCols;\n    default:\n      throw new Error('table');\n  }\n}\n\n/** Get a table cell value at row index and column name */\nexport function getTableCell(table: Table, rowIndex: number, columnName: string): unknown {\n  switch (table.shape) {\n    case 'array-row-table':\n      const columnIndex = getTableColumnIndex(table, columnName);\n      return table.data[rowIndex][columnIndex];\n\n    case 'object-row-table':\n      return table.data[rowIndex][columnName];\n\n    case 'geojson-table':\n      return table.features[rowIndex][columnName];\n\n    case 'columnar-table':\n      const column = table.data[columnName];\n      return column[rowIndex];\n\n    case 'arrow-table':\n      const arrowTable = table.data as any;\n      const arrowColumnIndex = arrowTable.schema.fields.findIndex(\n        (field) => field.name === columnName\n      );\n      return arrowTable.getChildAt(arrowColumnIndex)?.get(rowIndex);\n\n    default:\n      throw new Error('todo');\n  }\n}\n\n/** Get a table cell value at row index and column name */\nexport function getTableCellAt(table: Table, rowIndex: number, columnIndex: number): unknown {\n  switch (table.shape) {\n    case 'array-row-table':\n      return table.data[rowIndex][columnIndex];\n\n    case 'object-row-table':\n      const columnName1 = getTableColumnName(table, columnIndex);\n      return table.data[rowIndex][columnName1];\n\n    case 'geojson-table':\n      const columnName2 = getTableColumnName(table, columnIndex);\n      return table.features[rowIndex][columnName2];\n\n    case 'columnar-table':\n      const columnName3 = getTableColumnName(table, columnIndex);\n      const column = table.data[columnName3];\n      return column[rowIndex];\n\n    case 'arrow-table':\n      const arrowTable = table.data as any;\n      return arrowTable.getChildAt(columnIndex)?.get(rowIndex);\n\n    default:\n      throw new Error('todo');\n  }\n}\n\n/** Deduce the table row shape */\nexport function getTableRowShape(table: Table): 'array-row-table' | 'object-row-table' {\n  switch (table.shape) {\n    case 'array-row-table':\n    case 'object-row-table':\n      return table.shape;\n\n    case 'geojson-table':\n      // TODO - this is not correct, geojson-table is not a row table\n      return 'object-row-table';\n\n    case 'columnar-table':\n    default:\n      throw new Error('Not a row table');\n  }\n}\n\n/** Get the index of a named table column. Requires the table to have a schema */\nexport function getTableColumnIndex(table: Table, columnName: string): number {\n  const columnIndex = table.schema?.fields.findIndex((field) => field.name === columnName);\n  if (columnIndex === undefined) {\n    throw new Error(columnName);\n  }\n  return columnIndex;\n}\n\n/** Get the name of a table column by index. Requires the table to have a schema */\nexport function getTableColumnName(table: Table, columnIndex: number): string {\n  const columnName = table.schema?.fields[columnIndex]?.name;\n  if (!columnName) {\n    throw new Error(`${columnIndex}`);\n  }\n  return columnName;\n}\n\n/**\n * Returns one row of the table in object format.\n * @param target Optional parameter will be used if needed to store the row. Can be reused between calls to improve performance\n * @returns an array representing the row. May be the original array in the row, a new object, or the target parameter\n */\n// eslint-disable-next-line complexity\nexport function getTableRowAsObject(\n  table: Table,\n  rowIndex: number,\n  target?: {[columnName: string]: unknown},\n  copy?: 'copy'\n): {[columnName: string]: unknown} {\n  switch (table.shape) {\n    case 'object-row-table':\n      return copy ? Object.fromEntries(Object.entries(table.data[rowIndex])) : table.data[rowIndex];\n\n    case 'array-row-table':\n      if (table.schema) {\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          objectRow[table.schema.fields[i].name] = table.data[rowIndex][i];\n        }\n        return objectRow;\n      }\n      throw new Error('no schema');\n\n    case 'geojson-table':\n      if (table.schema) {\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        // TODO - should lift properties to top level\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          objectRow[table.schema.fields[i].name] = table.features[rowIndex][i];\n        }\n        return objectRow;\n      }\n      throw new Error('no schema');\n\n    case 'columnar-table':\n      if (table.schema) {\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          objectRow[table.schema.fields[i].name] =\n            table.data[table.schema.fields[i].name][rowIndex];\n        }\n        return objectRow;\n      } else {\n        // eslint-disable-line no-else-return\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        for (const [name, column] of Object.entries(table.data)) {\n          objectRow[name] = column[rowIndex];\n        }\n        return objectRow;\n      }\n\n    case 'arrow-table':\n      const arrowTable = table.data as any;\n      const objectRow: {[columnName: string]: unknown} = target || {};\n      const row = arrowTable.get(rowIndex);\n      const schema = arrowTable.schema;\n      for (let i = 0; i < schema.fields.length; i++) {\n        objectRow[schema.fields[i].name] = row?.[schema.fields[i].name];\n      }\n      return objectRow;\n\n    default:\n      throw new Error('shape');\n  }\n}\n\n/**\n * Returns one row of the table in array format.\n * @param target Optional parameter will be used if needed to store the row. Can be reused between calls to improve performance.\n * @returns an array representing the row. May be the original array in the row, a new object, or the target parameter\n */\n// eslint-disable-next-line complexity\nexport function getTableRowAsArray(\n  table: Table,\n  rowIndex: number,\n  target?: unknown[],\n  copy?: 'copy'\n): unknown[] {\n  switch (table.shape) {\n    case 'array-row-table':\n      return copy ? Array.from(table.data[rowIndex]) : table.data[rowIndex];\n\n    case 'object-row-table':\n      if (table.schema) {\n        const arrayRow: unknown[] = target || [];\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          arrayRow[i] = table.data[rowIndex][table.schema.fields[i].name];\n        }\n        return arrayRow;\n      }\n      // Warning: just slap on the values, this risks mismatches between rows\n      return Object.values(table.data[rowIndex]);\n\n    case 'geojson-table':\n      if (table.schema) {\n        const arrayRow: unknown[] = target || [];\n        // TODO - should lift properties to top level\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          arrayRow[i] = table.features[rowIndex][table.schema.fields[i].name];\n        }\n        return arrayRow;\n      }\n      // Warning: just slap on the values, this risks mismatches between rows\n      return Object.values(table.features[rowIndex]);\n\n    case 'columnar-table':\n      if (table.schema) {\n        const arrayRow: unknown[] = target || [];\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          arrayRow[i] = table.data[table.schema.fields[i].name][rowIndex];\n        }\n        return arrayRow;\n      } else {\n        // eslint-disable-line no-else-return\n        const arrayRow: unknown[] = target || [];\n        let i = 0;\n        for (const column of Object.values(table.data)) {\n          arrayRow[i] = column[rowIndex];\n          i++;\n        }\n        return arrayRow;\n      }\n\n    case 'arrow-table':\n      const arrowTable = table.data as any;\n      const arrayRow: unknown[] = target || [];\n      const row = arrowTable.get(rowIndex);\n      const schema = arrowTable.schema;\n      for (let i = 0; i < schema.fields.length; i++) {\n        arrayRow[i] = row?.[schema.fields[i].name];\n      }\n      return arrayRow;\n\n    default:\n      throw new Error('shape');\n  }\n}\n\n/** Convert any table into array row format */\nexport function makeArrayRowTable(table: Table): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format */\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format */\nexport function makeColumnarTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n// Row Iterators\n\n/**\n * Iterate over table rows\n * @param table\n * @param shape\n */\nexport function* makeRowIterator(\n  table: Table,\n  shape: 'object-row-table' | 'array-row-table'\n): Iterable<unknown[] | {[key: string]: unknown}> {\n  switch (shape) {\n    case 'array-row-table':\n      yield* makeArrayRowIterator(table);\n      break;\n    case 'object-row-table':\n      yield* makeObjectRowIterator(table);\n      break;\n\n    default:\n      throw new Error(`Unknown row type ${shape}`);\n  }\n}\n\n/**\n * Streaming processing: Iterate over table, yielding array rows\n * @param table\n * @param shape\n */\nexport function* makeArrayRowIterator(table: Table, target: unknown[] = []): Iterable<unknown[]> {\n  const length = getTableLength(table);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    yield getTableRowAsArray(table, rowIndex, target);\n  }\n}\n\n/**\n * Streaming processing: Iterate over table, yielding object rows\n * @param table\n * @param shape\n */\nexport function* makeObjectRowIterator(\n  table: Table,\n  target: {[key: string]: unknown} = {}\n): Iterable<{[key: string]: unknown}> {\n  const length = getTableLength(table);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    yield getTableRowAsObject(table, rowIndex, target);\n  }\n}\n"],"mappings":"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"}