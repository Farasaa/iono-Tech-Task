"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pointToPolygonGeo = pointToPolygonGeo;

var _core = require("@deck.gl/core");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * top left of the grid to a square polygon for the hover layer
 * and current latitude
 * @param object
 * @param cellSize
 * @param coverage
 * @param properties
 * @param mapState
 * @returns - geojson feature
 */
// TODO: TEST
function pointToPolygonGeo(_ref) {
  var object = _ref.object,
      cellSize = _ref.cellSize,
      coverage = _ref.coverage,
      properties = _ref.properties,
      mapState = _ref.mapState;
  var position = object.position;
  var viewport = new _core.WebMercatorViewport(mapState);

  if (!position) {
    return null;
  }

  return {
    geometry: {
      coordinates: [viewport.addMetersToLngLat(position, [cellSize * (0.5 - coverage / 2), cellSize * (0.5 - coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 + coverage / 2), cellSize * (0.5 - coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 + coverage / 2), cellSize * (0.5 + coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 - coverage / 2), cellSize * (0.5 + coverage / 2)]), viewport.addMetersToLngLat(position, [cellSize * (0.5 - coverage / 2), cellSize * (0.5 - coverage / 2)])],
      type: 'LineString'
    },
    properties: properties
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmlkLWxheWVyL2dyaWQtdXRpbHMudHMiXSwibmFtZXMiOlsicG9pbnRUb1BvbHlnb25HZW8iLCJvYmplY3QiLCJjZWxsU2l6ZSIsImNvdmVyYWdlIiwicHJvcGVydGllcyIsIm1hcFN0YXRlIiwicG9zaXRpb24iLCJ2aWV3cG9ydCIsIldlYk1lcmNhdG9yVmlld3BvcnQiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwiYWRkTWV0ZXJzVG9MbmdMYXQiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0E7O0FBSEE7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ08sU0FBU0EsaUJBQVQsT0FZSjtBQUFBLE1BWERDLE1BV0MsUUFYREEsTUFXQztBQUFBLE1BVkRDLFFBVUMsUUFWREEsUUFVQztBQUFBLE1BVERDLFFBU0MsUUFUREEsUUFTQztBQUFBLE1BUkRDLFVBUUMsUUFSREEsVUFRQztBQUFBLE1BUERDLFFBT0MsUUFQREEsUUFPQztBQUFBLE1BQ01DLFFBRE4sR0FDa0JMLE1BRGxCLENBQ01LLFFBRE47QUFFRCxNQUFNQyxRQUFRLEdBQUcsSUFBSUMseUJBQUosQ0FBd0JILFFBQXhCLENBQWpCOztBQUVBLE1BQUksQ0FBQ0MsUUFBTCxFQUFlO0FBQ2IsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBTztBQUNMRyxJQUFBQSxRQUFRLEVBQUU7QUFDUkMsTUFBQUEsV0FBVyxFQUFFLENBQ1hILFFBQVEsQ0FBQ0ksaUJBQVQsQ0FBMkJMLFFBQTNCLEVBQXFDLENBQ25DSixRQUFRLElBQUksTUFBTUMsUUFBUSxHQUFHLENBQXJCLENBRDJCLEVBRW5DRCxRQUFRLElBQUksTUFBTUMsUUFBUSxHQUFHLENBQXJCLENBRjJCLENBQXJDLENBRFcsRUFLWEksUUFBUSxDQUFDSSxpQkFBVCxDQUEyQkwsUUFBM0IsRUFBcUMsQ0FDbkNKLFFBQVEsSUFBSSxNQUFNQyxRQUFRLEdBQUcsQ0FBckIsQ0FEMkIsRUFFbkNELFFBQVEsSUFBSSxNQUFNQyxRQUFRLEdBQUcsQ0FBckIsQ0FGMkIsQ0FBckMsQ0FMVyxFQVNYSSxRQUFRLENBQUNJLGlCQUFULENBQTJCTCxRQUEzQixFQUFxQyxDQUNuQ0osUUFBUSxJQUFJLE1BQU1DLFFBQVEsR0FBRyxDQUFyQixDQUQyQixFQUVuQ0QsUUFBUSxJQUFJLE1BQU1DLFFBQVEsR0FBRyxDQUFyQixDQUYyQixDQUFyQyxDQVRXLEVBYVhJLFFBQVEsQ0FBQ0ksaUJBQVQsQ0FBMkJMLFFBQTNCLEVBQXFDLENBQ25DSixRQUFRLElBQUksTUFBTUMsUUFBUSxHQUFHLENBQXJCLENBRDJCLEVBRW5DRCxRQUFRLElBQUksTUFBTUMsUUFBUSxHQUFHLENBQXJCLENBRjJCLENBQXJDLENBYlcsRUFpQlhJLFFBQVEsQ0FBQ0ksaUJBQVQsQ0FBMkJMLFFBQTNCLEVBQXFDLENBQ25DSixRQUFRLElBQUksTUFBTUMsUUFBUSxHQUFHLENBQXJCLENBRDJCLEVBRW5DRCxRQUFRLElBQUksTUFBTUMsUUFBUSxHQUFHLENBQXJCLENBRjJCLENBQXJDLENBakJXLENBREw7QUF1QlJTLE1BQUFBLElBQUksRUFBRTtBQXZCRSxLQURMO0FBMEJMUixJQUFBQSxVQUFVLEVBQVZBO0FBMUJLLEdBQVA7QUE0QkQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge1dlYk1lcmNhdG9yVmlld3BvcnR9IGZyb20gJ0BkZWNrLmdsL2NvcmUnO1xuaW1wb3J0IHtNYXBTdGF0ZX0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5cbi8qKlxuICogdG9wIGxlZnQgb2YgdGhlIGdyaWQgdG8gYSBzcXVhcmUgcG9seWdvbiBmb3IgdGhlIGhvdmVyIGxheWVyXG4gKiBhbmQgY3VycmVudCBsYXRpdHVkZVxuICogQHBhcmFtIG9iamVjdFxuICogQHBhcmFtIGNlbGxTaXplXG4gKiBAcGFyYW0gY292ZXJhZ2VcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gbWFwU3RhdGVcbiAqIEByZXR1cm5zIC0gZ2VvanNvbiBmZWF0dXJlXG4gKi9cblxuLy8gVE9ETzogVEVTVFxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50VG9Qb2x5Z29uR2VvKHtcbiAgb2JqZWN0LFxuICBjZWxsU2l6ZSxcbiAgY292ZXJhZ2UsXG4gIHByb3BlcnRpZXMsXG4gIG1hcFN0YXRlXG59OiB7XG4gIG9iamVjdDogYW55O1xuICBjZWxsU2l6ZTogbnVtYmVyO1xuICBjb3ZlcmFnZTogbnVtYmVyO1xuICBwcm9wZXJ0aWVzPzogYW55O1xuICBtYXBTdGF0ZTogTWFwU3RhdGU7XG59KSB7XG4gIGNvbnN0IHtwb3NpdGlvbn0gPSBvYmplY3Q7XG4gIGNvbnN0IHZpZXdwb3J0ID0gbmV3IFdlYk1lcmNhdG9yVmlld3BvcnQobWFwU3RhdGUpO1xuXG4gIGlmICghcG9zaXRpb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIGNvb3JkaW5hdGVzOiBbXG4gICAgICAgIHZpZXdwb3J0LmFkZE1ldGVyc1RvTG5nTGF0KHBvc2l0aW9uLCBbXG4gICAgICAgICAgY2VsbFNpemUgKiAoMC41IC0gY292ZXJhZ2UgLyAyKSxcbiAgICAgICAgICBjZWxsU2l6ZSAqICgwLjUgLSBjb3ZlcmFnZSAvIDIpXG4gICAgICAgIF0pLFxuICAgICAgICB2aWV3cG9ydC5hZGRNZXRlcnNUb0xuZ0xhdChwb3NpdGlvbiwgW1xuICAgICAgICAgIGNlbGxTaXplICogKDAuNSArIGNvdmVyYWdlIC8gMiksXG4gICAgICAgICAgY2VsbFNpemUgKiAoMC41IC0gY292ZXJhZ2UgLyAyKVxuICAgICAgICBdKSxcbiAgICAgICAgdmlld3BvcnQuYWRkTWV0ZXJzVG9MbmdMYXQocG9zaXRpb24sIFtcbiAgICAgICAgICBjZWxsU2l6ZSAqICgwLjUgKyBjb3ZlcmFnZSAvIDIpLFxuICAgICAgICAgIGNlbGxTaXplICogKDAuNSArIGNvdmVyYWdlIC8gMilcbiAgICAgICAgXSksXG4gICAgICAgIHZpZXdwb3J0LmFkZE1ldGVyc1RvTG5nTGF0KHBvc2l0aW9uLCBbXG4gICAgICAgICAgY2VsbFNpemUgKiAoMC41IC0gY292ZXJhZ2UgLyAyKSxcbiAgICAgICAgICBjZWxsU2l6ZSAqICgwLjUgKyBjb3ZlcmFnZSAvIDIpXG4gICAgICAgIF0pLFxuICAgICAgICB2aWV3cG9ydC5hZGRNZXRlcnNUb0xuZ0xhdChwb3NpdGlvbiwgW1xuICAgICAgICAgIGNlbGxTaXplICogKDAuNSAtIGNvdmVyYWdlIC8gMiksXG4gICAgICAgICAgY2VsbFNpemUgKiAoMC41IC0gY292ZXJhZ2UgLyAyKVxuICAgICAgICBdKVxuICAgICAgXSxcbiAgICAgIHR5cGU6ICdMaW5lU3RyaW5nJ1xuICAgIH0sXG4gICAgcHJvcGVydGllc1xuICB9O1xufVxuIl19