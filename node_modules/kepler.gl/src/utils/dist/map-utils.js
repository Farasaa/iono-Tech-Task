"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getViewportFromMapState = exports.getMapLayersFromSplitMaps = exports.onViewPortChange = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _viewportMercatorProject = _interopRequireDefault(require("viewport-mercator-project"));

var _constants = require("@kepler.gl/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var onViewPortChange = function onViewPortChange(viewState, onUpdateMap, onViewStateChange) {
  var primary = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var mapIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var _viewState$width = viewState.width,
      width = _viewState$width === void 0 ? 0 : _viewState$width,
      _viewState$height = viewState.height,
      height = _viewState$height === void 0 ? 0 : _viewState$height,
      restViewState = (0, _objectWithoutProperties2["default"])(viewState, ["width", "height"]); // react-map-gl sends 0,0 dimensions during initialization
  // after we have received proper dimensions from observeDimensions

  var next = _objectSpread(_objectSpread({}, width > 0 && height > 0 ? viewState : restViewState), {}, {
    // enabling transition in two maps may lead to endless update loops
    transitionDuration: primary ? _constants.TRANSITION_DURATION : 0
  });

  if (onViewStateChange && typeof onViewStateChange === 'function') {
    onViewStateChange(next);
  }

  onUpdateMap(next, mapIndex);
};

exports.onViewPortChange = onViewPortChange;

var getMapLayersFromSplitMaps = function getMapLayersFromSplitMaps(splitMaps, mapIndex) {
  var _splitMaps;

  return (_splitMaps = splitMaps[mapIndex || 0]) === null || _splitMaps === void 0 ? void 0 : _splitMaps.layers;
};
/**
 * Generates a viewport from a map state.
 * @param {*} mapState
 * @returns A viewport.
 */


exports.getMapLayersFromSplitMaps = getMapLayersFromSplitMaps;

var getViewportFromMapState = function getViewportFromMapState(mapState) {
  return new _viewportMercatorProject["default"](mapState);
};

exports.getViewportFromMapState = getViewportFromMapState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXAtdXRpbHMudHMiXSwibmFtZXMiOlsib25WaWV3UG9ydENoYW5nZSIsInZpZXdTdGF0ZSIsIm9uVXBkYXRlTWFwIiwib25WaWV3U3RhdGVDaGFuZ2UiLCJwcmltYXJ5IiwibWFwSW5kZXgiLCJ3aWR0aCIsImhlaWdodCIsInJlc3RWaWV3U3RhdGUiLCJuZXh0IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiVFJBTlNJVElPTl9EVVJBVElPTiIsImdldE1hcExheWVyc0Zyb21TcGxpdE1hcHMiLCJzcGxpdE1hcHMiLCJsYXllcnMiLCJnZXRWaWV3cG9ydEZyb21NYXBTdGF0ZSIsIm1hcFN0YXRlIiwiV2ViTWVyY2F0b3JWaWV3cG9ydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUdBOztBQUVBOzs7Ozs7QUFHTyxJQUFNQSxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQzlCQyxTQUQ4QixFQUU5QkMsV0FGOEIsRUFHOUJDLGlCQUg4QixFQU1yQjtBQUFBLE1BRlRDLE9BRVMsdUVBRlUsS0FFVjtBQUFBLE1BRFRDLFFBQ1MsdUVBRFUsQ0FDVjtBQUFBLHlCQUN5Q0osU0FEekMsQ0FDRkssS0FERTtBQUFBLE1BQ0ZBLEtBREUsaUNBQ00sQ0FETjtBQUFBLDBCQUN5Q0wsU0FEekMsQ0FDU00sTUFEVDtBQUFBLE1BQ1NBLE1BRFQsa0NBQ2tCLENBRGxCO0FBQUEsTUFDd0JDLGFBRHhCLDZDQUN5Q1AsU0FEekMsd0JBRVQ7QUFDQTs7QUFDQSxNQUFNUSxJQUFJLG1DQUNKSCxLQUFLLEdBQUcsQ0FBUixJQUFhQyxNQUFNLEdBQUcsQ0FBdEIsR0FBMEJOLFNBQTFCLEdBQXNDTyxhQURsQztBQUVSO0FBQ0FFLElBQUFBLGtCQUFrQixFQUFFTixPQUFPLEdBQUdPLDhCQUFILEdBQXlCO0FBSDVDLElBQVY7O0FBS0EsTUFBSVIsaUJBQWlCLElBQUksT0FBT0EsaUJBQVAsS0FBNkIsVUFBdEQsRUFBa0U7QUFDaEVBLElBQUFBLGlCQUFpQixDQUFDTSxJQUFELENBQWpCO0FBQ0Q7O0FBRURQLEVBQUFBLFdBQVcsQ0FBQ08sSUFBRCxFQUFPSixRQUFQLENBQVg7QUFDRCxDQXBCTTs7OztBQXNCQSxJQUFNTyx5QkFBeUIsR0FBRyxTQUE1QkEseUJBQTRCLENBQ3ZDQyxTQUR1QyxFQUV2Q1IsUUFGdUMsRUFHRDtBQUFBOztBQUN0Qyx1QkFBT1EsU0FBUyxDQUFDUixRQUFRLElBQUksQ0FBYixDQUFoQiwrQ0FBTyxXQUEwQlMsTUFBakM7QUFDRCxDQUxNO0FBT1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFDTyxJQUFNQyx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQTBCLENBQUNDLFFBQUQsRUFBa0M7QUFDdkUsU0FBTyxJQUFJQyxtQ0FBSixDQUF3QkQsUUFBeEIsQ0FBUDtBQUNELENBRk0iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgV2ViTWVyY2F0b3JWaWV3cG9ydCBmcm9tICd2aWV3cG9ydC1tZXJjYXRvci1wcm9qZWN0JztcblxuaW1wb3J0IHtUUkFOU0lUSU9OX0RVUkFUSU9OfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge1NwbGl0TWFwTGF5ZXJzLCBTcGxpdE1hcCwgVmlld3BvcnQsIE1hcFN0YXRlfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IG9uVmlld1BvcnRDaGFuZ2UgPSAoXG4gIHZpZXdTdGF0ZTogVmlld3BvcnQsXG4gIG9uVXBkYXRlTWFwOiAobmV4dDogYW55LCBtYXBJbmRleDogbnVtYmVyKSA9PiBhbnksXG4gIG9uVmlld1N0YXRlQ2hhbmdlPzogKG5leHQ6IGFueSkgPT4gdm9pZCB8IG51bGwsXG4gIHByaW1hcnk6IGJvb2xlYW4gPSBmYWxzZSxcbiAgbWFwSW5kZXg6IG51bWJlciA9IDBcbik6IHZvaWQgPT4ge1xuICBjb25zdCB7d2lkdGggPSAwLCBoZWlnaHQgPSAwLCAuLi5yZXN0Vmlld1N0YXRlfSA9IHZpZXdTdGF0ZTtcbiAgLy8gcmVhY3QtbWFwLWdsIHNlbmRzIDAsMCBkaW1lbnNpb25zIGR1cmluZyBpbml0aWFsaXphdGlvblxuICAvLyBhZnRlciB3ZSBoYXZlIHJlY2VpdmVkIHByb3BlciBkaW1lbnNpb25zIGZyb20gb2JzZXJ2ZURpbWVuc2lvbnNcbiAgY29uc3QgbmV4dCA9IHtcbiAgICAuLi4od2lkdGggPiAwICYmIGhlaWdodCA+IDAgPyB2aWV3U3RhdGUgOiByZXN0Vmlld1N0YXRlKSxcbiAgICAvLyBlbmFibGluZyB0cmFuc2l0aW9uIGluIHR3byBtYXBzIG1heSBsZWFkIHRvIGVuZGxlc3MgdXBkYXRlIGxvb3BzXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBwcmltYXJ5ID8gVFJBTlNJVElPTl9EVVJBVElPTiA6IDBcbiAgfTtcbiAgaWYgKG9uVmlld1N0YXRlQ2hhbmdlICYmIHR5cGVvZiBvblZpZXdTdGF0ZUNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9uVmlld1N0YXRlQ2hhbmdlKG5leHQpO1xuICB9XG5cbiAgb25VcGRhdGVNYXAobmV4dCwgbWFwSW5kZXgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldE1hcExheWVyc0Zyb21TcGxpdE1hcHMgPSAoXG4gIHNwbGl0TWFwczogU3BsaXRNYXBbXSxcbiAgbWFwSW5kZXg/OiBudW1iZXJcbik6IFNwbGl0TWFwTGF5ZXJzIHwgdW5kZWZpbmVkIHwgbnVsbCA9PiB7XG4gIHJldHVybiBzcGxpdE1hcHNbbWFwSW5kZXggfHwgMF0/LmxheWVycztcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgdmlld3BvcnQgZnJvbSBhIG1hcCBzdGF0ZS5cbiAqIEBwYXJhbSB7Kn0gbWFwU3RhdGVcbiAqIEByZXR1cm5zIEEgdmlld3BvcnQuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRWaWV3cG9ydEZyb21NYXBTdGF0ZSA9IChtYXBTdGF0ZTogTWFwU3RhdGUpOiBWaWV3cG9ydCA9PiB7XG4gIHJldHVybiBuZXcgV2ViTWVyY2F0b3JWaWV3cG9ydChtYXBTdGF0ZSk7XG59O1xuIl19