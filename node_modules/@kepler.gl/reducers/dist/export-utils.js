"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exportData = exportData;
exports.formatCsv = formatCsv;
exports["default"] = void 0;

var _window = require("global/window");

var _d3Dsv = require("d3-dsv");

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function exportData(state, options) {
  var visState = state.visState,
      appName = state.appName;
  var datasets = visState.datasets;
  var selectedDataset = options.selectedDataset,
      dataType = options.dataType,
      filtered = options.filtered; // get the selected data

  var filename = appName ? appName : _utils.DEFAULT_DATA_NAME;
  var selectedDatasets = datasets[selectedDataset] ? [datasets[selectedDataset]] : Object.values(datasets);

  if (!selectedDatasets.length) {
    // error: selected dataset not found.
    return;
  }

  selectedDatasets.forEach(function (selectedData) {
    var _ref = selectedData,
        dataContainer = _ref.dataContainer,
        fields = _ref.fields,
        label = _ref.label,
        _ref$filteredIdxCPU = _ref.filteredIdxCPU,
        filteredIdxCPU = _ref$filteredIdxCPU === void 0 ? [] : _ref$filteredIdxCPU;
    var toExport = filtered ? (0, _utils.createIndexedDataContainer)(dataContainer, filteredIdxCPU) : dataContainer; // start to export data according to selected data type

    switch (dataType) {
      case _constants.EXPORT_DATA_TYPE.CSV:
        {
          var csv = formatCsv(toExport, fields);
          var fileBlob = new _window.Blob([csv], {
            type: 'text/csv'
          });
          (0, _utils.downloadFile)(fileBlob, "".concat(filename, "_").concat(label, ".csv"));
          break;
        }
      // TODO: support more file types.

      default:
        break;
    }
  });
}
/**
 * On export data to csv
 * @param dataContainer
 * @param fields `dataset.fields`
 * @returns csv string
 */


function formatCsv(data, fields) {
  var columns = fields.map(function (f) {
    return f.displayName || f.name;
  });
  var formattedData = [columns]; // parse geojson object as string

  var _iterator = _createForOfIteratorHelper(data.rows(true)),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var row = _step.value;
      formattedData.push(row.map(function (d, i) {
        return (0, _utils.parseFieldValue)(d, fields[i].type);
      }));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return (0, _d3Dsv.csvFormatRows)(formattedData);
}

var exporters = {
  exportData: exportData
};
var _default = exporters;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leHBvcnQtdXRpbHMudHMiXSwibmFtZXMiOlsiZXhwb3J0RGF0YSIsInN0YXRlIiwib3B0aW9ucyIsInZpc1N0YXRlIiwiYXBwTmFtZSIsImRhdGFzZXRzIiwic2VsZWN0ZWREYXRhc2V0IiwiZGF0YVR5cGUiLCJmaWx0ZXJlZCIsImZpbGVuYW1lIiwiREVGQVVMVF9EQVRBX05BTUUiLCJzZWxlY3RlZERhdGFzZXRzIiwiT2JqZWN0IiwidmFsdWVzIiwibGVuZ3RoIiwiZm9yRWFjaCIsInNlbGVjdGVkRGF0YSIsImRhdGFDb250YWluZXIiLCJmaWVsZHMiLCJsYWJlbCIsImZpbHRlcmVkSWR4Q1BVIiwidG9FeHBvcnQiLCJFWFBPUlRfREFUQV9UWVBFIiwiQ1NWIiwiY3N2IiwiZm9ybWF0Q3N2IiwiZmlsZUJsb2IiLCJCbG9iIiwidHlwZSIsImRhdGEiLCJjb2x1bW5zIiwibWFwIiwiZiIsImRpc3BsYXlOYW1lIiwibmFtZSIsImZvcm1hdHRlZERhdGEiLCJyb3dzIiwicm93IiwicHVzaCIsImQiLCJpIiwiZXhwb3J0ZXJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFFQTs7QUFJQTs7Ozs7Ozs7QUFhTyxTQUFTQSxVQUFULENBQW9CQyxLQUFwQixFQUFzQ0MsT0FBdEMsRUFBK0M7QUFBQSxNQUM3Q0MsUUFENkMsR0FDeEJGLEtBRHdCLENBQzdDRSxRQUQ2QztBQUFBLE1BQ25DQyxPQURtQyxHQUN4QkgsS0FEd0IsQ0FDbkNHLE9BRG1DO0FBQUEsTUFFN0NDLFFBRjZDLEdBRWpDRixRQUZpQyxDQUU3Q0UsUUFGNkM7QUFBQSxNQUc3Q0MsZUFINkMsR0FHTkosT0FITSxDQUc3Q0ksZUFINkM7QUFBQSxNQUc1QkMsUUFINEIsR0FHTkwsT0FITSxDQUc1QkssUUFINEI7QUFBQSxNQUdsQkMsUUFIa0IsR0FHTk4sT0FITSxDQUdsQk0sUUFIa0IsRUFJcEQ7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHTCxPQUFPLEdBQUdBLE9BQUgsR0FBYU0sd0JBQXJDO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUdOLFFBQVEsQ0FBQ0MsZUFBRCxDQUFSLEdBQ3JCLENBQUNELFFBQVEsQ0FBQ0MsZUFBRCxDQUFULENBRHFCLEdBRXJCTSxNQUFNLENBQUNDLE1BQVAsQ0FBY1IsUUFBZCxDQUZKOztBQUdBLE1BQUksQ0FBQ00sZ0JBQWdCLENBQUNHLE1BQXRCLEVBQThCO0FBQzVCO0FBQ0E7QUFDRDs7QUFFREgsRUFBQUEsZ0JBQWdCLENBQUNJLE9BQWpCLENBQXlCLFVBQUFDLFlBQVksRUFBSTtBQUFBLGVBQ3FCQSxZQURyQjtBQUFBLFFBQ2hDQyxhQURnQyxRQUNoQ0EsYUFEZ0M7QUFBQSxRQUNqQkMsTUFEaUIsUUFDakJBLE1BRGlCO0FBQUEsUUFDVEMsS0FEUyxRQUNUQSxLQURTO0FBQUEsbUNBQ0ZDLGNBREU7QUFBQSxRQUNGQSxjQURFLG9DQUNlLEVBRGY7QUFFdkMsUUFBTUMsUUFBUSxHQUFHYixRQUFRLEdBQ3JCLHVDQUEyQlMsYUFBM0IsRUFBMENHLGNBQTFDLENBRHFCLEdBRXJCSCxhQUZKLENBRnVDLENBTXZDOztBQUNBLFlBQVFWLFFBQVI7QUFDRSxXQUFLZSw0QkFBaUJDLEdBQXRCO0FBQTJCO0FBQ3pCLGNBQU1DLEdBQUcsR0FBR0MsU0FBUyxDQUFDSixRQUFELEVBQVdILE1BQVgsQ0FBckI7QUFFQSxjQUFNUSxRQUFRLEdBQUcsSUFBSUMsWUFBSixDQUFTLENBQUNILEdBQUQsQ0FBVCxFQUFnQjtBQUFDSSxZQUFBQSxJQUFJLEVBQUU7QUFBUCxXQUFoQixDQUFqQjtBQUNBLG1DQUFhRixRQUFiLFlBQTBCakIsUUFBMUIsY0FBc0NVLEtBQXRDO0FBQ0E7QUFDRDtBQUNEOztBQUNBO0FBQ0U7QUFWSjtBQVlELEdBbkJEO0FBb0JEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTTSxTQUFULENBQW1CSSxJQUFuQixFQUFpRFgsTUFBakQsRUFBMEU7QUFDL0UsTUFBTVksT0FBTyxHQUFHWixNQUFNLENBQUNhLEdBQVAsQ0FBVyxVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDQyxXQUFGLElBQWlCRCxDQUFDLENBQUNFLElBQXZCO0FBQUEsR0FBWixDQUFoQjtBQUNBLE1BQU1DLGFBQWEsR0FBRyxDQUFDTCxPQUFELENBQXRCLENBRitFLENBSS9FOztBQUorRSw2Q0FLN0RELElBQUksQ0FBQ08sSUFBTCxDQUFVLElBQVYsQ0FMNkQ7QUFBQTs7QUFBQTtBQUsvRSx3REFBbUM7QUFBQSxVQUF4QkMsR0FBd0I7QUFDakNGLE1BQUFBLGFBQWEsQ0FBQ0csSUFBZCxDQUFtQkQsR0FBRyxDQUFDTixHQUFKLENBQVEsVUFBQ1EsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsZUFBVSw0QkFBZ0JELENBQWhCLEVBQW1CckIsTUFBTSxDQUFDc0IsQ0FBRCxDQUFOLENBQVVaLElBQTdCLENBQVY7QUFBQSxPQUFSLENBQW5CO0FBQ0Q7QUFQOEU7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFTL0UsU0FBTywwQkFBY08sYUFBZCxDQUFQO0FBQ0Q7O0FBRUQsSUFBTU0sU0FBUyxHQUFHO0FBQ2hCekMsRUFBQUEsVUFBVSxFQUFWQTtBQURnQixDQUFsQjtlQUlleUMsUyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7QmxvYn0gZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQge2NzdkZvcm1hdFJvd3N9IGZyb20gJ2QzLWRzdic7XG5cbmltcG9ydCB7RVhQT1JUX0RBVEFfVFlQRX0gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtGaWVsZH0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQgS2VwbGVyVGFibGUsIHtEYXRhc2V0c30gZnJvbSAnQGtlcGxlci5nbC90YWJsZSc7XG5cbmltcG9ydCB7XG4gIGNyZWF0ZUluZGV4ZWREYXRhQ29udGFpbmVyLFxuICBEYXRhQ29udGFpbmVySW50ZXJmYWNlLFxuICBwYXJzZUZpZWxkVmFsdWUsXG4gIGRvd25sb2FkRmlsZSxcbiAgREVGQVVMVF9EQVRBX05BTUVcbn0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5cbmludGVyZmFjZSBTdGF0ZVR5cGUge1xuICB2aXNTdGF0ZToge2RhdGFzZXRzOiBEYXRhc2V0c307XG4gIGFwcE5hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBvcnREYXRhKHN0YXRlOiBTdGF0ZVR5cGUsIG9wdGlvbnMpIHtcbiAgY29uc3Qge3Zpc1N0YXRlLCBhcHBOYW1lfSA9IHN0YXRlO1xuICBjb25zdCB7ZGF0YXNldHN9ID0gdmlzU3RhdGU7XG4gIGNvbnN0IHtzZWxlY3RlZERhdGFzZXQsIGRhdGFUeXBlLCBmaWx0ZXJlZH0gPSBvcHRpb25zO1xuICAvLyBnZXQgdGhlIHNlbGVjdGVkIGRhdGFcbiAgY29uc3QgZmlsZW5hbWUgPSBhcHBOYW1lID8gYXBwTmFtZSA6IERFRkFVTFRfREFUQV9OQU1FO1xuICBjb25zdCBzZWxlY3RlZERhdGFzZXRzID0gZGF0YXNldHNbc2VsZWN0ZWREYXRhc2V0XVxuICAgID8gW2RhdGFzZXRzW3NlbGVjdGVkRGF0YXNldF1dXG4gICAgOiBPYmplY3QudmFsdWVzKGRhdGFzZXRzKTtcbiAgaWYgKCFzZWxlY3RlZERhdGFzZXRzLmxlbmd0aCkge1xuICAgIC8vIGVycm9yOiBzZWxlY3RlZCBkYXRhc2V0IG5vdCBmb3VuZC5cbiAgICByZXR1cm47XG4gIH1cblxuICBzZWxlY3RlZERhdGFzZXRzLmZvckVhY2goc2VsZWN0ZWREYXRhID0+IHtcbiAgICBjb25zdCB7ZGF0YUNvbnRhaW5lciwgZmllbGRzLCBsYWJlbCwgZmlsdGVyZWRJZHhDUFUgPSBbXX0gPSBzZWxlY3RlZERhdGEgYXMgS2VwbGVyVGFibGU7XG4gICAgY29uc3QgdG9FeHBvcnQgPSBmaWx0ZXJlZFxuICAgICAgPyBjcmVhdGVJbmRleGVkRGF0YUNvbnRhaW5lcihkYXRhQ29udGFpbmVyLCBmaWx0ZXJlZElkeENQVSlcbiAgICAgIDogZGF0YUNvbnRhaW5lcjtcblxuICAgIC8vIHN0YXJ0IHRvIGV4cG9ydCBkYXRhIGFjY29yZGluZyB0byBzZWxlY3RlZCBkYXRhIHR5cGVcbiAgICBzd2l0Y2ggKGRhdGFUeXBlKSB7XG4gICAgICBjYXNlIEVYUE9SVF9EQVRBX1RZUEUuQ1NWOiB7XG4gICAgICAgIGNvbnN0IGNzdiA9IGZvcm1hdENzdih0b0V4cG9ydCwgZmllbGRzKTtcblxuICAgICAgICBjb25zdCBmaWxlQmxvYiA9IG5ldyBCbG9iKFtjc3ZdLCB7dHlwZTogJ3RleHQvY3N2J30pO1xuICAgICAgICBkb3dubG9hZEZpbGUoZmlsZUJsb2IsIGAke2ZpbGVuYW1lfV8ke2xhYmVsfS5jc3ZgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBUT0RPOiBzdXBwb3J0IG1vcmUgZmlsZSB0eXBlcy5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogT24gZXhwb3J0IGRhdGEgdG8gY3N2XG4gKiBAcGFyYW0gZGF0YUNvbnRhaW5lclxuICogQHBhcmFtIGZpZWxkcyBgZGF0YXNldC5maWVsZHNgXG4gKiBAcmV0dXJucyBjc3Ygc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRDc3YoZGF0YTogRGF0YUNvbnRhaW5lckludGVyZmFjZSwgZmllbGRzOiBGaWVsZFtdKTogc3RyaW5nIHtcbiAgY29uc3QgY29sdW1ucyA9IGZpZWxkcy5tYXAoZiA9PiBmLmRpc3BsYXlOYW1lIHx8IGYubmFtZSk7XG4gIGNvbnN0IGZvcm1hdHRlZERhdGEgPSBbY29sdW1uc107XG5cbiAgLy8gcGFyc2UgZ2VvanNvbiBvYmplY3QgYXMgc3RyaW5nXG4gIGZvciAoY29uc3Qgcm93IG9mIGRhdGEucm93cyh0cnVlKSkge1xuICAgIGZvcm1hdHRlZERhdGEucHVzaChyb3cubWFwKChkLCBpKSA9PiBwYXJzZUZpZWxkVmFsdWUoZCwgZmllbGRzW2ldLnR5cGUpKSk7XG4gIH1cblxuICByZXR1cm4gY3N2Rm9ybWF0Um93cyhmb3JtYXR0ZWREYXRhKTtcbn1cblxuY29uc3QgZXhwb3J0ZXJzID0ge1xuICBleHBvcnREYXRhXG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRlcnM7XG4iXX0=