"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _panelTab = _interopRequireDefault(require("./panel-tab"));

var _templateObject;

var PanelHeaderBottom = _styledComponents["default"].div.attrs({
  className: 'side-side-panel__header__bottom'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  border-bottom: 1px solid ", ";\n  padding: 0 16px;\n  display: flex;\n  min-height: 30px;\n"])), function (props) {
  return props.theme.sidePanelHeaderBg;
}, function (props) {
  return props.theme.sidePanelHeaderBorder;
});

PanelToggleFactory.deps = [_panelTab["default"]];

function PanelToggleFactory(PanelTab) {
  var PanelToggle = function PanelToggle(_ref) {
    var activePanel = _ref.activePanel,
        panels = _ref.panels,
        togglePanel = _ref.togglePanel;

    var _onClick = (0, _react.useCallback)(function (panel) {
      var callback = panel.onClick || togglePanel;
      callback(panel.id);
    }, [togglePanel]);

    return /*#__PURE__*/_react["default"].createElement(PanelHeaderBottom, null, panels.map(function (panel) {
      return /*#__PURE__*/_react["default"].createElement(PanelTab, {
        key: panel.id,
        panel: panel,
        isActive: activePanel === panel.id,
        onClick: function onClick() {
          return _onClick(panel);
        }
      });
    }));
  };

  return PanelToggle;
}

var _default = PanelToggleFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaWRlLXBhbmVsL3BhbmVsLXRvZ2dsZS50c3giXSwibmFtZXMiOlsiUGFuZWxIZWFkZXJCb3R0b20iLCJzdHlsZWQiLCJkaXYiLCJhdHRycyIsImNsYXNzTmFtZSIsInByb3BzIiwidGhlbWUiLCJzaWRlUGFuZWxIZWFkZXJCZyIsInNpZGVQYW5lbEhlYWRlckJvcmRlciIsIlBhbmVsVG9nZ2xlRmFjdG9yeSIsImRlcHMiLCJQYW5lbFRhYkZhY3RvcnkiLCJQYW5lbFRhYiIsIlBhbmVsVG9nZ2xlIiwiYWN0aXZlUGFuZWwiLCJwYW5lbHMiLCJ0b2dnbGVQYW5lbCIsIm9uQ2xpY2siLCJwYW5lbCIsImNhbGxiYWNrIiwiaWQiLCJtYXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7OztBQVNBLElBQU1BLGlCQUFpQixHQUFHQyw2QkFBT0MsR0FBUCxDQUFXQyxLQUFYLENBQWlCO0FBQ3pDQyxFQUFBQSxTQUFTLEVBQUU7QUFEOEIsQ0FBakIsQ0FBSCxpTkFHRCxVQUFBQyxLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDQyxLQUFOLENBQVlDLGlCQUFoQjtBQUFBLENBSEosRUFJTSxVQUFBRixLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDQyxLQUFOLENBQVlFLHFCQUFoQjtBQUFBLENBSlgsQ0FBdkI7O0FBVUFDLGtCQUFrQixDQUFDQyxJQUFuQixHQUEwQixDQUFDQyxvQkFBRCxDQUExQjs7QUFFQSxTQUFTRixrQkFBVCxDQUE0QkcsUUFBNUIsRUFBMEU7QUFDeEUsTUFBTUMsV0FBdUMsR0FBRyxTQUExQ0EsV0FBMEMsT0FBd0M7QUFBQSxRQUF0Q0MsV0FBc0MsUUFBdENBLFdBQXNDO0FBQUEsUUFBekJDLE1BQXlCLFFBQXpCQSxNQUF5QjtBQUFBLFFBQWpCQyxXQUFpQixRQUFqQkEsV0FBaUI7O0FBQ3RGLFFBQU1DLFFBQU8sR0FBRyx3QkFDZCxVQUFBQyxLQUFLLEVBQUk7QUFDUCxVQUFNQyxRQUFRLEdBQUdELEtBQUssQ0FBQ0QsT0FBTixJQUFpQkQsV0FBbEM7QUFDQUcsTUFBQUEsUUFBUSxDQUFDRCxLQUFLLENBQUNFLEVBQVAsQ0FBUjtBQUNELEtBSmEsRUFLZCxDQUFDSixXQUFELENBTGMsQ0FBaEI7O0FBUUEsd0JBQ0UsZ0NBQUMsaUJBQUQsUUFDR0QsTUFBTSxDQUFDTSxHQUFQLENBQVcsVUFBQUgsS0FBSztBQUFBLDBCQUNmLGdDQUFDLFFBQUQ7QUFDRSxRQUFBLEdBQUcsRUFBRUEsS0FBSyxDQUFDRSxFQURiO0FBRUUsUUFBQSxLQUFLLEVBQUVGLEtBRlQ7QUFHRSxRQUFBLFFBQVEsRUFBRUosV0FBVyxLQUFLSSxLQUFLLENBQUNFLEVBSGxDO0FBSUUsUUFBQSxPQUFPLEVBQUU7QUFBQSxpQkFBTUgsUUFBTyxDQUFDQyxLQUFELENBQWI7QUFBQTtBQUpYLFFBRGU7QUFBQSxLQUFoQixDQURILENBREY7QUFZRCxHQXJCRDs7QUF1QkEsU0FBT0wsV0FBUDtBQUNEOztlQUVjSixrQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBQYW5lbFRhYkZhY3RvcnksIHtQYW5lbEl0ZW19IGZyb20gJy4vcGFuZWwtdGFiJztcbmltcG9ydCB7dG9nZ2xlU2lkZVBhbmVsLCBBY3Rpb25IYW5kbGVyfSBmcm9tICdAa2VwbGVyLmdsL2FjdGlvbnMnO1xuXG50eXBlIFBhbmVsVG9nZ2xlUHJvcHMgPSB7XG4gIHBhbmVsczogUGFuZWxJdGVtW107XG4gIGFjdGl2ZVBhbmVsOiBzdHJpbmcgfCBudWxsO1xuICB0b2dnbGVQYW5lbDogQWN0aW9uSGFuZGxlcjx0eXBlb2YgdG9nZ2xlU2lkZVBhbmVsPjtcbn07XG5cbmNvbnN0IFBhbmVsSGVhZGVyQm90dG9tID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ3NpZGUtc2lkZS1wYW5lbF9faGVhZGVyX19ib3R0b20nXG59KWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5zaWRlUGFuZWxIZWFkZXJCZ307XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAke3Byb3BzID0+IHByb3BzLnRoZW1lLnNpZGVQYW5lbEhlYWRlckJvcmRlcn07XG4gIHBhZGRpbmc6IDAgMTZweDtcbiAgZGlzcGxheTogZmxleDtcbiAgbWluLWhlaWdodDogMzBweDtcbmA7XG5cblBhbmVsVG9nZ2xlRmFjdG9yeS5kZXBzID0gW1BhbmVsVGFiRmFjdG9yeV07XG5cbmZ1bmN0aW9uIFBhbmVsVG9nZ2xlRmFjdG9yeShQYW5lbFRhYjogUmV0dXJuVHlwZTx0eXBlb2YgUGFuZWxUYWJGYWN0b3J5Pikge1xuICBjb25zdCBQYW5lbFRvZ2dsZTogUmVhY3QuRkM8UGFuZWxUb2dnbGVQcm9wcz4gPSAoe2FjdGl2ZVBhbmVsLCBwYW5lbHMsIHRvZ2dsZVBhbmVsfSkgPT4ge1xuICAgIGNvbnN0IG9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgIHBhbmVsID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBwYW5lbC5vbkNsaWNrIHx8IHRvZ2dsZVBhbmVsO1xuICAgICAgICBjYWxsYmFjayhwYW5lbC5pZCk7XG4gICAgICB9LFxuICAgICAgW3RvZ2dsZVBhbmVsXVxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBhbmVsSGVhZGVyQm90dG9tPlxuICAgICAgICB7cGFuZWxzLm1hcChwYW5lbCA9PiAoXG4gICAgICAgICAgPFBhbmVsVGFiXG4gICAgICAgICAgICBrZXk9e3BhbmVsLmlkfVxuICAgICAgICAgICAgcGFuZWw9e3BhbmVsfVxuICAgICAgICAgICAgaXNBY3RpdmU9e2FjdGl2ZVBhbmVsID09PSBwYW5lbC5pZH1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2xpY2socGFuZWwpfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC9QYW5lbEhlYWRlckJvdHRvbT5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBQYW5lbFRvZ2dsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFuZWxUb2dnbGVGYWN0b3J5O1xuIl19