"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.getDefaultValueForParameter = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("@deck.gl/core");

var _shadertools = require("@luma.gl/shadertools");

var _constants = require("@kepler.gl/constants");

var _effect = _interopRequireDefault(require("./effect"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var POSTPROCESSING_EFFECTS_DESCS = [_objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.ink), {}, {
  "class": _shadertools.ink
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.brightnessContrast), {}, {
  "class": _shadertools.brightnessContrast
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.hueSaturation), {}, {
  "class": _shadertools.hueSaturation
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.vibrance), {}, {
  "class": _shadertools.vibrance
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.sepia), {}, {
  "class": _shadertools.sepia
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.dotScreen), {}, {
  "class": _shadertools.dotScreen
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.colorHalftone), {}, {
  "class": _shadertools.colorHalftone
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.noise), {}, {
  "class": _shadertools.noise
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.triangleBlur), {}, {
  "class": _shadertools.triangleBlur
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.zoomBlur), {}, {
  "class": _shadertools.zoomBlur
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.tiltShift), {}, {
  "class": _shadertools.tiltShift
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.edgeWork), {}, {
  "class": _shadertools.edgeWork
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.vignette), {}, {
  "class": _shadertools.vignette
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.magnify), {}, {
  "class": _shadertools.magnify
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.hexagonalPixelate), {}, {
  "class": _shadertools.hexagonalPixelate
})];
/**
 * Returns default parameter value based on effect description.
 * @param name Name of the parameter.
 * @param effectDescription Effect's description.
 * @param uniformsDesc Effect's uniforms.
 * @returns
 */

var getDefaultValueForParameter = function getDefaultValueForParameter(name, effectDescription, uniformsDesc) {
  var _ref, _ref2, _description$defaultV;

  var description = effectDescription.find(function (param) {
    return param.name === name;
  });
  var uniform = uniformsDesc[name];
  return (_ref = (_ref2 = (_description$defaultV = description === null || description === void 0 ? void 0 : description.defaultValue) !== null && _description$defaultV !== void 0 ? _description$defaultV : uniform === null || uniform === void 0 ? void 0 : uniform.value) !== null && _ref2 !== void 0 ? _ref2 : uniform) !== null && _ref !== void 0 ? _ref : description === null || description === void 0 ? void 0 : description.min;
};

exports.getDefaultValueForParameter = getDefaultValueForParameter;

var PostProcessingEffect = /*#__PURE__*/function (_Effect) {
  (0, _inherits2["default"])(PostProcessingEffect, _Effect);

  var _super = _createSuper(PostProcessingEffect);

  // deckEffect: PostProcessEffect | LightingEffect | null;
  function PostProcessingEffect(props) {
    (0, _classCallCheck2["default"])(this, PostProcessingEffect);
    return _super.call(this, props);
  }

  (0, _createClass2["default"])(PostProcessingEffect, [{
    key: "_initializeEffect",
    value: function _initializeEffect() {
      var _this = this;

      var effectDesc = POSTPROCESSING_EFFECTS_DESCS.find(function (desc) {
        return desc.type === _this.type;
      });

      if (effectDesc) {
        var _this$deckEffect, _this$deckEffect$modu;

        this.deckEffect = new _core.PostProcessEffect(effectDesc["class"], this.parameters);
        var uniforms = (_this$deckEffect = this.deckEffect) === null || _this$deckEffect === void 0 ? void 0 : (_this$deckEffect$modu = _this$deckEffect.module) === null || _this$deckEffect$modu === void 0 ? void 0 : _this$deckEffect$modu.uniforms;

        if (uniforms) {
          var _this$deckEffect2;

          // get default parameters
          var keys = Object.keys(uniforms);
          var defaultParameters = {};
          keys.forEach(function (key) {
            defaultParameters[key] = getDefaultValueForParameter(key, _this._uiConfig, uniforms);
          });
          this.parameters = _objectSpread(_objectSpread({}, defaultParameters), this.parameters);
          (_this$deckEffect2 = this.deckEffect) === null || _this$deckEffect2 === void 0 ? void 0 : _this$deckEffect2.setProps(this.parameters);
        }
      }
    }
  }, {
    key: "getDefaultProps",
    value: function getDefaultProps() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return (0, _get2["default"])((0, _getPrototypeOf2["default"])(PostProcessingEffect.prototype), "getDefaultProps", this).call(this, _objectSpread({
        type: _constants.DEFAULT_POST_PROCESSING_EFFECT_TYPE
      }, props));
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      (0, _get2["default"])((0, _getPrototypeOf2["default"])(PostProcessingEffect.prototype), "setProps", this).call(this, props); // any uniform updated?

      if (props.parameters) {
        var _this$deckEffect3;

        (_this$deckEffect3 = this.deckEffect) === null || _this$deckEffect3 === void 0 ? void 0 : _this$deckEffect3.setProps(this.parameters);
      }
    }
  }]);
  return PostProcessingEffect;
}(_effect["default"]);

var _default = PostProcessingEffect;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,