"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _frameEncoder = _interopRequireDefault(require("../frame-encoder"));

var _tarBuilder = _interopRequireDefault(require("../tar/tar-builder"));

var _utils = require("../utils");

var _core = require("@loaders.gl/core");

var _zip = require("@loaders.gl/zip");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var TAR = 'tar';
var ZIP = 'zip';

var PNGSequenceEncoder = function (_FrameEncoder) {
  (0, _inherits2.default)(PNGSequenceEncoder, _FrameEncoder);

  var _super = _createSuper(PNGSequenceEncoder);

  function PNGSequenceEncoder(settings) {
    var _this;

    (0, _classCallCheck2.default)(this, PNGSequenceEncoder);
    _this = _super.call(this, settings);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "tarBuilder", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "filemap", void 0);
    _this.tarBuilder = null;
    _this.filemap = {};
    _this.options = {};

    if (settings.png) {
      _this.options = _objectSpread({}, settings.png);
    }

    _this.options.archive = _this.options.archive || TAR;

    switch (_this.options.archive) {
      case TAR:
        {
          _this.mimeType = _tarBuilder.default.properties.mimeType;
          _this.extension = ".".concat(_tarBuilder.default.properties.extensions[0]);
          break;
        }

      case ZIP:
        {
          _this.mimeType = _zip.ZipWriter.mimeTypes[0];
          _this.extension = ".".concat(_zip.ZipWriter.extensions[0]);
          break;
        }

      default:
        {
          throw new Error("Unsupported archive type [zip, tar]: ".concat(_this.options.archive));
        }
    }

    return _this;
  }

  (0, _createClass2.default)(PNGSequenceEncoder, [{
    key: "start",
    value: function start() {
      this.tarBuilder = new _tarBuilder.default({});
      this.filemap = {};
    }
  }, {
    key: "add",
    value: function () {
      var _add = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(canvas) {
        var mimeType, extension, buffer, filename, _filename;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                mimeType = 'image/png';
                extension = '.png';
                _context.next = 4;
                return (0, _utils.canvasToArrayBuffer)(canvas, mimeType);

              case 4:
                buffer = _context.sent;
                _context.t0 = this.options.archive;
                _context.next = _context.t0 === TAR ? 8 : _context.t0 === ZIP ? 11 : 14;
                break;

              case 8:
                filename = (0, _utils.pad)(this.tarBuilder.count) + extension;
                this.tarBuilder.addFile(buffer, filename);
                return _context.abrupt("break", 15);

              case 11:
                _filename = (0, _utils.pad)(Object.keys(this.filemap).length) + extension;
                this.filemap[_filename] = buffer;
                return _context.abrupt("break", 15);

              case 14:
                throw new Error("Unsupported archive type [zip, tar]: ".concat(this.options.archive));

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function add(_x) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
        var arrayBuffer, _arrayBuffer;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = this.options.archive;
                _context2.next = _context2.t0 === TAR ? 3 : _context2.t0 === ZIP ? 7 : 11;
                break;

              case 3:
                _context2.next = 5;
                return this.tarBuilder.build();

              case 5:
                arrayBuffer = _context2.sent;
                return _context2.abrupt("return", new Blob([arrayBuffer], {
                  type: _tarBuilder.default.properties.mimeType
                }));

              case 7:
                _context2.next = 9;
                return (0, _core.encode)(this.filemap, _zip.ZipWriter);

              case 9:
                _arrayBuffer = _context2.sent;
                return _context2.abrupt("return", new Blob([_arrayBuffer], {
                  type: _zip.ZipWriter.mimeTypes[0]
                }));

              case 11:
                throw new Error("Unsupported archive type [zip, tar]: ".concat(this.options.archive));

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function save() {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }]);
  return PNGSequenceEncoder;
}(_frameEncoder.default);

var _default = PNGSequenceEncoder;
exports.default = _default;
//# sourceMappingURL=png-sequence-encoder.js.map