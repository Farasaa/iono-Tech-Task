import React, { useState } from 'react';
import { WebMEncoder, JPEGSequenceEncoder, PNGSequenceEncoder, PreviewEncoder, GifEncoder } from '@hubble.gl/core';
import EncoderDropdown from './encoder-dropdown';
export default function BasicControls({
  adapter,
  busy,
  setBusy,
  encoderSettings,
  updateCamera = undefined
}) {
  const [encoder, setEncoder] = useState('gif');

  const onRender = () => {
    if (encoder === 'preview') {
      adapter.render(PreviewEncoder, encoderSettings, () => setBusy(false), updateCamera);
    } else if (encoder === 'webm') {
      adapter.render(WebMEncoder, encoderSettings, () => setBusy(false), updateCamera);
    } else if (encoder === 'jpeg') {
      adapter.render(JPEGSequenceEncoder, encoderSettings, () => setBusy(false), updateCamera);
    } else if (encoder === 'png') {
      adapter.render(PNGSequenceEncoder, encoderSettings, () => setBusy(false), updateCamera);
    } else if (encoder === 'gif') {
      adapter.render(GifEncoder, encoderSettings, () => setBusy(false), updateCamera);
    }

    setBusy(true);
  };

  const onStop = () => {
    adapter.stop(() => setBusy(false));
  };

  return React.createElement("div", null, React.createElement(EncoderDropdown, {
    disabled: busy,
    encoder: encoder,
    setEncoder: setEncoder
  }), React.createElement("button", {
    disabled: busy,
    onClick: onRender
  }, "Render"), React.createElement("button", {
    onClick: onStop
  }, "Stop"));
}
//# sourceMappingURL=basic-controls.js.map