"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findFieldsToShow = findFieldsToShow;
exports.getTooltipDisplayDeltaValue = getTooltipDisplayDeltaValue;
exports.getTooltipDisplayValue = getTooltipDisplayValue;
exports.BRUSH_CONFIG = exports.NEGATIVE_SIGNS = exports.TOOLTIP_MINUS_SIGN = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * Minus sign used in tooltip formatting.
 * \u2212 or \u002D is the minus sign that d3-format uses for decimal number formatting
 * d3-format 2.0 uses \u002D
 */
var TOOLTIP_MINUS_SIGN = "\u2212"; // both are posible negative signs

exports.TOOLTIP_MINUS_SIGN = TOOLTIP_MINUS_SIGN;
var NEGATIVE_SIGNS = ["-", "\u2212"];
exports.NEGATIVE_SIGNS = NEGATIVE_SIGNS;
var BRUSH_CONFIG = {
  range: [0, 50]
};
exports.BRUSH_CONFIG = BRUSH_CONFIG;

function findFieldsToShow(_ref) {
  var fields = _ref.fields,
      id = _ref.id,
      maxDefaultTooltips = _ref.maxDefaultTooltips;

  // first find default tooltip fields for trips
  var fieldsToShow = _constants.DEFAULT_TOOLTIP_FIELDS.reduce(function (prev, curr) {
    if (fields.find(function (_ref2) {
      var name = _ref2.name;
      return curr.name === name;
    })) {
      // @ts-ignore
      prev.push(curr);
    }

    return prev;
  }, []);

  return (0, _defineProperty2["default"])({}, id, fieldsToShow.length ? fieldsToShow : autoFindTooltipFields(fields, maxDefaultTooltips));
}

function autoFindTooltipFields(fields, maxDefaultTooltips) {
  var ptFields = _mergeFieldPairs(_constants.TRIP_POINT_FIELDS); // filter out the default fields that contains lat and lng and any geometry


  var fieldsToShow = fields.filter(function (_ref4) {
    var name = _ref4.name,
        type = _ref4.type;
    return name.replace(/[_,.]+/g, ' ').trim().split(' ').every(function (seg) {
      return !ptFields.includes(seg);
    }) && type !== _constants.ALL_FIELD_TYPES.geojson && type !== _constants.ALL_FIELD_TYPES.geoarrow && type !== 'object';
  });
  return fieldsToShow.slice(0, maxDefaultTooltips).map(function (_ref5) {
    var name = _ref5.name;
    return {
      name: name,
      format: null
    };
  });
}

function _mergeFieldPairs(pairs) {
  return pairs.reduce(function (prev, pair) {
    return [].concat((0, _toConsumableArray2["default"])(prev), (0, _toConsumableArray2["default"])(pair));
  }, []);
}

function getTooltipDisplayDeltaValue(_ref6) {
  var primaryData = _ref6.primaryData,
      field = _ref6.field,
      compareType = _ref6.compareType,
      data = _ref6.data,
      fieldIdx = _ref6.fieldIdx;
  var displayDeltaValue = null;

  if (primaryData && ( // comparison mode only works for numeric field
  field.type === _constants.ALL_FIELD_TYPES.integer || field.type === _constants.ALL_FIELD_TYPES.real)) {
    var baseDp = primaryData.valueAt(fieldIdx);
    var dp = data.valueAt(fieldIdx);

    if ((0, _utils.isNumber)(baseDp) && (0, _utils.isNumber)(dp)) {
      var deltaValue = compareType === _constants.COMPARE_TYPES.RELATIVE ? dp / baseDp - 1 : dp - baseDp;
      var deltaFormat = compareType === _constants.COMPARE_TYPES.RELATIVE ? _constants.TOOLTIP_FORMATS.DECIMAL_PERCENT_FULL_2[_constants.TOOLTIP_KEY] : field.displayFormat || _constants.TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_3[_constants.TOOLTIP_KEY];
      displayDeltaValue = (0, _utils.getFormatter)(deltaFormat, field)(deltaValue); // safely cast string

      displayDeltaValue = (0, _utils.defaultFormatter)(displayDeltaValue);
      var deltaFirstChar = displayDeltaValue.charAt(0);

      if (deltaFirstChar !== '+' && !NEGATIVE_SIGNS.includes(deltaFirstChar)) {
        displayDeltaValue = "+".concat(displayDeltaValue);
      }
    } else {
      displayDeltaValue = TOOLTIP_MINUS_SIGN;
    }
  }

  return displayDeltaValue;
}

function getTooltipDisplayValue(_ref7) {
  var item = _ref7.item,
      field = _ref7.field,
      value = _ref7.value;

  if (!(0, _utils.notNullorUndefined)(value)) {
    return '';
  }

  return item !== null && item !== void 0 && item.format ? (0, _utils.getFormatter)(item === null || item === void 0 ? void 0 : item.format, field)(value) : field.displayFormat ? (0, _utils.getFormatter)(field.displayFormat, field)(value) : (0, _utils.parseFieldValue)(value, field.type);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,