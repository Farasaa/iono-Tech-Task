import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState } from 'react';
import { WebMEncoder, JPEGSequenceEncoder, PNGSequenceEncoder, PreviewEncoder, GifEncoder } from '@hubble.gl/core';
import EncoderDropdown from './encoder-dropdown';
export default function BasicControls(_ref) {
  var adapter = _ref.adapter,
      busy = _ref.busy,
      setBusy = _ref.setBusy,
      encoderSettings = _ref.encoderSettings,
      _ref$updateCamera = _ref.updateCamera,
      updateCamera = _ref$updateCamera === void 0 ? undefined : _ref$updateCamera;

  var _useState = useState('gif'),
      _useState2 = _slicedToArray(_useState, 2),
      encoder = _useState2[0],
      setEncoder = _useState2[1];

  var onRender = function onRender() {
    if (encoder === 'preview') {
      adapter.render(PreviewEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    } else if (encoder === 'webm') {
      adapter.render(WebMEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    } else if (encoder === 'jpeg') {
      adapter.render(JPEGSequenceEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    } else if (encoder === 'png') {
      adapter.render(PNGSequenceEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    } else if (encoder === 'gif') {
      adapter.render(GifEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    }

    setBusy(true);
  };

  var onStop = function onStop() {
    adapter.stop(function () {
      return setBusy(false);
    });
  };

  return React.createElement("div", null, React.createElement(EncoderDropdown, {
    disabled: busy,
    encoder: encoder,
    setEncoder: setEncoder
  }), React.createElement("button", {
    disabled: busy,
    onClick: onRender
  }, "Render"), React.createElement("button", {
    onClick: onStop
  }, "Stop"));
}
//# sourceMappingURL=basic-controls.js.map