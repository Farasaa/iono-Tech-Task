{"version":3,"file":"convert-table.js","names":["getTableCell","getTableLength","getTableRowAsArray","getTableRowAsObject","deduceTableSchema","makeColumnFromField","convertTable","table","shape","makeObjectRowTable","makeArrayRowTable","makeColumnarTable","makeArrowTable","Error","_globalThis$__loaders","_makeArrowTable","globalThis","__loaders","_table$schema","schema","fields","length","columns","field","column","name","rowIndex","data","Array"],"sources":["../../../../src/lib/table/simple-table/convert-table.ts"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  getTableCell,\n  getTableLength,\n  getTableRowAsArray,\n  getTableRowAsObject\n} from './table-accessors';\nimport {\n  Table,\n  ArrayRowTable,\n  ObjectRowTable,\n  ColumnarTable,\n  ArrowTable\n} from '../../../types/category-table';\nimport {deduceTableSchema} from './table-schema';\nimport {makeColumnFromField} from './table-column';\n\nexport function convertTable(table: Table, shape: 'object-row-table'): ObjectRowTable;\nexport function convertTable(table: Table, shape: 'array-row-table'): ArrayRowTable;\nexport function convertTable(table: Table, shape: 'columnar-table'): ColumnarTable;\nexport function convertTable(table: Table, shape: 'arrow-table'): ArrowTable;\n\n/**\n * Convert a table to a different shape\n * @param table\n * @param shape\n * @returns\n */\nexport function convertTable(\n  table: Table,\n  shape: 'object-row-table' | 'array-row-table' | 'columnar-table' | 'arrow-table'\n) {\n  switch (shape) {\n    case 'object-row-table':\n      return makeObjectRowTable(table);\n    case 'array-row-table':\n      return makeArrayRowTable(table);\n    case 'columnar-table':\n      return makeColumnarTable(table);\n    case 'arrow-table':\n      return makeArrowTable(table);\n    default:\n      throw new Error(shape);\n  }\n}\n\n/**\n * Convert a table to apache arrow format\n * @note this depends on the `@loaders.gl/arrow module being imported\n */\nexport function makeArrowTable(table: Table): Table {\n  const _makeArrowTable = globalThis.__loaders?._makeArrowTable;\n  if (!_makeArrowTable) {\n    throw new Error('');\n  }\n  return _makeArrowTable(table);\n}\n\n/** Convert any simple table into columnar format */\nexport function makeColumnarTable(table: Table): ColumnarTable {\n  // TODO - should schema really be optional?\n  const schema = table.schema || deduceTableSchema(table);\n  const fields = table.schema?.fields || [];\n\n  if (table.shape === 'columnar-table') {\n    return {...table, schema};\n  }\n\n  const length = getTableLength(table);\n\n  const columns: {[column: string]: ArrayLike<unknown>} = {};\n  for (const field of fields) {\n    const column = makeColumnFromField(field, length);\n    columns[field.name] = column;\n    for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n      column[rowIndex] = getTableCell(table, rowIndex, field.name);\n    }\n  }\n\n  return {\n    shape: 'columnar-table',\n    schema,\n    data: columns\n  };\n}\n\n/** Convert any table into array row format */\nexport function makeArrayRowTable(table: Table): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format */\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/**\n/**\n *\n * @note - should be part of schema module\nexport function convertColumnarToRowFormatTable(columnarTable: ColumnarTable): ObjectRowTable {\n  const tableKeys = ;\n  const tableRowsCount = columnarTable[tableKeys[0]].length;\n\n  const objectRows: ObjectRowTable['data'] = [];\n\n  for (let index = 0; index < tableRowsCount; index++) {\n    const objectRow = {};\n    for (const fieldName of Object.keys(columnarTable.data)) {\n      objectRow[fieldName] = columnarTable[fieldName][index];\n    }\n    objectRows.push(objectRow);\n  }\n\n  return {\n    shape: 'object-row-table',\n    data: objectRows\n  };\n}\n */\n"],"mappings":"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"}