import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import FrameEncoder from '../frame-encoder';

var StreamEncoder = function (_FrameEncoder) {
  _inherits(StreamEncoder, _FrameEncoder);

  var _super = _createSuper(StreamEncoder);

  function StreamEncoder(settings) {
    var _this;

    _classCallCheck(this, StreamEncoder);

    _this = _super.call(this, settings);

    _defineProperty(_assertThisInitialized(_this), "stream", void 0);

    _defineProperty(_assertThisInitialized(_this), "mediaRecorder", void 0);

    _defineProperty(_assertThisInitialized(_this), "chunks", void 0);

    _this.mimeType = 'video/webm';
    _this.extension = '.webm';
    _this.stream = null;
    _this.mediaRecorder = null;
    _this.chunks = [];
    _this.start = _this.start.bind(_assertThisInitialized(_this));
    _this.add = _this.add.bind(_assertThisInitialized(_this));
    _this.save = _this.save.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(StreamEncoder, [{
    key: "start",
    value: function start() {
      this.stream = null;
      this.mediaRecorder = null;
      this.chunks = [];
    }
  }, {
    key: "add",
    value: function () {
      var _add = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(canvas) {
        var _this2 = this;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.stream) {
                  this.stream = canvas.captureStream(this.framerate);
                  this.mediaRecorder = new MediaRecorder(this.stream);
                  this.mediaRecorder.start();

                  this.mediaRecorder.ondataavailable = function (e) {
                    _this2.chunks.push(e.data);
                  };
                }

                return _context.abrupt("return", Promise.resolve());

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function add(_x) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {
        var _this3 = this;

        var waiting;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                waiting = new Promise(function (resolve) {
                  _this3.mediaRecorder.onstop = function () {
                    var blob = new Blob(_this3.chunks, {
                      type: 'video/webm'
                    });
                    _this3.chunks = [];
                    resolve(blob);
                  };

                  _this3.mediaRecorder.stop();
                });
                return _context2.abrupt("return", waiting);

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function save() {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }]);

  return StreamEncoder;
}(FrameEncoder);

export default StreamEncoder;
//# sourceMappingURL=stream-encoder.js.map