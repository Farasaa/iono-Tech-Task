"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _video = require("@loaders.gl/video");

var _frameEncoder = _interopRequireDefault(require("../frame-encoder"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var GifEncoder = function (_FrameEncoder) {
  (0, _inherits2.default)(GifEncoder, _FrameEncoder);

  var _super = _createSuper(GifEncoder);

  function GifEncoder(settings) {
    var _this;

    (0, _classCallCheck2.default)(this, GifEncoder);
    _this = _super.call(this, settings);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "options", void 0);
    _this.mimeType = 'image/gif';
    _this.extension = '.gif';
    _this.gifBuilder = null;
    _this.options = {};

    if (settings.gif) {
      _this.options = _objectSpread({}, settings.gif);
    }

    _this.options.width = _this.options.width || 720;
    _this.options.height = _this.options.height || 480;
    _this.options.numWorkers = _this.options.numWorkers || 4;
    _this.options.sampleInterval = _this.options.sampleInterval || 10;
    _this.options.jpegQuality = _this.options.jpegQuality || 1.0;
    _this.source = 'images';
    _this.start = _this.start.bind((0, _assertThisInitialized2.default)(_this));
    _this.add = _this.add.bind((0, _assertThisInitialized2.default)(_this));
    _this.save = _this.save.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(GifEncoder, [{
    key: "start",
    value: function start() {
      this.gifBuilder = new _video.GIFBuilder(_objectSpread(_objectSpread({
        source: this.source
      }, this.options), {}, {
        interval: 1 / this.framerate
      }));
    }
  }, {
    key: "add",
    value: function () {
      var _add = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(canvas) {
        var dataUrl;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.source === 'images')) {
                  _context.next = 4;
                  break;
                }

                dataUrl = canvas.toDataURL('image/jpeg', this.options.jpegQuality);
                _context.next = 4;
                return this.gifBuilder.add(dataUrl);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function add(_x) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = fetch;
                _context2.next = 3;
                return this.gifBuilder.build();

              case 3:
                _context2.t1 = _context2.sent;
                return _context2.abrupt("return", (0, _context2.t0)(_context2.t1).then(function (res) {
                  return res.blob();
                }));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function save() {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }]);
  return GifEncoder;
}(_frameEncoder.default);

exports.default = GifEncoder;
//# sourceMappingURL=gif-encoder.js.map