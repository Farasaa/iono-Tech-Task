"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledToggleOption = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _orderByList = _interopRequireDefault(require("../common/icons/order-by-list"));

var _orderByDataset = _interopRequireDefault(require("../common/icons/order-by-dataset"));

var _styledComponents2 = require("../common/styled-components");

var _localization = require("@kepler.gl/localization");

var _constants = require("@kepler.gl/constants");

var _templateObject, _templateObject2, _templateObject3;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var PanelViewListToggleContainer = _styledComponents["default"].div.attrs({
  className: 'panel-view-list-toggle'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])([""])));

var PanelViewListToggleWrapper = _styledComponents["default"].div.attrs({
  className: 'panel-view-list-toggle-inner'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: flex-end;\n  align-content: center;\n  gap: 10px;\n"])));

var StyledToggleOption = _styledComponents["default"].div.attrs({
  className: 'layer-panel-toggle-option'
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  :hover {\n    cursor: pointer;\n    color: ", ";\n  }\n"])), function (props) {
  return props.active ? props.theme.subtextColorActive : props.theme.panelTabColor;
}, function (props) {
  return props.theme.subtextColorActive;
});

exports.StyledToggleOption = StyledToggleOption;

function ToggleOptionFactory() {
  var ToggleOption = function ToggleOption(_ref) {
    var isActive = _ref.isActive,
        onClick = _ref.onClick,
        option = _ref.option;
    return /*#__PURE__*/_react["default"].createElement(StyledToggleOption, {
      "data-tip": true,
      "data-for": "".concat(option.id, "-toggle-option"),
      active: isActive,
      onClick: onClick
    }, /*#__PURE__*/_react["default"].createElement(option.iconComponent, {
      height: "20px"
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
      id: "".concat(option.id, "-toggle-option"),
      effect: "solid",
      delayShow: 500,
      place: "bottom"
    }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: option.label
    }))));
  };

  return ToggleOption;
}

var TOGGLE_OPTIONS = [{
  id: _constants.PANEL_VIEW_TOGGLES.list,
  iconComponent: _orderByList["default"],
  label: 'sidebar.panelViewToggle.list'
}, {
  id: _constants.PANEL_VIEW_TOGGLES.byDataset,
  iconComponent: _orderByDataset["default"],
  label: 'sidebar.panelViewToggle.byDataset'
}];
PanelViewListToggleFactory.deps = [ToggleOptionFactory];

function PanelViewListToggleFactory(ToggleOption) {
  var PanelViewListToggle = function PanelViewListToggle(_ref2) {
    var mode = _ref2.mode,
        togglePanelListView = _ref2.togglePanelListView;

    var toggleListView = function toggleListView(listView) {
      return togglePanelListView(listView);
    };

    var options = (0, _react.useMemo)(function () {
      return TOGGLE_OPTIONS.map(function (opt) {
        return _objectSpread(_objectSpread({}, opt), {}, {
          isActive: mode === opt.id
        });
      });
    }, [mode]);
    return /*#__PURE__*/_react["default"].createElement(PanelViewListToggleContainer, null, /*#__PURE__*/_react["default"].createElement(PanelViewListToggleWrapper, null, options.map(function (opt) {
      return /*#__PURE__*/_react["default"].createElement(ToggleOption, {
        key: opt.id,
        onClick: function onClick() {
          return toggleListView(opt.id);
        },
        option: opt,
        isActive: opt.isActive
      });
    })));
  };

  return PanelViewListToggle;
}

var _default = PanelViewListToggleFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,