import Keyframes from './keyframes';
import { flyToViewport } from '@math.gl/web-mercator';
import { lerp } from '@math.gl/core';
const LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];
const DEFAULT_OPTS = {
  speed: 1.2,
  curve: 1.414
};
export function flyToInterpolator(start, end, factor, options) {
  const viewport = flyToViewport(start, end, end.ease(factor), { ...DEFAULT_OPTS,
    ...options
  });

  for (const key of LINEARLY_INTERPOLATED_PROPS) {
    viewport[key] = lerp(start[key] || 0, end[key] || 0, end.ease(factor));
  }

  return viewport;
}
export default class CameraKeyFrames extends Keyframes {
  constructor(_ref) {
    let {
      timings,
      keyframes,
      easings,
      interpolators,
      width,
      height
    } = _ref;
    super({
      timings,
      keyframes,
      easings,
      interpolators,
      features: ['latitude', 'longitude', 'zoom', 'pitch', 'bearing']
    });
    this.width = width;
    this.height = height;
  }

  getFrame() {
    const factor = this.factor;
    const start = this.getStartData();
    const end = this.getEndData();

    if (end.interpolate === 'flyTo') {
      if (!this.width || !this.height) {
        throw new Error('width and height must be defined to use flyTo interpolator');
      }

      const maxDuration = this.getEndTime() - this.getStartTime();
      return flyToInterpolator({ ...start,
        width: this.width,
        height: this.height
      }, end, factor, {
        maxDuration
      });
    }

    return super.getFrame();
  }

}
//# sourceMappingURL=camera-keyframes.js.map