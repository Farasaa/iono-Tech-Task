"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexagonToPolygonGeo = hexagonToPolygonGeo;

var _core = require("@deck.gl/core");

var _console = _interopRequireDefault(require("global/console"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function hexagonToPolygonGeo(object, properties, radius, mapState) {
  var viewport = new _core.WebMercatorViewport(mapState);

  if (!Array.isArray(object.position)) {
    return null;
  }

  var screenCenter = viewport.projectFlat(object.position);

  var _viewport$getDistance = viewport.getDistanceScales(object.position),
      unitsPerMeter = _viewport$getDistance.unitsPerMeter;

  if (!Array.isArray(unitsPerMeter)) {
    _console["default"].warn("unitsPerMeter is undefined");

    return null;
  }

  var pixRadius = radius * unitsPerMeter[0];
  var coordinates = [];

  for (var i = 0; i < 6; i++) {
    var vertex = hex_corner(screenCenter, pixRadius, i);
    coordinates.push(viewport.unprojectFlat(vertex));
  }

  coordinates.push(coordinates[0]);
  return {
    geometry: {
      coordinates: coordinates,
      type: 'LineString'
    },
    properties: properties
  };
}

function hex_corner(center, radius, i) {
  var angle_deg = 60 * i + 30;
  var angle_rad = Math.PI / 180 * angle_deg;
  return [center[0] + radius * Math.cos(angle_rad), center[1] + radius * Math.sin(angle_rad)];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZXhhZ29uLWxheWVyL2hleGFnb24tdXRpbHMudHMiXSwibmFtZXMiOlsiaGV4YWdvblRvUG9seWdvbkdlbyIsIm9iamVjdCIsInByb3BlcnRpZXMiLCJyYWRpdXMiLCJtYXBTdGF0ZSIsInZpZXdwb3J0IiwiV2ViTWVyY2F0b3JWaWV3cG9ydCIsIkFycmF5IiwiaXNBcnJheSIsInBvc2l0aW9uIiwic2NyZWVuQ2VudGVyIiwicHJvamVjdEZsYXQiLCJnZXREaXN0YW5jZVNjYWxlcyIsInVuaXRzUGVyTWV0ZXIiLCJDb25zb2xlIiwid2FybiIsInBpeFJhZGl1cyIsImNvb3JkaW5hdGVzIiwiaSIsInZlcnRleCIsImhleF9jb3JuZXIiLCJwdXNoIiwidW5wcm9qZWN0RmxhdCIsImdlb21ldHJ5IiwidHlwZSIsImNlbnRlciIsImFuZ2xlX2RlZyIsImFuZ2xlX3JhZCIsIk1hdGgiLCJQSSIsImNvcyIsInNpbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBSkE7QUFDQTtBQU1PLFNBQVNBLG1CQUFULENBQTZCQyxNQUE3QixFQUFxQ0MsVUFBckMsRUFBaURDLE1BQWpELEVBQXlEQyxRQUF6RCxFQUFtRTtBQUN4RSxNQUFNQyxRQUFRLEdBQUcsSUFBSUMseUJBQUosQ0FBd0JGLFFBQXhCLENBQWpCOztBQUNBLE1BQUksQ0FBQ0csS0FBSyxDQUFDQyxPQUFOLENBQWNQLE1BQU0sQ0FBQ1EsUUFBckIsQ0FBTCxFQUFxQztBQUNuQyxXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFNQyxZQUFZLEdBQUdMLFFBQVEsQ0FBQ00sV0FBVCxDQUFxQlYsTUFBTSxDQUFDUSxRQUE1QixDQUFyQjs7QUFOd0UsOEJBT2hESixRQUFRLENBQUNPLGlCQUFULENBQTJCWCxNQUFNLENBQUNRLFFBQWxDLENBUGdEO0FBQUEsTUFPakVJLGFBUGlFLHlCQU9qRUEsYUFQaUU7O0FBU3hFLE1BQUksQ0FBQ04sS0FBSyxDQUFDQyxPQUFOLENBQWNLLGFBQWQsQ0FBTCxFQUFtQztBQUNqQ0Msd0JBQVFDLElBQVI7O0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBTUMsU0FBUyxHQUFHYixNQUFNLEdBQUdVLGFBQWEsQ0FBQyxDQUFELENBQXhDO0FBRUEsTUFBTUksV0FBa0IsR0FBRyxFQUEzQjs7QUFFQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsQ0FBcEIsRUFBdUJBLENBQUMsRUFBeEIsRUFBNEI7QUFDMUIsUUFBTUMsTUFBTSxHQUFHQyxVQUFVLENBQUNWLFlBQUQsRUFBZU0sU0FBZixFQUEwQkUsQ0FBMUIsQ0FBekI7QUFDQUQsSUFBQUEsV0FBVyxDQUFDSSxJQUFaLENBQWlCaEIsUUFBUSxDQUFDaUIsYUFBVCxDQUF1QkgsTUFBdkIsQ0FBakI7QUFDRDs7QUFFREYsRUFBQUEsV0FBVyxDQUFDSSxJQUFaLENBQWlCSixXQUFXLENBQUMsQ0FBRCxDQUE1QjtBQUVBLFNBQU87QUFDTE0sSUFBQUEsUUFBUSxFQUFFO0FBQ1JOLE1BQUFBLFdBQVcsRUFBWEEsV0FEUTtBQUVSTyxNQUFBQSxJQUFJLEVBQUU7QUFGRSxLQURMO0FBS0x0QixJQUFBQSxVQUFVLEVBQVZBO0FBTEssR0FBUDtBQU9EOztBQUVELFNBQVNrQixVQUFULENBQW9CSyxNQUFwQixFQUFzQ3RCLE1BQXRDLEVBQXNEZSxDQUF0RCxFQUFpRTtBQUMvRCxNQUFNUSxTQUFTLEdBQUcsS0FBS1IsQ0FBTCxHQUFTLEVBQTNCO0FBQ0EsTUFBTVMsU0FBUyxHQUFJQyxJQUFJLENBQUNDLEVBQUwsR0FBVSxHQUFYLEdBQWtCSCxTQUFwQztBQUVBLFNBQU8sQ0FBQ0QsTUFBTSxDQUFDLENBQUQsQ0FBTixHQUFZdEIsTUFBTSxHQUFHeUIsSUFBSSxDQUFDRSxHQUFMLENBQVNILFNBQVQsQ0FBdEIsRUFBMkNGLE1BQU0sQ0FBQyxDQUFELENBQU4sR0FBWXRCLE1BQU0sR0FBR3lCLElBQUksQ0FBQ0csR0FBTCxDQUFTSixTQUFULENBQWhFLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7V2ViTWVyY2F0b3JWaWV3cG9ydH0gZnJvbSAnQGRlY2suZ2wvY29yZSc7XG5pbXBvcnQgQ29uc29sZSBmcm9tICdnbG9iYWwvY29uc29sZSc7XG5pbXBvcnQge0NlbnRyb2lkfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGhleGFnb25Ub1BvbHlnb25HZW8ob2JqZWN0LCBwcm9wZXJ0aWVzLCByYWRpdXMsIG1hcFN0YXRlKSB7XG4gIGNvbnN0IHZpZXdwb3J0ID0gbmV3IFdlYk1lcmNhdG9yVmlld3BvcnQobWFwU3RhdGUpO1xuICBpZiAoIUFycmF5LmlzQXJyYXkob2JqZWN0LnBvc2l0aW9uKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3Qgc2NyZWVuQ2VudGVyID0gdmlld3BvcnQucHJvamVjdEZsYXQob2JqZWN0LnBvc2l0aW9uKTtcbiAgY29uc3Qge3VuaXRzUGVyTWV0ZXJ9ID0gdmlld3BvcnQuZ2V0RGlzdGFuY2VTY2FsZXMob2JqZWN0LnBvc2l0aW9uKTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkodW5pdHNQZXJNZXRlcikpIHtcbiAgICBDb25zb2xlLndhcm4oYHVuaXRzUGVyTWV0ZXIgaXMgdW5kZWZpbmVkYCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBwaXhSYWRpdXMgPSByYWRpdXMgKiB1bml0c1Blck1ldGVyWzBdO1xuXG4gIGNvbnN0IGNvb3JkaW5hdGVzOiBhbnlbXSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgY29uc3QgdmVydGV4ID0gaGV4X2Nvcm5lcihzY3JlZW5DZW50ZXIsIHBpeFJhZGl1cywgaSk7XG4gICAgY29vcmRpbmF0ZXMucHVzaCh2aWV3cG9ydC51bnByb2plY3RGbGF0KHZlcnRleCkpO1xuICB9XG5cbiAgY29vcmRpbmF0ZXMucHVzaChjb29yZGluYXRlc1swXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBnZW9tZXRyeToge1xuICAgICAgY29vcmRpbmF0ZXMsXG4gICAgICB0eXBlOiAnTGluZVN0cmluZydcbiAgICB9LFxuICAgIHByb3BlcnRpZXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGV4X2Nvcm5lcihjZW50ZXI6IENlbnRyb2lkLCByYWRpdXM6IG51bWJlciwgaTogbnVtYmVyKSB7XG4gIGNvbnN0IGFuZ2xlX2RlZyA9IDYwICogaSArIDMwO1xuICBjb25zdCBhbmdsZV9yYWQgPSAoTWF0aC5QSSAvIDE4MCkgKiBhbmdsZV9kZWc7XG5cbiAgcmV0dXJuIFtjZW50ZXJbMF0gKyByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZV9yYWQpLCBjZW50ZXJbMV0gKyByYWRpdXMgKiBNYXRoLnNpbihhbmdsZV9yYWQpXTtcbn1cbiJdfQ==