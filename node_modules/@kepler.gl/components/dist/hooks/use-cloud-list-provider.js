"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCloudListProvider = exports.CloudListProvider = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _context = require("../context");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var CloudListProvider = function CloudListProvider(_ref) {
  var children = _ref.children,
      _ref$providers = _ref.providers,
      providers = _ref$providers === void 0 ? [] : _ref$providers;

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      currentCloudProvider = _useState2[0],
      setCurrentCloudProvider = _useState2[1];

  var cloudProviders = (0, _react.useRef)(providers);
  var setProvider = (0, _react.useCallback)(function (provider) {
    setCurrentCloudProvider(currentCloudProvider === provider ? null : provider);
  }, [currentCloudProvider]);
  var value = (0, _react.useMemo)(function () {
    return {
      provider: currentCloudProvider,
      setProvider: setProvider,
      cloudProviders: cloudProviders.current
    };
  }, [currentCloudProvider, setCurrentCloudProvider]);
  return /*#__PURE__*/_react["default"].createElement(_context.CloudProviderContext.Provider, {
    value: value
  }, children);
};
/**
 * this hook provides access the CloudList provider context
 */


exports.CloudListProvider = CloudListProvider;

var useCloudListProvider = function useCloudListProvider() {
  return (0, _react.useContext)(_context.CloudProviderContext);
};

exports.useCloudListProvider = useCloudListProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2UtY2xvdWQtbGlzdC1wcm92aWRlci50c3giXSwibmFtZXMiOlsiQ2xvdWRMaXN0UHJvdmlkZXIiLCJjaGlsZHJlbiIsInByb3ZpZGVycyIsImN1cnJlbnRDbG91ZFByb3ZpZGVyIiwic2V0Q3VycmVudENsb3VkUHJvdmlkZXIiLCJjbG91ZFByb3ZpZGVycyIsInNldFByb3ZpZGVyIiwicHJvdmlkZXIiLCJ2YWx1ZSIsImN1cnJlbnQiLCJ1c2VDbG91ZExpc3RQcm92aWRlciIsIkNsb3VkUHJvdmlkZXJDb250ZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBSkE7QUFDQTtBQVVPLElBQU1BLGlCQUFtRCxHQUFHLFNBQXREQSxpQkFBc0QsT0FBZ0M7QUFBQSxNQUE5QkMsUUFBOEIsUUFBOUJBLFFBQThCO0FBQUEsNEJBQXBCQyxTQUFvQjtBQUFBLE1BQXBCQSxTQUFvQiwrQkFBUixFQUFROztBQUFBLGtCQUN6QyxxQkFBMEIsSUFBMUIsQ0FEeUM7QUFBQTtBQUFBLE1BQzFGQyxvQkFEMEY7QUFBQSxNQUNwRUMsdUJBRG9FOztBQUVqRyxNQUFNQyxjQUFjLEdBQUcsbUJBQU9ILFNBQVAsQ0FBdkI7QUFFQSxNQUFNSSxXQUFXLEdBQUcsd0JBQ2xCLFVBQUFDLFFBQVEsRUFBSTtBQUNWSCxJQUFBQSx1QkFBdUIsQ0FBQ0Qsb0JBQW9CLEtBQUtJLFFBQXpCLEdBQW9DLElBQXBDLEdBQTJDQSxRQUE1QyxDQUF2QjtBQUNELEdBSGlCLEVBSWxCLENBQUNKLG9CQUFELENBSmtCLENBQXBCO0FBT0EsTUFBTUssS0FBSyxHQUFHLG9CQUNaO0FBQUEsV0FBTztBQUNMRCxNQUFBQSxRQUFRLEVBQUVKLG9CQURMO0FBRUxHLE1BQUFBLFdBQVcsRUFBRUEsV0FGUjtBQUdMRCxNQUFBQSxjQUFjLEVBQUVBLGNBQWMsQ0FBQ0k7QUFIMUIsS0FBUDtBQUFBLEdBRFksRUFNWixDQUFDTixvQkFBRCxFQUF1QkMsdUJBQXZCLENBTlksQ0FBZDtBQVNBLHNCQUFPLGdDQUFDLDZCQUFELENBQXNCLFFBQXRCO0FBQStCLElBQUEsS0FBSyxFQUFFSTtBQUF0QyxLQUE4Q1AsUUFBOUMsQ0FBUDtBQUNELENBckJNO0FBdUJQO0FBQ0E7QUFDQTs7Ozs7QUFDTyxJQUFNUyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCO0FBQUEsU0FBTSx1QkFBV0MsNkJBQVgsQ0FBTjtBQUFBLENBQTdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7UHJvcHNXaXRoQ2hpbGRyZW4sIHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0Nsb3VkUHJvdmlkZXJDb250ZXh0fSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvY2xvdWQtcHJvdmlkZXJzJztcblxudHlwZSBDbG91ZExpc3RQcm92aWRlclByb3BzID0gUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBwcm92aWRlcnM6IFByb3ZpZGVyW107XG59PjtcblxuZXhwb3J0IGNvbnN0IENsb3VkTGlzdFByb3ZpZGVyOiBSZWFjdC5GQzxDbG91ZExpc3RQcm92aWRlclByb3BzPiA9ICh7Y2hpbGRyZW4sIHByb3ZpZGVycyA9IFtdfSkgPT4ge1xuICBjb25zdCBbY3VycmVudENsb3VkUHJvdmlkZXIsIHNldEN1cnJlbnRDbG91ZFByb3ZpZGVyXSA9IHVzZVN0YXRlPFByb3ZpZGVyIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IGNsb3VkUHJvdmlkZXJzID0gdXNlUmVmKHByb3ZpZGVycyk7XG5cbiAgY29uc3Qgc2V0UHJvdmlkZXIgPSB1c2VDYWxsYmFjayhcbiAgICBwcm92aWRlciA9PiB7XG4gICAgICBzZXRDdXJyZW50Q2xvdWRQcm92aWRlcihjdXJyZW50Q2xvdWRQcm92aWRlciA9PT0gcHJvdmlkZXIgPyBudWxsIDogcHJvdmlkZXIpO1xuICAgIH0sXG4gICAgW2N1cnJlbnRDbG91ZFByb3ZpZGVyXVxuICApO1xuXG4gIGNvbnN0IHZhbHVlID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgcHJvdmlkZXI6IGN1cnJlbnRDbG91ZFByb3ZpZGVyLFxuICAgICAgc2V0UHJvdmlkZXI6IHNldFByb3ZpZGVyLFxuICAgICAgY2xvdWRQcm92aWRlcnM6IGNsb3VkUHJvdmlkZXJzLmN1cnJlbnRcbiAgICB9KSxcbiAgICBbY3VycmVudENsb3VkUHJvdmlkZXIsIHNldEN1cnJlbnRDbG91ZFByb3ZpZGVyXVxuICApO1xuXG4gIHJldHVybiA8Q2xvdWRQcm92aWRlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3ZhbHVlfT57Y2hpbGRyZW59PC9DbG91ZFByb3ZpZGVyQ29udGV4dC5Qcm92aWRlcj47XG59O1xuXG4vKipcbiAqIHRoaXMgaG9vayBwcm92aWRlcyBhY2Nlc3MgdGhlIENsb3VkTGlzdCBwcm92aWRlciBjb250ZXh0XG4gKi9cbmV4cG9ydCBjb25zdCB1c2VDbG91ZExpc3RQcm92aWRlciA9ICgpID0+IHVzZUNvbnRleHQoQ2xvdWRQcm92aWRlckNvbnRleHQpO1xuIl19