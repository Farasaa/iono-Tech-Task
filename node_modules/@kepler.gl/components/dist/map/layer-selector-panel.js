"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _styledComponents = require("../common/styled-components");

var _icons = require("../common/icons");

var _mapLayerSelector = _interopRequireDefault(require("../common/map-layer-selector"));

var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));

var _mapControlPanel = _interopRequireDefault(require("./map-control-panel"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
LayerSelectorPanelFactory.deps = [_mapControlTooltip["default"], _mapControlPanel["default"]];

function LayerSelectorPanelFactory(MapControlTooltip, MapControlPanel) {
  /** @type {import('./layer-selector-panel').LayerSelectorPanelComponent} */
  var LayerSelectorPanel = function LayerSelectorPanel(_ref) {
    var onMapToggleLayer = _ref.onMapToggleLayer,
        onToggleMapControl = _ref.onToggleMapControl,
        layers = _ref.layers,
        layersToRender = _ref.layersToRender,
        isSplit = _ref.isSplit,
        mapControls = _ref.mapControls,
        readOnly = _ref.readOnly;
    var visibleLayers = (mapControls === null || mapControls === void 0 ? void 0 : mapControls.visibleLayers) || {};

    var _ref2 = visibleLayers || {},
        isActive = _ref2.active,
        show = _ref2.show,
        disableClose = _ref2.disableClose;

    var legendLayers = (0, _react.useMemo)(function () {
      return layers.filter(function (_ref3) {
        var config = _ref3.config;
        return config.isVisible;
      }).map(function (_ref4) {
        var id = _ref4.id,
            config = _ref4.config;
        return {
          id: id,
          name: config.label,
          // layer
          isVisible: layersToRender[id]
        };
      });
    }, [layers, layersToRender]);
    var isVisible = (0, _react.useMemo)(function () {
      return isSplit && show && readOnly !== true;
    }, [isSplit, show, readOnly]);
    var onToggleMenuPanel = (0, _react.useCallback)(function (event) {
      event.preventDefault();
      onToggleMapControl('visibleLayers');
    }, [onToggleMapControl]);
    return isVisible ? !isActive ? /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      key: 1,
      onClick: onToggleMenuPanel,
      className: (0, _classnames["default"])('map-control-button', 'toggle-layer', {
        isActive: isActive
      }),
      "data-tip": true,
      "data-for": "toggle-layer"
    }, /*#__PURE__*/_react["default"].createElement(_icons.Layers, {
      height: "22px"
    }), /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "toggle-layer",
      message: isActive ? 'tooltip.hideLayerPanel' : 'tooltip.showLayerPanel'
    })) : /*#__PURE__*/_react["default"].createElement(MapControlPanel, {
      header: "header.visibleLayers",
      onClick: onToggleMenuPanel,
      disableClose: disableClose
    }, /*#__PURE__*/_react["default"].createElement(_mapLayerSelector["default"], {
      layers: legendLayers,
      onMapToggleLayer: onMapToggleLayer
    })) : null;
  };

  LayerSelectorPanel.displayName = 'LayerSelectorPanel';
  return /*#__PURE__*/_react["default"].memo(LayerSelectorPanel);
}

var _default = LayerSelectorPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvbGF5ZXItc2VsZWN0b3ItcGFuZWwudHN4Il0sIm5hbWVzIjpbIkxheWVyU2VsZWN0b3JQYW5lbEZhY3RvcnkiLCJkZXBzIiwiTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5IiwiTWFwQ29udHJvbFBhbmVsRmFjdG9yeSIsIk1hcENvbnRyb2xUb29sdGlwIiwiTWFwQ29udHJvbFBhbmVsIiwiTGF5ZXJTZWxlY3RvclBhbmVsIiwib25NYXBUb2dnbGVMYXllciIsIm9uVG9nZ2xlTWFwQ29udHJvbCIsImxheWVycyIsImxheWVyc1RvUmVuZGVyIiwiaXNTcGxpdCIsIm1hcENvbnRyb2xzIiwicmVhZE9ubHkiLCJ2aXNpYmxlTGF5ZXJzIiwiaXNBY3RpdmUiLCJhY3RpdmUiLCJzaG93IiwiZGlzYWJsZUNsb3NlIiwibGVnZW5kTGF5ZXJzIiwiZmlsdGVyIiwiY29uZmlnIiwiaXNWaXNpYmxlIiwibWFwIiwiaWQiLCJuYW1lIiwibGFiZWwiLCJvblRvZ2dsZU1lbnVQYW5lbCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJkaXNwbGF5TmFtZSIsIlJlYWN0IiwibWVtbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFWQTtBQUNBO0FBYUFBLHlCQUF5QixDQUFDQyxJQUExQixHQUFpQyxDQUFDQyw2QkFBRCxFQUEyQkMsMkJBQTNCLENBQWpDOztBQVlBLFNBQVNILHlCQUFULENBQ0VJLGlCQURGLEVBRUVDLGVBRkYsRUFHRTtBQUNBO0FBQ0EsTUFBTUMsa0JBQXFELEdBQUcsU0FBeERBLGtCQUF3RCxPQVF4RDtBQUFBLFFBUEpDLGdCQU9JLFFBUEpBLGdCQU9JO0FBQUEsUUFOSkMsa0JBTUksUUFOSkEsa0JBTUk7QUFBQSxRQUxKQyxNQUtJLFFBTEpBLE1BS0k7QUFBQSxRQUpKQyxjQUlJLFFBSkpBLGNBSUk7QUFBQSxRQUhKQyxPQUdJLFFBSEpBLE9BR0k7QUFBQSxRQUZKQyxXQUVJLFFBRkpBLFdBRUk7QUFBQSxRQURKQyxRQUNJLFFBREpBLFFBQ0k7QUFDSixRQUFNQyxhQUFhLEdBQUcsQ0FBQUYsV0FBVyxTQUFYLElBQUFBLFdBQVcsV0FBWCxZQUFBQSxXQUFXLENBQUVFLGFBQWIsS0FBK0IsRUFBckQ7O0FBREksZ0JBRTJDQSxhQUFhLElBQUksRUFGNUQ7QUFBQSxRQUVXQyxRQUZYLFNBRUdDLE1BRkg7QUFBQSxRQUVxQkMsSUFGckIsU0FFcUJBLElBRnJCO0FBQUEsUUFFMkJDLFlBRjNCLFNBRTJCQSxZQUYzQjs7QUFJSixRQUFNQyxZQUFZLEdBQUcsb0JBQ25CO0FBQUEsYUFDRVYsTUFBTSxDQUNIVyxNQURILENBQ1U7QUFBQSxZQUFFQyxNQUFGLFNBQUVBLE1BQUY7QUFBQSxlQUFjQSxNQUFNLENBQUNDLFNBQXJCO0FBQUEsT0FEVixFQUVHQyxHQUZILENBRU87QUFBQSxZQUFFQyxFQUFGLFNBQUVBLEVBQUY7QUFBQSxZQUFNSCxNQUFOLFNBQU1BLE1BQU47QUFBQSxlQUFtQjtBQUN0QkcsVUFBQUEsRUFBRSxFQUFGQSxFQURzQjtBQUV0QkMsVUFBQUEsSUFBSSxFQUFFSixNQUFNLENBQUNLLEtBRlM7QUFHdEI7QUFDQUosVUFBQUEsU0FBUyxFQUFFWixjQUFjLENBQUNjLEVBQUQ7QUFKSCxTQUFuQjtBQUFBLE9BRlAsQ0FERjtBQUFBLEtBRG1CLEVBVW5CLENBQUNmLE1BQUQsRUFBU0MsY0FBVCxDQVZtQixDQUFyQjtBQWFBLFFBQU1ZLFNBQVMsR0FBRyxvQkFBUTtBQUFBLGFBQU1YLE9BQU8sSUFBSU0sSUFBWCxJQUFtQkosUUFBUSxLQUFLLElBQXRDO0FBQUEsS0FBUixFQUFvRCxDQUNwRUYsT0FEb0UsRUFFcEVNLElBRm9FLEVBR3BFSixRQUhvRSxDQUFwRCxDQUFsQjtBQU1BLFFBQU1jLGlCQUFpQixHQUFHLHdCQUN4QixVQUFBQyxLQUFLLEVBQUk7QUFDUEEsTUFBQUEsS0FBSyxDQUFDQyxjQUFOO0FBQ0FyQixNQUFBQSxrQkFBa0IsQ0FBQyxlQUFELENBQWxCO0FBQ0QsS0FKdUIsRUFLeEIsQ0FBQ0Esa0JBQUQsQ0FMd0IsQ0FBMUI7QUFRQSxXQUFPYyxTQUFTLEdBQ2QsQ0FBQ1AsUUFBRCxnQkFDRSxnQ0FBQyxrQ0FBRDtBQUNFLE1BQUEsR0FBRyxFQUFFLENBRFA7QUFFRSxNQUFBLE9BQU8sRUFBRVksaUJBRlg7QUFHRSxNQUFBLFNBQVMsRUFBRSw0QkFBVyxvQkFBWCxFQUFpQyxjQUFqQyxFQUFpRDtBQUFDWixRQUFBQSxRQUFRLEVBQVJBO0FBQUQsT0FBakQsQ0FIYjtBQUlFLHNCQUpGO0FBS0Usa0JBQVM7QUFMWCxvQkFPRSxnQ0FBQyxhQUFEO0FBQVEsTUFBQSxNQUFNLEVBQUM7QUFBZixNQVBGLGVBUUUsZ0NBQUMsaUJBQUQ7QUFDRSxNQUFBLEVBQUUsRUFBQyxjQURMO0FBRUUsTUFBQSxPQUFPLEVBQUVBLFFBQVEsR0FBRyx3QkFBSCxHQUE4QjtBQUZqRCxNQVJGLENBREYsZ0JBZUUsZ0NBQUMsZUFBRDtBQUNFLE1BQUEsTUFBTSxFQUFDLHNCQURUO0FBRUUsTUFBQSxPQUFPLEVBQUVZLGlCQUZYO0FBR0UsTUFBQSxZQUFZLEVBQUVUO0FBSGhCLG9CQUtFLGdDQUFDLDRCQUFEO0FBQWtCLE1BQUEsTUFBTSxFQUFFQyxZQUExQjtBQUF3QyxNQUFBLGdCQUFnQixFQUFFWjtBQUExRCxNQUxGLENBaEJZLEdBd0JaLElBeEJKO0FBeUJELEdBaEVEOztBQWtFQUQsRUFBQUEsa0JBQWtCLENBQUN3QixXQUFuQixHQUFpQyxvQkFBakM7QUFFQSxzQkFBT0Msa0JBQU1DLElBQU4sQ0FBVzFCLGtCQUFYLENBQVA7QUFDRDs7ZUFFY04seUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlTWVtb30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCB7TWFwQ29udHJvbEJ1dHRvbn0gZnJvbSAnLi4vY29tbW9uL3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7TGF5ZXJzfSBmcm9tICcuLi9jb21tb24vaWNvbnMnO1xuaW1wb3J0IE1hcExheWVyU2VsZWN0b3IgZnJvbSAnLi4vY29tbW9uL21hcC1sYXllci1zZWxlY3Rvcic7XG5pbXBvcnQgTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5IGZyb20gJy4vbWFwLWNvbnRyb2wtdG9vbHRpcCc7XG5pbXBvcnQgTWFwQ29udHJvbFBhbmVsRmFjdG9yeSBmcm9tICcuL21hcC1jb250cm9sLXBhbmVsJztcbmltcG9ydCB7TGF5ZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvbGF5ZXJzJztcbmltcG9ydCB7TWFwQ29udHJvbEl0ZW0sIE1hcENvbnRyb2xzfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuTGF5ZXJTZWxlY3RvclBhbmVsRmFjdG9yeS5kZXBzID0gW01hcENvbnRyb2xUb29sdGlwRmFjdG9yeSwgTWFwQ29udHJvbFBhbmVsRmFjdG9yeV07XG5cbmV4cG9ydCB0eXBlIExheWVyU2VsZWN0b3JQYW5lbFByb3BzID0ge1xuICBvbk1hcFRvZ2dsZUxheWVyOiAobGF5ZXJJZDogc3RyaW5nKSA9PiB2b2lkO1xuICBvblRvZ2dsZU1hcENvbnRyb2w6IChjb250cm9sOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGxheWVyczogUmVhZG9ubHlBcnJheTxMYXllcj47XG4gIGxheWVyc1RvUmVuZGVyOiB7W2tleTogc3RyaW5nXTogYm9vbGVhbn07XG4gIGlzU3BsaXQ6IGJvb2xlYW47XG4gIG1hcENvbnRyb2xzOiBNYXBDb250cm9scztcbiAgcmVhZE9ubHk6IGJvb2xlYW47XG59O1xuXG5mdW5jdGlvbiBMYXllclNlbGVjdG9yUGFuZWxGYWN0b3J5KFxuICBNYXBDb250cm9sVG9vbHRpcDogUmV0dXJuVHlwZTx0eXBlb2YgTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5PixcbiAgTWFwQ29udHJvbFBhbmVsOiBSZXR1cm5UeXBlPHR5cGVvZiBNYXBDb250cm9sUGFuZWxGYWN0b3J5PlxuKSB7XG4gIC8qKiBAdHlwZSB7aW1wb3J0KCcuL2xheWVyLXNlbGVjdG9yLXBhbmVsJykuTGF5ZXJTZWxlY3RvclBhbmVsQ29tcG9uZW50fSAqL1xuICBjb25zdCBMYXllclNlbGVjdG9yUGFuZWw6IFJlYWN0LkZDPExheWVyU2VsZWN0b3JQYW5lbFByb3BzPiA9ICh7XG4gICAgb25NYXBUb2dnbGVMYXllcixcbiAgICBvblRvZ2dsZU1hcENvbnRyb2wsXG4gICAgbGF5ZXJzLFxuICAgIGxheWVyc1RvUmVuZGVyLFxuICAgIGlzU3BsaXQsXG4gICAgbWFwQ29udHJvbHMsXG4gICAgcmVhZE9ubHlcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHZpc2libGVMYXllcnMgPSBtYXBDb250cm9scz8udmlzaWJsZUxheWVycyB8fCAoe30gYXMgTWFwQ29udHJvbEl0ZW0pO1xuICAgIGNvbnN0IHthY3RpdmU6IGlzQWN0aXZlLCBzaG93LCBkaXNhYmxlQ2xvc2V9ID0gdmlzaWJsZUxheWVycyB8fCB7fTtcblxuICAgIGNvbnN0IGxlZ2VuZExheWVycyA9IHVzZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICBsYXllcnNcbiAgICAgICAgICAuZmlsdGVyKCh7Y29uZmlnfSkgPT4gY29uZmlnLmlzVmlzaWJsZSlcbiAgICAgICAgICAubWFwKCh7aWQsIGNvbmZpZ30pID0+ICh7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG5hbWU6IGNvbmZpZy5sYWJlbCxcbiAgICAgICAgICAgIC8vIGxheWVyXG4gICAgICAgICAgICBpc1Zpc2libGU6IGxheWVyc1RvUmVuZGVyW2lkXVxuICAgICAgICAgIH0pKSxcbiAgICAgIFtsYXllcnMsIGxheWVyc1RvUmVuZGVyXVxuICAgICk7XG5cbiAgICBjb25zdCBpc1Zpc2libGUgPSB1c2VNZW1vKCgpID0+IGlzU3BsaXQgJiYgc2hvdyAmJiByZWFkT25seSAhPT0gdHJ1ZSwgW1xuICAgICAgaXNTcGxpdCxcbiAgICAgIHNob3csXG4gICAgICByZWFkT25seVxuICAgIF0pO1xuXG4gICAgY29uc3Qgb25Ub2dnbGVNZW51UGFuZWwgPSB1c2VDYWxsYmFjayhcbiAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25Ub2dnbGVNYXBDb250cm9sKCd2aXNpYmxlTGF5ZXJzJyk7XG4gICAgICB9LFxuICAgICAgW29uVG9nZ2xlTWFwQ29udHJvbF1cbiAgICApO1xuXG4gICAgcmV0dXJuIGlzVmlzaWJsZSA/IChcbiAgICAgICFpc0FjdGl2ZSA/IChcbiAgICAgICAgPE1hcENvbnRyb2xCdXR0b25cbiAgICAgICAgICBrZXk9ezF9XG4gICAgICAgICAgb25DbGljaz17b25Ub2dnbGVNZW51UGFuZWx9XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdtYXAtY29udHJvbC1idXR0b24nLCAndG9nZ2xlLWxheWVyJywge2lzQWN0aXZlfSl9XG4gICAgICAgICAgZGF0YS10aXBcbiAgICAgICAgICBkYXRhLWZvcj1cInRvZ2dsZS1sYXllclwiXG4gICAgICAgID5cbiAgICAgICAgICA8TGF5ZXJzIGhlaWdodD1cIjIycHhcIiAvPlxuICAgICAgICAgIDxNYXBDb250cm9sVG9vbHRpcFxuICAgICAgICAgICAgaWQ9XCJ0b2dnbGUtbGF5ZXJcIlxuICAgICAgICAgICAgbWVzc2FnZT17aXNBY3RpdmUgPyAndG9vbHRpcC5oaWRlTGF5ZXJQYW5lbCcgOiAndG9vbHRpcC5zaG93TGF5ZXJQYW5lbCd9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9NYXBDb250cm9sQnV0dG9uPlxuICAgICAgKSA6IChcbiAgICAgICAgPE1hcENvbnRyb2xQYW5lbFxuICAgICAgICAgIGhlYWRlcj1cImhlYWRlci52aXNpYmxlTGF5ZXJzXCJcbiAgICAgICAgICBvbkNsaWNrPXtvblRvZ2dsZU1lbnVQYW5lbH1cbiAgICAgICAgICBkaXNhYmxlQ2xvc2U9e2Rpc2FibGVDbG9zZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxNYXBMYXllclNlbGVjdG9yIGxheWVycz17bGVnZW5kTGF5ZXJzfSBvbk1hcFRvZ2dsZUxheWVyPXtvbk1hcFRvZ2dsZUxheWVyfSAvPlxuICAgICAgICA8L01hcENvbnRyb2xQYW5lbD5cbiAgICAgIClcbiAgICApIDogbnVsbDtcbiAgfTtcblxuICBMYXllclNlbGVjdG9yUGFuZWwuZGlzcGxheU5hbWUgPSAnTGF5ZXJTZWxlY3RvclBhbmVsJztcblxuICByZXR1cm4gUmVhY3QubWVtbyhMYXllclNlbGVjdG9yUGFuZWwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBMYXllclNlbGVjdG9yUGFuZWxGYWN0b3J5O1xuIl19