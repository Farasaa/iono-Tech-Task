"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PanelTabFactory = PanelTabFactory;
exports["default"] = exports.StyledPanelTab = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledComponents2 = require("../common/styled-components");

var _localization = require("@kepler.gl/localization");

var _templateObject;

var StyledPanelTab = _styledComponents["default"].div.attrs({
  className: 'side-panel__tab'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  align-items: flex-end;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: ", ";\n  color: ", ";\n  display: flex;\n  justify-content: center;\n  margin-right: ", "px;\n  padding-bottom: ", "px;\n  width: ", ";\n\n  :hover {\n    cursor: pointer;\n    color: ", ";\n  }\n"])), function (props) {
  return props.active ? props.theme.panelToggleBorderColor : 'transparent';
}, function (props) {
  return props.active ? props.theme.subtextColorActive : props.theme.panelTabColor;
}, function (props) {
  return props.theme.panelToggleMarginRight;
}, function (props) {
  return props.theme.panelToggleBottomPadding;
}, function (props) {
  return props.theme.panelTabWidth;
}, function (props) {
  return props.theme.textColorHl;
});

exports.StyledPanelTab = StyledPanelTab;

function PanelTabFactory() {
  var PanelTab = function PanelTab(_ref) {
    var isActive = _ref.isActive,
        onClick = _ref.onClick,
        panel = _ref.panel;
    return /*#__PURE__*/_react["default"].createElement(StyledPanelTab, {
      "data-tip": true,
      "data-for": "".concat(panel.id, "-nav"),
      active: isActive,
      onClick: onClick
    }, /*#__PURE__*/_react["default"].createElement(panel.iconComponent, {
      height: "20px"
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
      id: "".concat(panel.id, "-nav"),
      effect: "solid",
      delayShow: 500,
      place: "bottom"
    }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: panel.label || panel.id
    }))));
  };

  return PanelTab;
}

var _default = PanelTabFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaWRlLXBhbmVsL3BhbmVsLXRhYi50c3giXSwibmFtZXMiOlsiU3R5bGVkUGFuZWxUYWIiLCJzdHlsZWQiLCJkaXYiLCJhdHRycyIsImNsYXNzTmFtZSIsInByb3BzIiwiYWN0aXZlIiwidGhlbWUiLCJwYW5lbFRvZ2dsZUJvcmRlckNvbG9yIiwic3VidGV4dENvbG9yQWN0aXZlIiwicGFuZWxUYWJDb2xvciIsInBhbmVsVG9nZ2xlTWFyZ2luUmlnaHQiLCJwYW5lbFRvZ2dsZUJvdHRvbVBhZGRpbmciLCJwYW5lbFRhYldpZHRoIiwidGV4dENvbG9ySGwiLCJQYW5lbFRhYkZhY3RvcnkiLCJQYW5lbFRhYiIsImlzQWN0aXZlIiwib25DbGljayIsInBhbmVsIiwiaWQiLCJsYWJlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFtQk8sSUFBTUEsY0FBYyxHQUFHQyw2QkFBT0MsR0FBUCxDQUFXQyxLQUFYLENBQWlCO0FBQzdDQyxFQUFBQSxTQUFTLEVBQUU7QUFEa0MsQ0FBakIsQ0FBSCwwWUFNRixVQUFBQyxLQUFLO0FBQUEsU0FDMUJBLEtBQUssQ0FBQ0MsTUFBTixHQUFlRCxLQUFLLENBQUNFLEtBQU4sQ0FBWUMsc0JBQTNCLEdBQW9ELGFBRDFCO0FBQUEsQ0FOSCxFQVFoQixVQUFBSCxLQUFLO0FBQUEsU0FBS0EsS0FBSyxDQUFDQyxNQUFOLEdBQWVELEtBQUssQ0FBQ0UsS0FBTixDQUFZRSxrQkFBM0IsR0FBZ0RKLEtBQUssQ0FBQ0UsS0FBTixDQUFZRyxhQUFqRTtBQUFBLENBUlcsRUFXVCxVQUFBTCxLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDRSxLQUFOLENBQVlJLHNCQUFoQjtBQUFBLENBWEksRUFZUCxVQUFBTixLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDRSxLQUFOLENBQVlLLHdCQUFoQjtBQUFBLENBWkUsRUFhaEIsVUFBQVAsS0FBSztBQUFBLFNBQUlBLEtBQUssQ0FBQ0UsS0FBTixDQUFZTSxhQUFoQjtBQUFBLENBYlcsRUFpQmQsVUFBQVIsS0FBSztBQUFBLFNBQUlBLEtBQUssQ0FBQ0UsS0FBTixDQUFZTyxXQUFoQjtBQUFBLENBakJTLENBQXBCOzs7O0FBcUJBLFNBQVNDLGVBQVQsR0FBMkI7QUFDaEMsTUFBTUMsUUFBaUMsR0FBRyxTQUFwQ0EsUUFBb0M7QUFBQSxRQUFFQyxRQUFGLFFBQUVBLFFBQUY7QUFBQSxRQUFZQyxPQUFaLFFBQVlBLE9BQVo7QUFBQSxRQUFxQkMsS0FBckIsUUFBcUJBLEtBQXJCO0FBQUEsd0JBQ3hDLGdDQUFDLGNBQUQ7QUFBZ0Isc0JBQWhCO0FBQXlCLDRCQUFhQSxLQUFLLENBQUNDLEVBQW5CLFNBQXpCO0FBQXNELE1BQUEsTUFBTSxFQUFFSCxRQUE5RDtBQUF3RSxNQUFBLE9BQU8sRUFBRUM7QUFBakYsb0JBQ0UsZ0NBQUMsS0FBRCxDQUFPLGFBQVA7QUFBcUIsTUFBQSxNQUFNLEVBQUM7QUFBNUIsTUFERixlQUVFLGdDQUFDLDBCQUFEO0FBQVMsTUFBQSxFQUFFLFlBQUtDLEtBQUssQ0FBQ0MsRUFBWCxTQUFYO0FBQWdDLE1BQUEsTUFBTSxFQUFDLE9BQXZDO0FBQStDLE1BQUEsU0FBUyxFQUFFLEdBQTFEO0FBQStELE1BQUEsS0FBSyxFQUFDO0FBQXJFLG9CQUNFLDJEQUNFLGdDQUFDLDhCQUFEO0FBQWtCLE1BQUEsRUFBRSxFQUFFRCxLQUFLLENBQUNFLEtBQU4sSUFBZUYsS0FBSyxDQUFDQztBQUEzQyxNQURGLENBREYsQ0FGRixDQUR3QztBQUFBLEdBQTFDOztBQVdBLFNBQU9KLFFBQVA7QUFDRDs7ZUFFY0QsZSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7VG9vbHRpcH0gZnJvbSAnLi4vY29tbW9uL3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IHtCYXNlUHJvcHN9IGZyb20gJy4uL2NvbW1vbi9pY29ucyc7XG5cbnR5cGUgU3R5bGVkUGFuZWxUYWJQcm9wcyA9IHtcbiAgYWN0aXZlPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIFBhbmVsSXRlbSA9IHtcbiAgaWQ6IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZztcbiAgaWNvbkNvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxQYXJ0aWFsPEJhc2VQcm9wcz4+O1xufTtcblxuZXhwb3J0IHR5cGUgUGFuZWxUYWJQcm9wcyA9IHtcbiAgaXNBY3RpdmU6IGJvb2xlYW47XG4gIHBhbmVsOiBQYW5lbEl0ZW07XG4gIG9uQ2xpY2s6IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRQYW5lbFRhYiA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdzaWRlLXBhbmVsX190YWInXG59KTxTdHlsZWRQYW5lbFRhYlByb3BzPmBcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuICBib3JkZXItYm90dG9tLXN0eWxlOiBzb2xpZDtcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMnB4O1xuICBib3JkZXItYm90dG9tLWNvbG9yOiAke3Byb3BzID0+XG4gICAgcHJvcHMuYWN0aXZlID8gcHJvcHMudGhlbWUucGFuZWxUb2dnbGVCb3JkZXJDb2xvciA6ICd0cmFuc3BhcmVudCd9O1xuICBjb2xvcjogJHtwcm9wcyA9PiAocHJvcHMuYWN0aXZlID8gcHJvcHMudGhlbWUuc3VidGV4dENvbG9yQWN0aXZlIDogcHJvcHMudGhlbWUucGFuZWxUYWJDb2xvcil9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luLXJpZ2h0OiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnBhbmVsVG9nZ2xlTWFyZ2luUmlnaHR9cHg7XG4gIHBhZGRpbmctYm90dG9tOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnBhbmVsVG9nZ2xlQm90dG9tUGFkZGluZ31weDtcbiAgd2lkdGg6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUucGFuZWxUYWJXaWR0aH07XG5cbiAgOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudGV4dENvbG9ySGx9O1xuICB9XG5gO1xuXG5leHBvcnQgZnVuY3Rpb24gUGFuZWxUYWJGYWN0b3J5KCkge1xuICBjb25zdCBQYW5lbFRhYjogUmVhY3QuRkM8UGFuZWxUYWJQcm9wcz4gPSAoe2lzQWN0aXZlLCBvbkNsaWNrLCBwYW5lbH0pID0+IChcbiAgICA8U3R5bGVkUGFuZWxUYWIgZGF0YS10aXAgZGF0YS1mb3I9e2Ake3BhbmVsLmlkfS1uYXZgfSBhY3RpdmU9e2lzQWN0aXZlfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgIDxwYW5lbC5pY29uQ29tcG9uZW50IGhlaWdodD1cIjIwcHhcIiAvPlxuICAgICAgPFRvb2x0aXAgaWQ9e2Ake3BhbmVsLmlkfS1uYXZgfSBlZmZlY3Q9XCJzb2xpZFwiIGRlbGF5U2hvdz17NTAwfSBwbGFjZT1cImJvdHRvbVwiPlxuICAgICAgICA8c3Bhbj5cbiAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD17cGFuZWwubGFiZWwgfHwgcGFuZWwuaWR9IC8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvVG9vbHRpcD5cbiAgICA8L1N0eWxlZFBhbmVsVGFiPlxuICApO1xuXG4gIHJldHVybiBQYW5lbFRhYjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFuZWxUYWJGYWN0b3J5O1xuIl19