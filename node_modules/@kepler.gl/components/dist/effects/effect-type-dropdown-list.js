"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EffectTypeDropdownListFactory = EffectTypeDropdownListFactory;
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dropdownList = require("../common/item-selector/dropdown-list");

var _templateObject, _templateObject2;

var DropdownListWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  ", ";\n  background-color: ", ";\n  display: flex;\n  flex-wrap: wrap;\n  align-items: stretch;\n  padding: 24px 0 12px 0;\n  max-height: 430px;\n  justify-content: center;\n"])), function (props) {
  return props.theme.dropdownList;
}, function (props) {
  return props.theme.dropdownListBgd;
});

var StyledDropdownListItem = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin: 0px 4px 8px 4px;\n\n  &.disabled {\n    pointer-events: none;\n    opacity: 0.3;\n  }\n\n  :hover {\n    cursor: pointer;\n    .effect-type-selector__item__label {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.effectPanelTextMain;
});

function EffectTypeDropdownListFactory() {
  var EffectTypeDropdownList = function EffectTypeDropdownList(_ref) {
    var onOptionSelected = _ref.onOptionSelected,
        options = _ref.options,
        selectedItems = _ref.selectedItems,
        selectionIndex = _ref.selectionIndex,
        customListItemComponent = _ref.customListItemComponent;
    var onSelectOption = (0, _react.useCallback)(function (e, value) {
      e.preventDefault();
      onOptionSelected(value);
    }, [onOptionSelected]);
    var ListItemComponent = customListItemComponent;
    return /*#__PURE__*/_react["default"].createElement(DropdownListWrapper, {
      className: _dropdownList.classList.list
    }, options.map(function (value, i) {
      return /*#__PURE__*/_react["default"].createElement(StyledDropdownListItem, {
        className: (0, _classnames["default"])('effect-type-selector__item', {
          selected: selectedItems.find(function (it) {
            return it.type === value.type;
          }),
          hover: selectionIndex === i,
          disabled: value.disabled
        }),
        key: "".concat(value.type, "_").concat(i),
        onMouseDown: function onMouseDown(e) {
          return onSelectOption(e, value);
        },
        onClick: function onClick(e) {
          return onSelectOption(e, value);
        }
      }, /*#__PURE__*/_react["default"].createElement(ListItemComponent, {
        value: value,
        isTile: true
      }));
    }));
  };

  return EffectTypeDropdownList;
}

var _default = EffectTypeDropdownListFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lZmZlY3RzL2VmZmVjdC10eXBlLWRyb3Bkb3duLWxpc3QudHN4Il0sIm5hbWVzIjpbIkRyb3Bkb3duTGlzdFdyYXBwZXIiLCJzdHlsZWQiLCJkaXYiLCJwcm9wcyIsInRoZW1lIiwiZHJvcGRvd25MaXN0IiwiZHJvcGRvd25MaXN0QmdkIiwiU3R5bGVkRHJvcGRvd25MaXN0SXRlbSIsImVmZmVjdFBhbmVsVGV4dE1haW4iLCJFZmZlY3RUeXBlRHJvcGRvd25MaXN0RmFjdG9yeSIsIkVmZmVjdFR5cGVEcm9wZG93bkxpc3QiLCJvbk9wdGlvblNlbGVjdGVkIiwib3B0aW9ucyIsInNlbGVjdGVkSXRlbXMiLCJzZWxlY3Rpb25JbmRleCIsImN1c3RvbUxpc3RJdGVtQ29tcG9uZW50Iiwib25TZWxlY3RPcHRpb24iLCJlIiwidmFsdWUiLCJwcmV2ZW50RGVmYXVsdCIsIkxpc3RJdGVtQ29tcG9uZW50IiwiY2xhc3NMaXN0IiwibGlzdCIsIm1hcCIsImkiLCJzZWxlY3RlZCIsImZpbmQiLCJpdCIsInR5cGUiLCJob3ZlciIsImRpc2FibGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBZ0JBLElBQU1BLG1CQUFtQixHQUFHQyw2QkFBT0MsR0FBVix5UUFDckIsVUFBQUMsS0FBSztBQUFBLFNBQUlBLEtBQUssQ0FBQ0MsS0FBTixDQUFZQyxZQUFoQjtBQUFBLENBRGdCLEVBRUgsVUFBQUYsS0FBSztBQUFBLFNBQUlBLEtBQUssQ0FBQ0MsS0FBTixDQUFZRSxlQUFoQjtBQUFBLENBRkYsQ0FBekI7O0FBV0EsSUFBTUMsc0JBQXNCLEdBQUdOLDZCQUFPQyxHQUFWLDBTQVdiLFVBQUFDLEtBQUs7QUFBQSxTQUFJQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUksbUJBQWhCO0FBQUEsQ0FYUSxDQUE1Qjs7QUFnQk8sU0FBU0MsNkJBQVQsR0FBeUM7QUFDOUMsTUFBTUMsc0JBQTZELEdBQUcsU0FBaEVBLHNCQUFnRSxPQU1uQztBQUFBLFFBTGpDQyxnQkFLaUMsUUFMakNBLGdCQUtpQztBQUFBLFFBSmpDQyxPQUlpQyxRQUpqQ0EsT0FJaUM7QUFBQSxRQUhqQ0MsYUFHaUMsUUFIakNBLGFBR2lDO0FBQUEsUUFGakNDLGNBRWlDLFFBRmpDQSxjQUVpQztBQUFBLFFBRGpDQyx1QkFDaUMsUUFEakNBLHVCQUNpQztBQUNqQyxRQUFNQyxjQUFjLEdBQUcsd0JBQ3JCLFVBQUNDLENBQUQsRUFBSUMsS0FBSixFQUFjO0FBQ1pELE1BQUFBLENBQUMsQ0FBQ0UsY0FBRjtBQUNBUixNQUFBQSxnQkFBZ0IsQ0FBQ08sS0FBRCxDQUFoQjtBQUNELEtBSm9CLEVBS3JCLENBQUNQLGdCQUFELENBTHFCLENBQXZCO0FBUUEsUUFBTVMsaUJBQWlCLEdBQUdMLHVCQUExQjtBQUVBLHdCQUNFLGdDQUFDLG1CQUFEO0FBQXFCLE1BQUEsU0FBUyxFQUFFTSx3QkFBVUM7QUFBMUMsT0FDR1YsT0FBTyxDQUFDVyxHQUFSLENBQVksVUFBQ0wsS0FBRCxFQUFRTSxDQUFSO0FBQUEsMEJBQ1gsZ0NBQUMsc0JBQUQ7QUFDRSxRQUFBLFNBQVMsRUFBRSw0QkFBVyw0QkFBWCxFQUF5QztBQUNsREMsVUFBQUEsUUFBUSxFQUFFWixhQUFhLENBQUNhLElBQWQsQ0FBbUIsVUFBQUMsRUFBRTtBQUFBLG1CQUFJQSxFQUFFLENBQUNDLElBQUgsS0FBWVYsS0FBSyxDQUFDVSxJQUF0QjtBQUFBLFdBQXJCLENBRHdDO0FBRWxEQyxVQUFBQSxLQUFLLEVBQUVmLGNBQWMsS0FBS1UsQ0FGd0I7QUFHbERNLFVBQUFBLFFBQVEsRUFBRVosS0FBSyxDQUFDWTtBQUhrQyxTQUF6QyxDQURiO0FBTUUsUUFBQSxHQUFHLFlBQUtaLEtBQUssQ0FBQ1UsSUFBWCxjQUFtQkosQ0FBbkIsQ0FOTDtBQU9FLFFBQUEsV0FBVyxFQUFFLHFCQUFBUCxDQUFDO0FBQUEsaUJBQUlELGNBQWMsQ0FBQ0MsQ0FBRCxFQUFJQyxLQUFKLENBQWxCO0FBQUEsU0FQaEI7QUFRRSxRQUFBLE9BQU8sRUFBRSxpQkFBQUQsQ0FBQztBQUFBLGlCQUFJRCxjQUFjLENBQUNDLENBQUQsRUFBSUMsS0FBSixDQUFsQjtBQUFBO0FBUlosc0JBVUUsZ0NBQUMsaUJBQUQ7QUFBbUIsUUFBQSxLQUFLLEVBQUVBLEtBQTFCO0FBQWlDLFFBQUEsTUFBTTtBQUF2QyxRQVZGLENBRFc7QUFBQSxLQUFaLENBREgsQ0FERjtBQWtCRCxHQW5DRDs7QUFxQ0EsU0FBT1Isc0JBQVA7QUFDRDs7ZUFFY0QsNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHtjbGFzc0xpc3R9IGZyb20gJy4uL2NvbW1vbi9pdGVtLXNlbGVjdG9yL2Ryb3Bkb3duLWxpc3QnO1xuXG5leHBvcnQgdHlwZSBFZmZlY3RUeXBlRHJvcGRvd25MaXN0SXRlbSA9IHtcbiAgdHlwZTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRpc2FibGVkOiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgRWZmZWN0VHlwZURyb3Bkb3duTGlzdFByb3BzID0ge1xuICBvbk9wdGlvblNlbGVjdGVkOiAoc3RyaW5nKSA9PiB2b2lkO1xuICBvcHRpb25zOiBFZmZlY3RUeXBlRHJvcGRvd25MaXN0SXRlbVtdO1xuICBzZWxlY3RlZEl0ZW1zOiBFZmZlY3RUeXBlRHJvcGRvd25MaXN0SXRlbVtdO1xuICBzZWxlY3Rpb25JbmRleDogbnVtYmVyO1xuICBjdXN0b21MaXN0SXRlbUNvbXBvbmVudDogUmVhY3QuRkM8e3ZhbHVlOiBFZmZlY3RUeXBlRHJvcGRvd25MaXN0SXRlbTsgaXNUaWxlPzogYm9vbGVhbn0+O1xufTtcblxuY29uc3QgRHJvcGRvd25MaXN0V3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuZHJvcGRvd25MaXN0fTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5kcm9wZG93bkxpc3RCZ2R9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICBwYWRkaW5nOiAyNHB4IDAgMTJweCAwO1xuICBtYXgtaGVpZ2h0OiA0MzBweDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5gO1xuXG5jb25zdCBTdHlsZWREcm9wZG93bkxpc3RJdGVtID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luOiAwcHggNHB4IDhweCA0cHg7XG5cbiAgJi5kaXNhYmxlZCB7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgb3BhY2l0eTogMC4zO1xuICB9XG5cbiAgOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgLmVmZmVjdC10eXBlLXNlbGVjdG9yX19pdGVtX19sYWJlbCB7XG4gICAgICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5lZmZlY3RQYW5lbFRleHRNYWlufTtcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBmdW5jdGlvbiBFZmZlY3RUeXBlRHJvcGRvd25MaXN0RmFjdG9yeSgpIHtcbiAgY29uc3QgRWZmZWN0VHlwZURyb3Bkb3duTGlzdDogUmVhY3QuRkM8RWZmZWN0VHlwZURyb3Bkb3duTGlzdFByb3BzPiA9ICh7XG4gICAgb25PcHRpb25TZWxlY3RlZCxcbiAgICBvcHRpb25zLFxuICAgIHNlbGVjdGVkSXRlbXMsXG4gICAgc2VsZWN0aW9uSW5kZXgsXG4gICAgY3VzdG9tTGlzdEl0ZW1Db21wb25lbnRcbiAgfTogRWZmZWN0VHlwZURyb3Bkb3duTGlzdFByb3BzKSA9PiB7XG4gICAgY29uc3Qgb25TZWxlY3RPcHRpb24gPSB1c2VDYWxsYmFjayhcbiAgICAgIChlLCB2YWx1ZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uT3B0aW9uU2VsZWN0ZWQodmFsdWUpO1xuICAgICAgfSxcbiAgICAgIFtvbk9wdGlvblNlbGVjdGVkXVxuICAgICk7XG5cbiAgICBjb25zdCBMaXN0SXRlbUNvbXBvbmVudCA9IGN1c3RvbUxpc3RJdGVtQ29tcG9uZW50O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxEcm9wZG93bkxpc3RXcmFwcGVyIGNsYXNzTmFtZT17Y2xhc3NMaXN0Lmxpc3R9PlxuICAgICAgICB7b3B0aW9ucy5tYXAoKHZhbHVlLCBpKSA9PiAoXG4gICAgICAgICAgPFN0eWxlZERyb3Bkb3duTGlzdEl0ZW1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZWZmZWN0LXR5cGUtc2VsZWN0b3JfX2l0ZW0nLCB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZEl0ZW1zLmZpbmQoaXQgPT4gaXQudHlwZSA9PT0gdmFsdWUudHlwZSksXG4gICAgICAgICAgICAgIGhvdmVyOiBzZWxlY3Rpb25JbmRleCA9PT0gaSxcbiAgICAgICAgICAgICAgZGlzYWJsZWQ6IHZhbHVlLmRpc2FibGVkXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIGtleT17YCR7dmFsdWUudHlwZX1fJHtpfWB9XG4gICAgICAgICAgICBvbk1vdXNlRG93bj17ZSA9PiBvblNlbGVjdE9wdGlvbihlLCB2YWx1ZSl9XG4gICAgICAgICAgICBvbkNsaWNrPXtlID0+IG9uU2VsZWN0T3B0aW9uKGUsIHZhbHVlKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8TGlzdEl0ZW1Db21wb25lbnQgdmFsdWU9e3ZhbHVlfSBpc1RpbGUgLz5cbiAgICAgICAgICA8L1N0eWxlZERyb3Bkb3duTGlzdEl0ZW0+XG4gICAgICAgICkpfVxuICAgICAgPC9Ecm9wZG93bkxpc3RXcmFwcGVyPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIEVmZmVjdFR5cGVEcm9wZG93bkxpc3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVmZmVjdFR5cGVEcm9wZG93bkxpc3RGYWN0b3J5O1xuIl19