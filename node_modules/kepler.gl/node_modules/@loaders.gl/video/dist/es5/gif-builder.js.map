{"version":3,"sources":["../../src/gif-builder.js"],"names":["GIF_BUILDER_OPTIONS","source","width","height","crossOrigin","progressCallback","captureProgress","completeCallback","numWorkers","sampleInterval","interval","offset","numFrames","frameDuration","filter","waterMark","waterMarkHeight","waterMarkWidth","waterMarkXCoordinate","waterMarkYCoordinate","text","showFrameText","fontWeight","fontSize","minFontSize","resizeFont","fontFamily","fontColor","textAlign","textBaseline","textXCoordinate","textYCoordinate","webcamVideoElement","keepCameraOn","cameraStream","saveRenderingContexts","savedRenderingContexts","GIFBuilder","id","name","extensions","mimeType","builder","options","files","gifshot","file","initialize","push","_cleanOptions","images","video","length","Error","_createGIF","Promise","resolve","reject","createGIF","result","error","errorMsg","console","debug","image","gifWidth","gifHeight","warn"],"mappings":"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","sourcesContent":["// A GIFBuilder based on the gifshot module\nimport assert from './lib/utils/assert';\nimport gifshot from './libs/gifshot'; // TODO - load dynamically to avoid bloating\n\n// These are gifshot module options\nconst GIF_BUILDER_OPTIONS = {\n  source: 'images',\n  width: 200, // Desired width of the image\n  height: 200, // Desired height of the image\n\n  crossOrigin: 'Anonymous', // Options are 'Anonymous', 'use-credentials', or a falsy value to not set a CORS attribute.\n\n  // CALLBACKS\n  progressCallback: captureProgress => {}, // Callback that provides the current progress of the current image\n  completeCallback: () => {}, // Callback function that is called when the current image is completed\n\n  // QUALITY SETTINGS\n  numWorkers: 2, // how many web workers to use to process the animated GIF frames. Default is 2.\n  sampleInterval: 10, // pixels to skip when creating the palette. Default is 10. Less is better, but slower.\n  interval: 0.1, // The amount of time (in seconds) to wait between each frame capture\n  offset: null, // The amount of time (in seconds) to start capturing the GIF (only for HTML5 videos)\n  numFrames: 10, // The number of frames to use to create the animated GIF. Note: Each frame is captured every 100 milliseconds of a video and every ms for existing images\n  frameDuration: 1, // The amount of time (10 = 1s) to stay on each frame\n\n  // CSS FILTER OPTIONS\n  filter: '', // CSS filter that will be applied to the image (eg. blur(5px))\n\n  // WATERMARK OPTIONS\n  waterMark: null, // If an image is given here, it will be stamped on top of the GIF frames\n  waterMarkHeight: null, // Height of the waterMark\n  waterMarkWidth: null, // Height of the waterMark\n  waterMarkXCoordinate: 1, // The X (horizontal) Coordinate of the watermark image\n  waterMarkYCoordinate: 1, // The Y (vertical) Coordinate of the watermark image\n\n  // TEXT OPTIONS\n  text: '', // The text that covers the animated GIF\n  showFrameText: true, // If frame-specific text is supplied with the image array, you can force to not be displayed\n  fontWeight: 'normal', // The font weight of the text that covers the animated GIF\n  fontSize: '16px', // The font size of the text that covers the animated GIF\n  minFontSize: '10px', // The minimum font size of the text that covers the animated GIF\n  resizeFont: false, // Whether or not the animated GIF text will be resized to fit within the GIF container\n  fontFamily: 'sans-serif', // The font family of the text that covers the animated GIF\n  fontColor: '#ffffff', // The font color of the text that covers the animated GIF\n  textAlign: 'center', // The horizontal text alignment of the text that covers the animated GIF\n  textBaseline: 'bottom', // The vertical text alignment of the text that covers the animated GIF\n  textXCoordinate: null, // The X (horizontal) Coordinate of the text that covers the animated GIF\n  textYCoordinate: null, // The Y (vertical) Coordinate of the text that covers the animated GIF\n\n  // ADVANCED OPTIONS\n\n  // WEBCAM CAPTURE OPTIONS\n  webcamVideoElement: null, // You can pass an existing video element to use for the webcam GIF creation process,\n  keepCameraOn: false, // Whether or not you would like the user's camera to stay on after the GIF is created\n  cameraStream: null, // Expects a cameraStream Media object\n\n  // CANVAS OPTIMIZATION OPTIONS\n  saveRenderingContexts: false, // Whether or not you would like to save all of the canvas image binary data\n  savedRenderingContexts: [] // Array of canvas image data\n};\n\nexport default class GIFBuilder {\n  static get properties() {\n    return {\n      id: 'gif',\n      name: 'GIF',\n      extensions: ['gif'],\n      mimeType: 'image/gif',\n      builder: GIFBuilder,\n      options: GIF_BUILDER_OPTIONS\n    };\n  }\n\n  constructor(options) {\n    this.options = {...options};\n    this.source = options.source;\n    delete options.source;\n\n    // Allow files to be added\n    this.files = [];\n\n    // Expose the gifshot module so that the full gifshot API is available to apps (Experimental)\n    this.gifshot = gifshot;\n  }\n\n  async initialize(options) {\n    // Expose the gifshot module so that the full gifshot API is available to apps (Experimental)\n    // this.gifshot = await loadGifshotModule(options);\n  }\n\n  async add(file) {\n    await this.initialize();\n    this.files.push(file);\n  }\n\n  async build() {\n    await this.initialize();\n    this._cleanOptions(this.options);\n\n    switch (this.source) {\n      case 'images':\n        this.options.images = this.files;\n        break;\n      case 'video':\n        this.options.video = this.files;\n        break;\n      case 'webcam':\n        assert(this.files.length === 0);\n        break;\n      default:\n        throw new Error('GIFBuilder: invalid source');\n    }\n\n    return await this._createGIF();\n  }\n\n  // PRIVATE\n\n  async _createGIF() {\n    return new Promise((resolve, reject) => {\n      this.gifshot.createGIF(this.options, result => {\n        // callback object properties\n        // --------------------------\n        // image - Base 64 image\n        // cameraStream - The webRTC MediaStream object\n        // error - Boolean that determines if an error occurred\n        // errorCode - Helpful error label\n        // errorMsg - Helpful error message\n        // savedRenderingContexts - An array of canvas image data (will only be set if the saveRenderingContexts option was used)\n\n        if (result.error) {\n          reject(result.errorMsg);\n          return;\n        }\n\n        // image - Base 64 image\n        console.debug(result.image); // eslint-disable-line\n        resolve(result.image);\n\n        // var image = obj.image,\n        // animatedImage = document.createElement('img');\n        // animatedImage.src = image;\n        // document.body.appendChild(animatedImage);\n      });\n    });\n  }\n\n  // Remove some gifshot options\n  _cleanOptions(options) {\n    if (options.video || options.images || options.gifWidth || options.gifHeight) {\n      console.warn('GIFBuilder: ignoring options'); // eslint-disable-line\n    }\n\n    // We control these through options.source instead\n    delete options.video;\n    delete options.images;\n\n    // Use width/height props (to standardize across builders)\n    options.gifWidth = options.width;\n    options.gifHeight = options.height;\n    delete options.width;\n    delete options.height;\n  }\n}\n"],"file":"gif-builder.js"}