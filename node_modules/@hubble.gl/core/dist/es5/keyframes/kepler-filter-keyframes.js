"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.timeRangeKeyframes = timeRangeKeyframes;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("./utils");

var _keyframes = _interopRequireDefault(require("./keyframes"));

var _easings = require("./easings");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function getKeyFramesFree(filter) {
  var delta = filter.value[1] - filter.value[0];
  return {
    keyframes: [{
      value: [filter.domain[0], filter.domain[0] + delta]
    }, {
      value: [filter.domain[1] - delta, filter.domain[1]]
    }],
    easings: _easings.linear
  };
}

function timeRangeKeyframes(_ref) {
  var filter = _ref.filter,
      timings = _ref.timings;

  if (filter.type !== 'timeRange') {
    throw new Error("filter type must be 'timeRange'.'");
  }

  var duration = timings[1] - timings[0];

  switch (filter.animationWindow) {
    default:
    case 'free':
      {
        return getKeyFramesFree(filter);
      }

    case 'incremental':
      {
        return {
          keyframes: [{
            value: [filter.value[0], filter.value[0] + 1]
          }, {
            value: [filter.value[0], filter.domain[1]]
          }],
          easings: _easings.linear
        };
      }

    case 'point':
      {
        return {
          keyframes: [{
            value: filter.domain[0]
          }, {
            value: filter.domain[1]
          }],
          easings: _easings.linear
        };
      }

    case 'interval':
      {
        var bins = filter.bins,
            plotType = filter.plotType;
        var interval = plotType.interval;

        if (!interval || !bins || Object.keys(bins).length === 0 || !Object.values(bins)[0][interval]) {
          return getKeyFramesFree(filter);
        }

        var intervalBins = Object.values(bins)[0][interval];
        var delta = Math.round(duration / intervalBins.length);
        return {
          timings: intervalBins.map(function (_, idx) {
            return timings[0] + delta * idx;
          }),
          keyframes: intervalBins.map(function (bin) {
            return {
              value: [bin.x0, bin.x1]
            };
          }),
          easings: _easings.hold
        };
      }
  }
}

var KeplerFilterKeyframes = function (_Keyframes) {
  (0, _inherits2.default)(KeplerFilterKeyframes, _Keyframes);

  var _super = _createSuper(KeplerFilterKeyframes);

  function KeplerFilterKeyframes(_ref2) {
    var _this;

    var filter = _ref2.filter,
        filterIdx = _ref2.filterIdx,
        timings = _ref2.timings,
        keyframes = _ref2.keyframes,
        easings = _ref2.easings,
        interpolators = _ref2.interpolators,
        _ref2$getTimeRangeFil = _ref2.getTimeRangeFilterKeyframes,
        getTimeRangeFilterKeyframes = _ref2$getTimeRangeFil === void 0 ? undefined : _ref2$getTimeRangeFil;
    (0, _classCallCheck2.default)(this, KeplerFilterKeyframes);

    if (filter.type === 'input') {
      throw new Error("filter type 'input' is not supported.");
    }

    _this = _super.call(this, KeplerFilterKeyframes._processParams({
      filter: filter,
      timings: timings,
      keyframes: keyframes,
      easings: easings,
      interpolators: interpolators,
      getTimeRangeFilterKeyframes: getTimeRangeFilterKeyframes
    }));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "id", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "filterIdx", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getTimeRangeFilterKeyframes", void 0);
    _this.id = filter.id;
    _this.type = filter.type;
    _this.animationWindow = filter.animationWindow;
    _this.filterIdx = filterIdx;
    _this.getTimeRangeFilterKeyframes = getTimeRangeFilterKeyframes;
    return _this;
  }

  (0, _createClass2.default)(KeplerFilterKeyframes, [{
    key: "set",
    value: function set(_ref3) {
      var _ref3$filter = _ref3.filter,
          filter = _ref3$filter === void 0 ? undefined : _ref3$filter,
          _ref3$filterIdx = _ref3.filterIdx,
          filterIdx = _ref3$filterIdx === void 0 ? undefined : _ref3$filterIdx,
          timings = _ref3.timings,
          keyframes = _ref3.keyframes,
          easings = _ref3.easings,
          interpolators = _ref3.interpolators;

      if (filter && filterIdx) {
        this.id = filter.id;
        this.type = filter.type;
        this.animationWindow = filter.animationWindow;
        this.filterIdx = filterIdx;
      }

      (0, _get2.default)((0, _getPrototypeOf2.default)(KeplerFilterKeyframes.prototype), "set", this).call(this, KeplerFilterKeyframes._processParams({
        filter: filter,
        timings: timings,
        keyframes: keyframes,
        easings: easings,
        interpolators: interpolators,
        getTimeRangeFilterKeyframes: this.getTimeRangeFilterKeyframes
      }));
    }
  }, {
    key: "getFrame",
    value: function getFrame() {
      var factor = this.factor;
      var start = this.getStartData();
      var end = this.getEndData();

      if (['select', 'multiSelect', 'polygon'].includes(this.type)) {
        return start.value;
      }

      if (this.type === 'range') {
        return [(0, _utils.factorInterpolator)(start.value[0], end.value[0], end.ease)(factor), (0, _utils.factorInterpolator)(start.value[1], end.value[1], end.ease)(factor)];
      }

      if (this.type === 'timeRange') {
        switch (this.animationWindow) {
          case 'free':
          case 'incremental':
            {
              return [(0, _utils.factorInterpolator)(start.value[0], end.value[0], end.ease)(factor), (0, _utils.factorInterpolator)(start.value[1], end.value[1], end.ease)(factor)];
            }

          case 'point':
            {
              return (0, _utils.factorInterpolator)(start.value, end.value, end.ease)(factor);
            }

          case 'interval':
          default:
            {
              return start.value;
            }
        }
      }

      return (0, _get2.default)((0, _getPrototypeOf2.default)(KeplerFilterKeyframes.prototype), "getFrame", this).call(this);
    }
  }], [{
    key: "_processParams",
    value: function _processParams(_ref4) {
      var _ref4$filter = _ref4.filter,
          filter = _ref4$filter === void 0 ? undefined : _ref4$filter,
          timings = _ref4.timings,
          keyframes = _ref4.keyframes,
          easings = _ref4.easings,
          interpolators = _ref4.interpolators,
          _ref4$getTimeRangeFil = _ref4.getTimeRangeFilterKeyframes,
          getTimeRangeFilterKeyframes = _ref4$getTimeRangeFil === void 0 ? undefined : _ref4$getTimeRangeFil;
      var params = {
        features: ['value'],
        timings: timings,
        keyframes: keyframes,
        easings: easings,
        interpolators: interpolators
      };

      if (filter && filter.type === 'timeRange' && keyframes === undefined) {
        if (timings.length !== 2) throw new Error('[start, end] timings required.');
        params = _objectSpread(_objectSpread({}, params), getTimeRangeFilterKeyframes ? getTimeRangeFilterKeyframes({
          filter: filter,
          timings: timings
        }) : timeRangeKeyframes({
          filter: filter,
          timings: timings
        }));
      }

      return params;
    }
  }]);
  return KeplerFilterKeyframes;
}(_keyframes.default);

var _default = KeplerFilterKeyframes;
exports.default = _default;
//# sourceMappingURL=kepler-filter-keyframes.js.map