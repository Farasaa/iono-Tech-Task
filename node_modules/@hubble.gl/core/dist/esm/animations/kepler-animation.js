import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { CameraKeyframes, KeplerFilterKeyframes, KeplerLayerKeyframes, KeplerTripKeyframes } from '../keyframes';
import Animation from './animation';

function noop() {}

export function findLayer(_ref) {
  let {
    layers,
    layerKeyframe
  } = _ref;
  return layers.find(layer => layer.id === layerKeyframe.id) || layers.find(layer => layer.config.label === layerKeyframe.label);
}
export function findFilterIdx(_ref2) {
  let {
    filters,
    filterKeyframe
  } = _ref2;
  return Number.isFinite(filterKeyframe.filterIdx) ? filterKeyframe.filterIdx : filters.findIndex(filter => filter.id === filterKeyframe.id);
}
export default class KeplerAnimation extends Animation {
  constructor(_ref3) {
    let {
      id = 'kepler',
      layers = [],
      layerKeyframes = [],
      filters = [],
      filterKeyframes = [],
      getTimeRangeFilterKeyframes = undefined,
      animationConfig = undefined,
      tripKeyframe = undefined,
      cameraKeyframe = undefined,
      onTripFrameUpdate = noop,
      onFilterFrameUpdate = noop,
      onLayerFrameUpdate = noop,
      onCameraFrameUpdate = noop
    } = _ref3;
    super({
      id
    });

    _defineProperty(this, "cameraKeyframe", void 0);

    _defineProperty(this, "layerKeyframes", {});

    _defineProperty(this, "filterKeyframes", {});

    _defineProperty(this, "tripKeyframe", undefined);

    this.onTripFrameUpdate = onTripFrameUpdate;
    this.onFilterFrameUpdate = onFilterFrameUpdate;
    this.onLayerFrameUpdate = onLayerFrameUpdate;
    this.onCameraFrameUpdate = onCameraFrameUpdate;
    this.layerKeyframes = {};
    this.filterKeyframes = {};
    this.setKeyframes({
      layers,
      layerKeyframes,
      filters,
      filterKeyframes,
      cameraKeyframe,
      animationConfig,
      tripKeyframe,
      getTimeRangeFilterKeyframes
    });
    this.draw();
  }

  setKeyframes(_ref4) {
    let {
      layers = [],
      layerKeyframes = [],
      filters = [],
      filterKeyframes = [],
      getTimeRangeFilterKeyframes = undefined,
      animationConfig = undefined,
      tripKeyframe = undefined,
      cameraKeyframe = undefined,
      timeline = undefined
    } = _ref4;

    if (this.tripKeyframe && tripKeyframe) {
      this.tripKeyframe.set({
        animationConfig,
        ...tripKeyframe
      });
    } else if (tripKeyframe) {
      this.tripKeyframe = new KeplerTripKeyframes({
        animationConfig,
        ...tripKeyframe
      });
      this.unattachedKeyframes.push(this.tripKeyframe);
    }

    if (this.cameraKeyframe && cameraKeyframe) {
      this.cameraKeyframe.set(cameraKeyframe);
    } else if (cameraKeyframe) {
      this.cameraKeyframe = new CameraKeyframes(cameraKeyframe);
      this.unattachedKeyframes.push(this.cameraKeyframe);
    }

    if (layerKeyframes.length > 0) {
      this.layerKeyframes = layerKeyframes.reduce((acc, layerKeyframe) => {
        const layer = findLayer({
          layers,
          layerKeyframe
        });

        if (layer) {
          if (acc[layer.id]) {
            acc[layer.id].set({
              layer,
              ...layerKeyframe
            });
          } else {
            acc[layer.id] = new KeplerLayerKeyframes({
              layer,
              ...layerKeyframe
            });
            this.unattachedKeyframes.push(acc[layer.id]);
          }
        }

        return acc;
      }, this.layerKeyframes);
    }

    if (filterKeyframes.length > 0) {
      this.filterKeyframes = filterKeyframes.reduce((acc, filterKeyframe) => {
        const filterIdx = findFilterIdx({
          filters,
          filterKeyframe
        });
        const filter = filters[filterIdx];

        if (filter) {
          if (acc[filter.id]) {
            acc[filter.id].set({
              filter,
              ...filterKeyframe
            });
          } else {
            acc[filter.id] = new KeplerFilterKeyframes({
              filter,
              filterIdx,
              getTimeRangeFilterKeyframes,
              ...filterKeyframe
            });
            this.unattachedKeyframes.push(acc[filter.id]);
          }
        }

        return acc;
      }, this.filterKeyframes);
    }

    if (timeline) {
      this.attachKeyframes(timeline);
    }
  }

  getKeyframes() {
    return {
      cameraKeyframe: this.cameraKeyframe,
      layerKeyframes: this.layerKeyframes,
      filterKeyframes: this.filterKeyframes,
      tripKeyframe: this.tripKeyframe
    };
  }

  animator(animation) {
    if (animation.cameraKeyframe) {
      animation.onCameraFrameUpdate(animation.cameraKeyframe.getFrame());
    }

    if (animation.tripKeyframe) {
      animation.onTripFrameUpdate(animation.tripKeyframe.getFrame().currentTime);
    }

    for (const filterKeyframe of Object.values(animation.filterKeyframes)) {
      animation.onFilterFrameUpdate(filterKeyframe.filterIdx, 'value', filterKeyframe.getFrame());
    }

    for (const layerKeyframe of Object.values(animation.layerKeyframes)) {
      animation.onLayerFrameUpdate(layerKeyframe.layer, layerKeyframe.getFrame());
    }
  }

}
//# sourceMappingURL=kepler-animation.js.map