"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SidePanelFactory;
exports.StyledSidePanelContent = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _constants = require("@kepler.gl/constants");

var _icons = require("./common/icons");

var _sideBar = _interopRequireDefault(require("./side-panel/side-bar"));

var _panelHeader = _interopRequireDefault(require("./side-panel/panel-header"));

var _panelToggle = _interopRequireDefault(require("./side-panel/panel-toggle"));

var _layerManager = _interopRequireDefault(require("./side-panel/layer-manager"));

var _filterManager = _interopRequireDefault(require("./side-panel/filter-manager"));

var _interactionManager = _interopRequireDefault(require("./side-panel/interaction-manager"));

var _mapManager = _interopRequireDefault(require("./side-panel/map-manager"));

var _customPanel = _interopRequireDefault(require("./side-panel/custom-panel"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodash = _interopRequireDefault(require("lodash.get"));

var _templateObject;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var StyledSidePanelContent = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  ", ";\n  flex-grow: 1;\n  padding: ", "px;\n  overflow-y: scroll;\n  overflow-x: hidden;\n\n  .side-panel__content__inner {\n    display: flex;\n    height: 100%;\n    flex-direction: column;\n  }\n"])), function (props) {
  return props.theme.sidePanelScrollBar;
}, function (props) {
  return props.theme.sidePanelInnerPadding;
});

exports.StyledSidePanelContent = StyledSidePanelContent;
SidePanelFactory.deps = [_sideBar["default"], _panelHeader["default"], _panelToggle["default"], _layerManager["default"], _filterManager["default"], _interactionManager["default"], _mapManager["default"], _customPanel["default"]];
/**
 * Vertical sidebar containing input components for the rendering layers
 */

function SidePanelFactory(Sidebar, PanelHeader, PanelToggle, LayerManager, FilterManager, InteractionManager, MapManager, CustomPanels) {
  // inject components
  var SIDEBAR_COMPONENTS = {
    layer: LayerManager,
    filter: FilterManager,
    interaction: InteractionManager,
    map: MapManager
  };
  var SIDEBAR_ICONS = {
    layer: _icons.Layers,
    filter: _icons.FilterFunnel,
    interaction: _icons.Settings,
    map: _icons.CursorClick
  }; // We should defined sidebar panels here but keeping them for backward compatible

  var fullPanels = _constants.SIDEBAR_PANELS.map(function (component) {
    return _objectSpread(_objectSpread({}, component), {}, {
      component: SIDEBAR_COMPONENTS[component.id],
      iconComponent: SIDEBAR_ICONS[component.id]
    });
  });

  var getCustomPanelProps = (0, _lodash["default"])(CustomPanels, ['defaultProps', 'getProps']) || function () {
    return {};
  }; // eslint-disable-next-line max-statements


  var SidePanel = function SidePanel(props) {
    var appName = props.appName,
        appWebsite = props.appWebsite,
        _props$availableProvi = props.availableProviders,
        availableProviders = _props$availableProvi === void 0 ? {} : _props$availableProvi,
        datasets = props.datasets,
        filters = props.filters,
        layers = props.layers,
        layerBlending = props.layerBlending,
        overlayBlending = props.overlayBlending,
        layerClasses = props.layerClasses,
        layerOrder = props.layerOrder,
        interactionConfig = props.interactionConfig,
        _props$panels = props.panels,
        panels = _props$panels === void 0 ? fullPanels : _props$panels,
        mapInfo = props.mapInfo,
        mapSaved = props.mapSaved,
        mapStateActions = props.mapStateActions,
        mapStyle = props.mapStyle,
        mapStyleActions = props.mapStyleActions,
        onSaveMap = props.onSaveMap,
        uiState = props.uiState,
        uiStateActions = props.uiStateActions,
        visStateActions = props.visStateActions,
        version = props.version,
        width = props.width;
    var openDeleteModal = uiStateActions.openDeleteModal,
        toggleModal = uiStateActions.toggleModal,
        toggleSidePanel = uiStateActions.toggleSidePanel;
    var activeSidePanel = uiState.activeSidePanel;
    var setMapInfo = visStateActions.setMapInfo,
        showDatasetTable = visStateActions.showDatasetTable,
        updateTableColor = visStateActions.updateTableColor;
    var hasShare = availableProviders.hasShare,
        hasStorage = availableProviders.hasStorage;
    var title = mapInfo.title;
    var isOpen = Boolean(activeSidePanel);

    var _onOpenOrClose = (0, _react.useCallback)(function () {
      return toggleSidePanel(activeSidePanel ? '' : 'layer');
    }, [activeSidePanel, toggleSidePanel]);

    var onClickExportImage = (0, _react.useCallback)(function () {
      return toggleModal(_constants.EXPORT_IMAGE_ID);
    }, [toggleModal]);
    var onClickExportData = (0, _react.useCallback)(function () {
      return toggleModal(_constants.EXPORT_DATA_ID);
    }, [toggleModal]);
    var onClickExportMap = (0, _react.useCallback)(function () {
      return toggleModal(_constants.EXPORT_MAP_ID);
    }, [toggleModal]);
    var onClickSaveToStorage = (0, _react.useCallback)(function () {
      return toggleModal(mapSaved ? _constants.OVERWRITE_MAP_ID : _constants.SAVE_MAP_ID);
    }, [mapSaved, toggleModal]);
    var onClickSaveAsToStorage = (0, _react.useCallback)(function () {
      setMapInfo({
        title: "".concat(title || 'Kepler.gl', " (Copy)")
      });
      toggleModal(_constants.SAVE_MAP_ID);
    }, [title, setMapInfo, toggleModal]);
    var onClickShareMap = (0, _react.useCallback)(function () {
      return toggleModal(_constants.SHARE_MAP_ID);
    }, [toggleModal]);
    var onShowDatasetTable = (0, _react.useCallback)(function (dataId) {
      return showDatasetTable(dataId);
    }, [showDatasetTable]);
    var onUpdateTableColor = (0, _react.useCallback)(function (dataId, newColor) {
      return updateTableColor(dataId, newColor);
    }, [updateTableColor]);
    var onShowAddDataModal = (0, _react.useCallback)(function () {
      return toggleModal(_constants.ADD_DATA_ID);
    }, [toggleModal]);
    var onShowAddMapStyleModal = (0, _react.useCallback)(function () {
      return toggleModal(_constants.ADD_MAP_STYLE_ID);
    }, [toggleModal]);
    var onRemoveDataset = (0, _react.useCallback)(function (dataId) {
      return openDeleteModal(dataId);
    }, [openDeleteModal]);
    var currentPanel = (0, _react.useMemo)(function () {
      return panels.find(function (_ref) {
        var id = _ref.id;
        return id === activeSidePanel;
      }) || null;
    }, [activeSidePanel, panels]);
    var customPanelProps = (0, _react.useMemo)(function () {
      return getCustomPanelProps(props);
    }, [props]);
    var PanelComponent = currentPanel === null || currentPanel === void 0 ? void 0 : currentPanel.component;
    return /*#__PURE__*/_react["default"].createElement(Sidebar, {
      width: width,
      isOpen: isOpen,
      shouldShowCollapseButton: uiState.isSidePanelCloseButtonVisible,
      minifiedWidth: 0,
      onOpenOrClose: _onOpenOrClose
    }, /*#__PURE__*/_react["default"].createElement(PanelHeader, {
      appName: appName,
      version: version,
      appWebsite: appWebsite,
      visibleDropdown: uiState.visibleDropdown,
      showExportDropdown: uiStateActions.showExportDropdown,
      hideExportDropdown: uiStateActions.hideExportDropdown,
      onExportImage: onClickExportImage,
      onExportData: onClickExportData,
      onExportMap: onClickExportMap,
      onSaveMap: hasStorage ? onSaveMap : undefined,
      onSaveToStorage: hasStorage ? onClickSaveToStorage : null,
      onSaveAsToStorage: hasStorage && mapSaved ? onClickSaveAsToStorage : null,
      onShareMap: hasShare ? onClickShareMap : null
    }), /*#__PURE__*/_react["default"].createElement(PanelToggle, {
      panels: panels,
      activePanel: activeSidePanel,
      togglePanel: uiStateActions.toggleSidePanel
    }), /*#__PURE__*/_react["default"].createElement(StyledSidePanelContent, {
      className: "side-panel__content"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "side-panel__content__inner"
    }, PanelComponent ? /*#__PURE__*/_react["default"].createElement(PanelComponent, {
      datasets: datasets,
      filters: filters,
      layers: layers,
      layerClasses: layerClasses,
      layerOrder: layerOrder,
      layerBlending: layerBlending,
      overlayBlending: overlayBlending,
      mapStyle: mapStyle,
      mapStyleActions: mapStyleActions,
      mapStateActions: mapStateActions,
      interactionConfig: interactionConfig,
      removeDataset: onRemoveDataset,
      showDatasetTable: onShowDatasetTable,
      updateTableColor: onUpdateTableColor,
      showAddDataModal: onShowAddDataModal,
      showAddMapStyleModal: onShowAddMapStyleModal,
      uiStateActions: uiStateActions,
      visStateActions: visStateActions,
      panelMetadata: currentPanel,
      panelListView: (currentPanel === null || currentPanel === void 0 ? void 0 : currentPanel.id) === 'layer' ? uiState.layerPanelListView : (currentPanel === null || currentPanel === void 0 ? void 0 : currentPanel.id) === 'filter' ? uiState.filterPanelListView : null
    }) : null, /*#__PURE__*/_react["default"].createElement(CustomPanels, (0, _extends2["default"])({}, customPanelProps, {
      activeSidePanel: activeSidePanel,
      updateTableColor: onUpdateTableColor
    })))));
  };

  SidePanel.defaultProps = {
    panels: fullPanels,
    mapInfo: {}
  };
  return SidePanel;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,