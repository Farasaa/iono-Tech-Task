"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clean = clean;
exports.extend = extend;
exports.pad = pad;
exports.stringToUint8 = stringToUint8;
exports.uint8ToBase64 = uint8ToBase64;
var lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'];

function clean(length) {
  var i;
  var buffer = new Uint8Array(length);

  for (i = 0; i < length; i += 1) {
    buffer[i] = 0;
  }

  return buffer;
}

function extend(orig, length, addLength, multipleOf) {
  var newSize = length + addLength;
  var buffer = clean((parseInt(newSize / multipleOf, 10) + 1) * multipleOf);
  buffer.set(orig);
  return buffer;
}

function pad(num, bytes, base) {
  num = num.toString(base || 8);
  return '000000000000'.substr(num.length + 12 - bytes) + num;
}

function stringToUint8(input, out, offset) {
  var i;
  var length;
  out = out || clean(input.length);
  offset = offset || 0;

  for (i = 0, length = input.length; i < length; i += 1) {
    out[offset] = input.charCodeAt(i);
    offset += 1;
  }

  return out;
}

function uint8ToBase64(uint8) {
  var i;
  var extraBytes = uint8.length % 3;
  var output = '';
  var temp;
  var length;

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3f] + lookup[num >> 12 & 0x3f] + lookup[num >> 6 & 0x3f] + lookup[num & 0x3f];
  }

  for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
    temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output += tripletToBase64(temp);
  }

  switch (output.length % 4) {
    case 1:
      output += '=';
      break;

    case 2:
      output += '==';
      break;

    default:
      break;
  }

  return output;
}
//# sourceMappingURL=utils.js.map