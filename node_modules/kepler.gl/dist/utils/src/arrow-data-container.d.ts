import * as arrow from 'apache-arrow';
import { DATA_TYPES as AnalyzerDATA_TYPES } from 'type-analyzer';
import { Field } from '@kepler.gl/types';
import { DataRow, SharedRowOptions } from './data-row';
import { DataContainerInterface, RangeOptions } from './data-container-interface';
declare type ArrowDataContainerInput = {
    cols: arrow.Vector[];
    fields?: Field[];
};
/**
 * A data container where all data is stored in raw Arrow table
 */
export declare class ArrowDataContainer implements DataContainerInterface {
    _cols: arrow.Vector[];
    _numColumns: number;
    _numRows: number;
    _fields: Field[];
    _numChunks: number;
    constructor(data: ArrowDataContainerInput);
    update(updateData: arrow.Vector<any>[]): void;
    numChunks(): number;
    numRows(): number;
    numColumns(): number;
    valueAt(rowIndex: number, columnIndex: number): any;
    row(rowIndex: number, sharedRow?: SharedRowOptions): DataRow;
    rowAsArray(rowIndex: number): any[];
    rows(sharedRow: SharedRowOptions): any;
    column(columnIndex: number): Generator<any, void, unknown>;
    getColumn(columnIndex: number): arrow.Vector;
    getField(columnIndex: number): Field;
    flattenData(): any[][];
    getPlainIndex(): number[];
    map<T>(func: (row: DataRow, index: number) => T, sharedRow?: SharedRowOptions, options?: RangeOptions): T[];
    mapIndex<T>(func: ({ index }: {
        index: any;
    }, dc: DataContainerInterface) => T, options?: RangeOptions): T[];
    find(func: (row: DataRow, index: number) => boolean, sharedRow?: SharedRowOptions): DataRow | undefined;
    reduce<T>(func: (acc: T, row: DataRow, index: number) => T, initialValue: T, sharedRow?: SharedRowOptions): T;
}
/**
 * Convert arrow data type to kepler.gl field types
 *
 * @param arrowType the arrow data type
 * @returns corresponding type in `ALL_FIELD_TYPES`
 */
export declare function arrowDataTypeToFieldType(arrowType: arrow.DataType): string;
/**
 * Convert arrow data type to analyzer type
 *
 * @param arrowType the arrow data type
 * @returns corresponding type in `AnalyzerDATA_TYPES`
 */
export declare function arrowDataTypeToAnalyzerDataType(arrowType: arrow.DataType): typeof AnalyzerDATA_TYPES;
export {};
