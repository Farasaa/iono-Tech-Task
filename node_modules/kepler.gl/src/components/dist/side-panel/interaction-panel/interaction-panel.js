"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _switch = _interopRequireDefault(require("../../common/switch"));

var _panelTitle = _interopRequireDefault(require("../panel-title"));

var _brushConfig = _interopRequireDefault(require("./brush-config"));

var _tooltipConfig = _interopRequireDefault(require("./tooltip-config"));

var _styledComponents2 = require("../../common/styled-components");

var _icons = require("../../common/icons");

var _localization = require("@kepler.gl/localization");

var _templateObject;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var StyledInteractionPanel = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding-bottom: 6px;\n"])));

InteractionPanelFactory.deps = [_tooltipConfig["default"], _brushConfig["default"], _panelTitle["default"]];
var INTERACTION_CONFIG_ICONS = {
  tooltip: _icons.Messages,
  geocoder: _icons.Pin,
  brush: _icons.Crosshairs,
  coordinate: _icons.CursorClick
};

function InteractionPanelFactory(TooltipConfig, BrushConfig, PanelTitle) {
  var InteractionPanel = function InteractionPanel(_ref) {
    var config = _ref.config,
        onConfigChange = _ref.onConfigChange,
        datasets = _ref.datasets,
        setColumnDisplayFormat = _ref.setColumnDisplayFormat,
        _ref$interactionConfi = _ref.interactionConfigIcons,
        interactionConfigIcons = _ref$interactionConfi === void 0 ? INTERACTION_CONFIG_ICONS : _ref$interactionConfi;

    var _useState = (0, _react.useState)(false),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        isConfigActive = _useState2[0],
        setIsConfigAction = _useState2[1];

    var _updateConfig = (0, _react.useCallback)(function (newProp) {
      onConfigChange(_objectSpread(_objectSpread({}, config), newProp));
    }, [onConfigChange, config]);

    var onDisplayFormatChange = (0, _react.useCallback)(function (dataId, column, displayFormat) {
      setColumnDisplayFormat(dataId, (0, _defineProperty2["default"])({}, column, displayFormat));
    }, [setColumnDisplayFormat]);
    var togglePanelActive = (0, _react.useCallback)(function () {
      setIsConfigAction(!isConfigActive);
    }, [setIsConfigAction, isConfigActive]);
    var enabled = config.enabled;
    var toggleEnableConfig = (0, _react.useCallback)(function () {
      _updateConfig({
        enabled: !enabled
      });
    }, [_updateConfig, enabled]);
    var onChange = (0, _react.useCallback)(function (newConfig) {
      return _updateConfig({
        config: newConfig
      });
    }, [_updateConfig]);
    var IconComponent = interactionConfigIcons[config.id];
    var template = null;

    switch (config.id) {
      case 'tooltip':
        template = /*#__PURE__*/_react["default"].createElement(TooltipConfig, {
          datasets: datasets,
          config: config.config,
          onChange: onChange,
          onDisplayFormatChange: onDisplayFormatChange
        });
        break;

      case 'brush':
        template = /*#__PURE__*/_react["default"].createElement(BrushConfig, {
          config: config.config,
          onChange: onChange
        });
        break;

      default:
        break;
    }

    return /*#__PURE__*/_react["default"].createElement(StyledInteractionPanel, {
      className: "interaction-panel"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledPanelHeader, {
      className: "interaction-panel__header",
      onClick: togglePanelActive
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelHeaderContent, {
      className: "interaction-panel__header__content"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "interaction-panel__header__icon icon"
    }, IconComponent ? /*#__PURE__*/_react["default"].createElement(IconComponent, {
      height: "16px"
    }) : null), /*#__PURE__*/_react["default"].createElement("div", {
      className: "interaction-panel__header__title"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelHeaderTitle, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: config.label
    })))), /*#__PURE__*/_react["default"].createElement("div", {
      className: "interaction-panel__header__actions"
    }, /*#__PURE__*/_react["default"].createElement(_switch["default"], {
      checked: config.enabled,
      id: "".concat(config.id, "-toggle"),
      onChange: toggleEnableConfig,
      secondary: true
    }))), config.enabled && template && /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelContent, {
      className: "interaction-panel__content"
    }, template));
  };

  return InteractionPanel;
}

var _default = InteractionPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,