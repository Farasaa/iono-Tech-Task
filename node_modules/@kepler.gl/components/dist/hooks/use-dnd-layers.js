"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _reactRedux = require("react-redux");

var _actions = require("@kepler.gl/actions");

var _constants = require("@kepler.gl/constants");

var _reducers = require("@kepler.gl/reducers");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var useDndLayers = function useDndLayers(layers, layerOrder) {
  var dispatch = (0, _reactRedux.useDispatch)();

  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      activeLayer = _useState2[0],
      setActiveLayer = _useState2[1];

  var onDragStart = (0, _react.useCallback)(function (event) {
    var active = event.active;
    var newActiveLayer = layers.find(function (layer) {
      return layer.id === active.id;
    });

    if (newActiveLayer) {
      setActiveLayer(newActiveLayer);

      if (newActiveLayer !== null && newActiveLayer !== void 0 && newActiveLayer.config.isConfigActive) {
        dispatch((0, _actions.layerConfigChange)(newActiveLayer, {
          isConfigActive: false
        }));
      }
    }
  }, [dispatch, layers]);
  var onDragEnd = (0, _react.useCallback)(function (event) {
    var _over$data, _over$data$current, _over$data$current$in, _over$data$current2;

    var active = event.active,
        over = event.over;
    var activeLayerId = active.id;
    var overType = over === null || over === void 0 ? void 0 : (_over$data = over.data) === null || _over$data === void 0 ? void 0 : (_over$data$current = _over$data.current) === null || _over$data$current === void 0 ? void 0 : _over$data$current.type;

    if (!overType) {
      setActiveLayer(undefined);
      return;
    }

    switch (overType) {
      // moving layers into maps
      case _constants.DROPPABLE_MAP_CONTAINER_TYPE:
        var mapIndex = (_over$data$current$in = (_over$data$current2 = over.data.current) === null || _over$data$current2 === void 0 ? void 0 : _over$data$current2.index) !== null && _over$data$current$in !== void 0 ? _over$data$current$in : 0;
        dispatch((0, _actions.toggleLayerForMap)(mapIndex, activeLayerId));
        break;
      // swaping layers

      case _constants.SORTABLE_LAYER_TYPE:
        var newLayerOrder = (0, _reducers.reorderLayerOrder)(layerOrder, activeLayerId, over.id);
        dispatch((0, _actions.reorderLayer)(newLayerOrder));
        break;
      //  moving layers within side panel

      case _constants.SORTABLE_SIDE_PANEL_TYPE:
        // move layer to the end of the list
        dispatch((0, _actions.reorderLayer)((0, _reducers.reorderLayerOrder)(layerOrder, activeLayerId, layerOrder[layerOrder.length - 1])));
        break;

      default:
        break;
    }

    setActiveLayer(undefined);
  }, [dispatch, layerOrder]);
  return {
    activeLayer: activeLayer,
    onDragStart: onDragStart,
    onDragEnd: onDragEnd
  };
};

var _default = useDndLayers;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2UtZG5kLWxheWVycy50c3giXSwibmFtZXMiOlsidXNlRG5kTGF5ZXJzIiwibGF5ZXJzIiwibGF5ZXJPcmRlciIsImRpc3BhdGNoIiwiYWN0aXZlTGF5ZXIiLCJzZXRBY3RpdmVMYXllciIsIm9uRHJhZ1N0YXJ0IiwiZXZlbnQiLCJhY3RpdmUiLCJuZXdBY3RpdmVMYXllciIsImZpbmQiLCJsYXllciIsImlkIiwiY29uZmlnIiwiaXNDb25maWdBY3RpdmUiLCJvbkRyYWdFbmQiLCJvdmVyIiwiYWN0aXZlTGF5ZXJJZCIsIm92ZXJUeXBlIiwiZGF0YSIsImN1cnJlbnQiLCJ0eXBlIiwidW5kZWZpbmVkIiwiRFJPUFBBQkxFX01BUF9DT05UQUlORVJfVFlQRSIsIm1hcEluZGV4IiwiaW5kZXgiLCJTT1JUQUJMRV9MQVlFUl9UWVBFIiwibmV3TGF5ZXJPcmRlciIsIlNPUlRBQkxFX1NJREVfUEFORUxfVFlQRSIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFLQTs7QUFaQTtBQUNBO0FBb0JBLElBQU1BLFlBQXVFLEdBQUcsU0FBMUVBLFlBQTBFLENBQUNDLE1BQUQsRUFBU0MsVUFBVCxFQUF3QjtBQUN0RyxNQUFNQyxRQUFRLEdBQUcsOEJBQWpCOztBQURzRyxrQkFHeUIsc0JBSHpCO0FBQUE7QUFBQSxNQUcvRkMsV0FIK0Y7QUFBQSxNQUdsRkMsY0FIa0Y7O0FBS3RHLE1BQU1DLFdBQVcsR0FBRyx3QkFDbEIsVUFBQUMsS0FBSyxFQUFJO0FBQUEsUUFDQUMsTUFEQSxHQUNVRCxLQURWLENBQ0FDLE1BREE7QUFFUCxRQUFNQyxjQUFjLEdBQUdSLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZLFVBQUFDLEtBQUs7QUFBQSxhQUFJQSxLQUFLLENBQUNDLEVBQU4sS0FBYUosTUFBTSxDQUFDSSxFQUF4QjtBQUFBLEtBQWpCLENBQXZCOztBQUNBLFFBQUlILGNBQUosRUFBb0I7QUFDbEJKLE1BQUFBLGNBQWMsQ0FBQ0ksY0FBRCxDQUFkOztBQUNBLFVBQUlBLGNBQUosYUFBSUEsY0FBSixlQUFJQSxjQUFjLENBQUVJLE1BQWhCLENBQXVCQyxjQUEzQixFQUEyQztBQUN6Q1gsUUFBQUEsUUFBUSxDQUFDLGdDQUFrQk0sY0FBbEIsRUFBa0M7QUFBQ0ssVUFBQUEsY0FBYyxFQUFFO0FBQWpCLFNBQWxDLENBQUQsQ0FBUjtBQUNEO0FBQ0Y7QUFDRixHQVZpQixFQVdsQixDQUFDWCxRQUFELEVBQVdGLE1BQVgsQ0FYa0IsQ0FBcEI7QUFjQSxNQUFNYyxTQUFTLEdBQUcsd0JBQ2hCLFVBQUFSLEtBQUssRUFBSTtBQUFBOztBQUFBLFFBQ0FDLE1BREEsR0FDZ0JELEtBRGhCLENBQ0FDLE1BREE7QUFBQSxRQUNRUSxJQURSLEdBQ2dCVCxLQURoQixDQUNRUyxJQURSO0FBQUEsUUFHSUMsYUFISixHQUdxQlQsTUFIckIsQ0FHQUksRUFIQTtBQUlQLFFBQU1NLFFBQVEsR0FBR0YsSUFBSCxhQUFHQSxJQUFILHFDQUFHQSxJQUFJLENBQUVHLElBQVQscUVBQUcsV0FBWUMsT0FBZix1REFBRyxtQkFBcUJDLElBQXRDOztBQUVBLFFBQUksQ0FBQ0gsUUFBTCxFQUFlO0FBQ2JiLE1BQUFBLGNBQWMsQ0FBQ2lCLFNBQUQsQ0FBZDtBQUNBO0FBQ0Q7O0FBRUQsWUFBUUosUUFBUjtBQUNFO0FBQ0EsV0FBS0ssdUNBQUw7QUFDRSxZQUFNQyxRQUFRLG1EQUFHUixJQUFJLENBQUNHLElBQUwsQ0FBVUMsT0FBYix3REFBRyxvQkFBbUJLLEtBQXRCLHlFQUErQixDQUE3QztBQUNBdEIsUUFBQUEsUUFBUSxDQUFDLGdDQUFrQnFCLFFBQWxCLEVBQTRCUCxhQUE1QixDQUFELENBQVI7QUFDQTtBQUNGOztBQUNBLFdBQUtTLDhCQUFMO0FBQ0UsWUFBTUMsYUFBYSxHQUFHLGlDQUFrQnpCLFVBQWxCLEVBQThCZSxhQUE5QixFQUE2Q0QsSUFBSSxDQUFDSixFQUFsRCxDQUF0QjtBQUNBVCxRQUFBQSxRQUFRLENBQUMsMkJBQWF3QixhQUFiLENBQUQsQ0FBUjtBQUNBO0FBQ0Y7O0FBQ0EsV0FBS0MsbUNBQUw7QUFDRTtBQUNBekIsUUFBQUEsUUFBUSxDQUNOLDJCQUNFLGlDQUFrQkQsVUFBbEIsRUFBOEJlLGFBQTlCLEVBQTZDZixVQUFVLENBQUNBLFVBQVUsQ0FBQzJCLE1BQVgsR0FBb0IsQ0FBckIsQ0FBdkQsQ0FERixDQURNLENBQVI7QUFLQTs7QUFDRjtBQUNFO0FBckJKOztBQXdCQXhCLElBQUFBLGNBQWMsQ0FBQ2lCLFNBQUQsQ0FBZDtBQUNELEdBckNlLEVBc0NoQixDQUFDbkIsUUFBRCxFQUFXRCxVQUFYLENBdENnQixDQUFsQjtBQXlDQSxTQUFPO0FBQUNFLElBQUFBLFdBQVcsRUFBWEEsV0FBRDtBQUFjRSxJQUFBQSxXQUFXLEVBQVhBLFdBQWQ7QUFBMkJTLElBQUFBLFNBQVMsRUFBVEE7QUFBM0IsR0FBUDtBQUNELENBN0REOztlQStEZWYsWSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7dXNlQ2FsbGJhY2ssIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZURpc3BhdGNofSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge0RyYWdFbmRFdmVudCwgRHJhZ1N0YXJ0RXZlbnR9IGZyb20gJ0BkbmQta2l0L2NvcmUnO1xuaW1wb3J0IHtsYXllckNvbmZpZ0NoYW5nZSwgcmVvcmRlckxheWVyLCB0b2dnbGVMYXllckZvck1hcH0gZnJvbSAnQGtlcGxlci5nbC9hY3Rpb25zJztcbmltcG9ydCB7XG4gIERST1BQQUJMRV9NQVBfQ09OVEFJTkVSX1RZUEUsXG4gIFNPUlRBQkxFX0xBWUVSX1RZUEUsXG4gIFNPUlRBQkxFX1NJREVfUEFORUxfVFlQRVxufSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge3Jlb3JkZXJMYXllck9yZGVyfSBmcm9tICdAa2VwbGVyLmdsL3JlZHVjZXJzJztcbmltcG9ydCB7TGF5ZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvbGF5ZXJzJztcblxudHlwZSBEbmRFZmZlY3RzSG9vayA9IHtcbiAgYWN0aXZlTGF5ZXI6IExheWVyIHwgdW5kZWZpbmVkO1xuICBvbkRyYWdTdGFydDogKGV2ZW50OiBEcmFnU3RhcnRFdmVudCkgPT4gdm9pZDtcbiAgb25EcmFnRW5kOiAoZXZlbnQ6IERyYWdFbmRFdmVudCkgPT4gdm9pZDtcbn07XG5cbmNvbnN0IHVzZURuZExheWVyczogKGxheWVyczogTGF5ZXJbXSwgbGF5ZXJPcmRlcjogc3RyaW5nW10pID0+IERuZEVmZmVjdHNIb29rID0gKGxheWVycywgbGF5ZXJPcmRlcikgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgY29uc3QgW2FjdGl2ZUxheWVyLCBzZXRBY3RpdmVMYXllcl06IFthY3RpdmVFZmZlY3Q6IExheWVyIHwgdW5kZWZpbmVkLCBzZXRBY3RpdmVFZmZlY3Q6IChlZmZlY3Q6IExheWVyIHwgdW5kZWZpbmVkKSA9PiB2b2lkXSA9IHVzZVN0YXRlKCk7XG5cbiAgY29uc3Qgb25EcmFnU3RhcnQgPSB1c2VDYWxsYmFjayhcbiAgICBldmVudCA9PiB7XG4gICAgICBjb25zdCB7YWN0aXZlfSA9IGV2ZW50O1xuICAgICAgY29uc3QgbmV3QWN0aXZlTGF5ZXIgPSBsYXllcnMuZmluZChsYXllciA9PiBsYXllci5pZCA9PT0gYWN0aXZlLmlkKTtcbiAgICAgIGlmIChuZXdBY3RpdmVMYXllcikge1xuICAgICAgICBzZXRBY3RpdmVMYXllcihuZXdBY3RpdmVMYXllcik7XG4gICAgICAgIGlmIChuZXdBY3RpdmVMYXllcj8uY29uZmlnLmlzQ29uZmlnQWN0aXZlKSB7XG4gICAgICAgICAgZGlzcGF0Y2gobGF5ZXJDb25maWdDaGFuZ2UobmV3QWN0aXZlTGF5ZXIsIHtpc0NvbmZpZ0FjdGl2ZTogZmFsc2V9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtkaXNwYXRjaCwgbGF5ZXJzXVxuICApO1xuXG4gIGNvbnN0IG9uRHJhZ0VuZCA9IHVzZUNhbGxiYWNrKFxuICAgIGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHthY3RpdmUsIG92ZXJ9ID0gZXZlbnQ7XG5cbiAgICAgIGNvbnN0IHtpZDogYWN0aXZlTGF5ZXJJZH0gPSBhY3RpdmU7XG4gICAgICBjb25zdCBvdmVyVHlwZSA9IG92ZXI/LmRhdGE/LmN1cnJlbnQ/LnR5cGU7XG5cbiAgICAgIGlmICghb3ZlclR5cGUpIHtcbiAgICAgICAgc2V0QWN0aXZlTGF5ZXIodW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKG92ZXJUeXBlKSB7XG4gICAgICAgIC8vIG1vdmluZyBsYXllcnMgaW50byBtYXBzXG4gICAgICAgIGNhc2UgRFJPUFBBQkxFX01BUF9DT05UQUlORVJfVFlQRTpcbiAgICAgICAgICBjb25zdCBtYXBJbmRleCA9IG92ZXIuZGF0YS5jdXJyZW50Py5pbmRleCA/PyAwO1xuICAgICAgICAgIGRpc3BhdGNoKHRvZ2dsZUxheWVyRm9yTWFwKG1hcEluZGV4LCBhY3RpdmVMYXllcklkKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIHN3YXBpbmcgbGF5ZXJzXG4gICAgICAgIGNhc2UgU09SVEFCTEVfTEFZRVJfVFlQRTpcbiAgICAgICAgICBjb25zdCBuZXdMYXllck9yZGVyID0gcmVvcmRlckxheWVyT3JkZXIobGF5ZXJPcmRlciwgYWN0aXZlTGF5ZXJJZCwgb3Zlci5pZCk7XG4gICAgICAgICAgZGlzcGF0Y2gocmVvcmRlckxheWVyKG5ld0xheWVyT3JkZXIpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gIG1vdmluZyBsYXllcnMgd2l0aGluIHNpZGUgcGFuZWxcbiAgICAgICAgY2FzZSBTT1JUQUJMRV9TSURFX1BBTkVMX1RZUEU6XG4gICAgICAgICAgLy8gbW92ZSBsYXllciB0byB0aGUgZW5kIG9mIHRoZSBsaXN0XG4gICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICByZW9yZGVyTGF5ZXIoXG4gICAgICAgICAgICAgIHJlb3JkZXJMYXllck9yZGVyKGxheWVyT3JkZXIsIGFjdGl2ZUxheWVySWQsIGxheWVyT3JkZXJbbGF5ZXJPcmRlci5sZW5ndGggLSAxXSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBzZXRBY3RpdmVMYXllcih1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgW2Rpc3BhdGNoLCBsYXllck9yZGVyXVxuICApO1xuXG4gIHJldHVybiB7YWN0aXZlTGF5ZXIsIG9uRHJhZ1N0YXJ0LCBvbkRyYWdFbmR9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlRG5kTGF5ZXJzO1xuIl19