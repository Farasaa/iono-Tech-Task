"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExportVideoPanelContainer = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _popmotion = require("popmotion");

var _core = require("@hubble.gl/core");

var _exportVideoPanel = _interopRequireDefault(require("./export-video-panel"));

var _utils = require("./utils");

var _constants = require("./constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ENCODERS = {
  gif: _core.GifEncoder,
  webm: _core.WebMEncoder,
  jpeg: _core.JPEGSequenceEncoder,
  png: _core.PNGSequenceEncoder
};

var ExportVideoPanelContainer = function (_Component) {
  (0, _inherits2["default"])(ExportVideoPanelContainer, _Component);

  var _super = _createSuper(ExportVideoPanelContainer);

  function ExportVideoPanelContainer(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ExportVideoPanelContainer);
    _this = _super.call(this, props);
    _this.setMediaType = _this.setMediaType.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setCameraPreset = _this.setCameraPreset.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setFileName = _this.setFileName.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setResolution = _this.setResolution.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setViewState = _this.setViewState.bind((0, _assertThisInitialized2["default"])(_this));
    _this.getCameraKeyframes = _this.getCameraKeyframes.bind((0, _assertThisInitialized2["default"])(_this));
    _this.getDeckScene = _this.getDeckScene.bind((0, _assertThisInitialized2["default"])(_this));
    _this.onPreviewVideo = _this.onPreviewVideo.bind((0, _assertThisInitialized2["default"])(_this));
    _this.onRenderVideo = _this.onRenderVideo.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setDuration = _this.setDuration.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setViewState = _this.setViewState.bind((0, _assertThisInitialized2["default"])(_this));
    var initialState = props.initialState,
        mapState = props.mapData.mapState,
        glContext = props.glContext;
    _this.state = _objectSpread({
      mediaType: 'gif',
      cameraPreset: 'Orbit (90ยบ)',
      fileName: '',
      resolution: '1280x720',
      durationMs: 1000,
      viewState: mapState,
      adapter: new _core.DeckAdapter(_this.getDeckScene, glContext)
    }, initialState || {});
    return _this;
  }

  (0, _createClass2["default"])(ExportVideoPanelContainer, [{
    key: "getFileName",
    value: function getFileName() {
      var fileName = this.state.fileName;
      if (fileName === '') return _constants.DEFAULT_FILENAME;
      return fileName;
    }
  }, {
    key: "getCanvasSize",
    value: function getCanvasSize() {
      var resolution = this.state.resolution;
      return (0, _constants.getResolutionSetting)(resolution);
    }
  }, {
    key: "getEncoderSettings",
    value: function getEncoderSettings() {
      var fileName = this.getFileName();

      var _this$getCanvasSize = this.getCanvasSize(),
          width = _this$getCanvasSize.width,
          height = _this$getCanvasSize.height;

      return {
        framerate: 30,
        webm: {
          quality: 0.8
        },
        jpeg: {
          quality: 0.8
        },
        gif: {
          sampleInterval: 1000,
          width: width,
          height: height
        },
        filename: fileName
      };
    }
  }, {
    key: "getEncoder",
    value: function getEncoder() {
      var mediaType = this.state.mediaType;
      return ENCODERS[mediaType];
    }
  }, {
    key: "getCameraKeyframes",
    value: function getCameraKeyframes() {
      var prevCamera = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var _this$state = this.state,
          viewState = _this$state.viewState,
          cameraPreset = _this$state.cameraPreset,
          durationMs = _this$state.durationMs;
      var longitude = viewState.longitude,
          latitude = viewState.latitude,
          zoom = viewState.zoom,
          pitch = viewState.pitch,
          bearing = viewState.bearing;
      return new _core.CameraKeyframes({
        timings: [0, durationMs],
        keyframes: [{
          longitude: longitude,
          latitude: latitude,
          zoom: zoom,
          pitch: pitch,
          bearing: bearing
        }, (0, _utils.parseSetCameraType)(cameraPreset, viewState)],
        easings: [_popmotion.easing.easeInOut]
      });
    }
  }, {
    key: "getDeckScene",
    value: function getDeckScene(animationLoop) {
      var durationMs = this.state.durationMs;

      var _this$getCanvasSize2 = this.getCanvasSize(),
          width = _this$getCanvasSize2.width,
          height = _this$getCanvasSize2.height;

      var keyframes = {
        camera: this.getCameraKeyframes()
      };
      var currentCamera = animationLoop.timeline.attachAnimation(keyframes.camera);
      return new _core.DeckScene({
        animationLoop: animationLoop,
        keyframes: keyframes,
        lengthMs: durationMs,
        width: width,
        height: height,
        currentCamera: currentCamera
      });
    }
  }, {
    key: "setStateAndNotify",
    value: function setStateAndNotify(update) {
      var onSettingsChange = this.props.onSettingsChange,
          state = this.state;
      this.setState(_objectSpread(_objectSpread({}, state), update));

      if (onSettingsChange) {
        var mediaType = state.mediaType,
            cameraPreset = state.cameraPreset,
            fileName = state.fileName,
            resolution = state.resolution,
            durationMs = state.durationMs;
        onSettingsChange(_objectSpread({
          mediaType: mediaType,
          cameraPreset: cameraPreset,
          fileName: fileName,
          resolution: resolution,
          durationMs: durationMs
        }, update));
      }
    }
  }, {
    key: "setMediaType",
    value: function setMediaType(mediaType) {
      this.setStateAndNotify({
        mediaType: mediaType
      });
    }
  }, {
    key: "setCameraPreset",
    value: function setCameraPreset(cameraPreset) {
      this.setStateAndNotify({
        cameraPreset: cameraPreset
      });
    }
  }, {
    key: "setFileName",
    value: function setFileName(fileName) {
      this.setStateAndNotify({
        fileName: fileName
      });
    }
  }, {
    key: "setResolution",
    value: function setResolution(resolution) {
      this.setStateAndNotify({
        resolution: resolution
      });
    }
  }, {
    key: "setViewState",
    value: function setViewState(vs) {
      this.setState({
        viewState: vs.viewState
      });
    }
  }, {
    key: "onPreviewVideo",
    value: function onPreviewVideo() {
      var _this2 = this;

      var adapter = this.state.adapter;
      var encoderSettings = this.getEncoderSettings();

      var onStop = function onStop() {
        _this2.forceUpdate();
      };

      adapter.render(_core.PreviewEncoder, encoderSettings, onStop, this.getCameraKeyframes);
    }
  }, {
    key: "onRenderVideo",
    value: function onRenderVideo() {
      var adapter = this.state.adapter;
      var Encoder = this.getEncoder();
      var encoderSettings = this.getEncoderSettings();

      var onStop = function onStop() {};

      adapter.render(Encoder, encoderSettings, onStop, this.getCameraKeyframes);
    }
  }, {
    key: "setDuration",
    value: function setDuration(durationMs) {
      var adapter = this.state.adapter;
      adapter.scene.lengthMs = durationMs;
      this.setStateAndNotify({
        durationMs: durationMs
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          exportVideoWidth = _this$props.exportVideoWidth,
          handleClose = _this$props.handleClose,
          mapData = _this$props.mapData,
          header = _this$props.header;
      var _this$state2 = this.state,
          adapter = _this$state2.adapter,
          durationMs = _this$state2.durationMs,
          mediaType = _this$state2.mediaType,
          cameraPreset = _this$state2.cameraPreset,
          fileName = _this$state2.fileName,
          resolution = _this$state2.resolution,
          viewState = _this$state2.viewState;
      var settingsData = {
        mediaType: mediaType,
        cameraPreset: cameraPreset,
        fileName: fileName,
        resolution: resolution
      };
      var encoderSettings = this.getEncoderSettings();

      var _this$getCanvasSize3 = this.getCanvasSize(),
          width = _this$getCanvasSize3.width,
          height = _this$getCanvasSize3.height;

      return _react["default"].createElement(_exportVideoPanel["default"], {
        exportVideoWidth: exportVideoWidth,
        handleClose: handleClose,
        header: header,
        mapData: mapData,
        viewState: viewState,
        setViewState: this.setViewState,
        settingsData: settingsData,
        setMediaType: this.setMediaType,
        setCameraPreset: this.setCameraPreset,
        setFileName: this.setFileName,
        setResolution: this.setResolution,
        adapter: adapter,
        handlePreviewVideo: this.onPreviewVideo,
        handleRenderVideo: this.onRenderVideo,
        durationMs: durationMs,
        setDuration: this.setDuration,
        frameRate: encoderSettings.framerate,
        resolution: [width, height],
        mediaType: mediaType
      });
    }
  }]);
  return ExportVideoPanelContainer;
}(_react.Component);

exports.ExportVideoPanelContainer = ExportVideoPanelContainer;
ExportVideoPanelContainer.defaultProps = {
  exportVideoWidth: 540,
  header: true,
  glContext: undefined
};
//# sourceMappingURL=export-video-panel-container.js.map