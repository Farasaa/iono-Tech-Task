import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import FrameEncoder from '../frame-encoder';
import TARBuilder from '../tar/tar-builder';
import { pad, canvasToArrayBuffer } from '../utils';
import { encode } from '@loaders.gl/core';
import { ZipWriter } from '@loaders.gl/zip';
const TAR = 'tar';
const ZIP = 'zip';

class PNGSequenceEncoder extends FrameEncoder {
  constructor(settings) {
    super(settings);

    _defineProperty(this, "tarBuilder", void 0);

    _defineProperty(this, "filemap", void 0);

    this.tarBuilder = null;
    this.filemap = {};
    this.options = {};

    if (settings.png) {
      this.options = { ...settings.png
      };
    }

    this.options.archive = this.options.archive || TAR;

    switch (this.options.archive) {
      case TAR:
        {
          this.mimeType = TARBuilder.properties.mimeType;
          this.extension = ".".concat(TARBuilder.properties.extensions[0]);
          break;
        }

      case ZIP:
        {
          this.mimeType = ZipWriter.mimeTypes[0];
          this.extension = ".".concat(ZipWriter.extensions[0]);
          break;
        }

      default:
        {
          throw new Error("Unsupported archive type [zip, tar]: ".concat(this.options.archive));
        }
    }
  }

  start() {
    this.tarBuilder = new TARBuilder({});
    this.filemap = {};
  }

  async add(canvas) {
    const mimeType = 'image/png';
    const extension = '.png';
    const buffer = await canvasToArrayBuffer(canvas, mimeType);

    switch (this.options.archive) {
      case TAR:
        {
          const filename = pad(this.tarBuilder.count) + extension;
          this.tarBuilder.addFile(buffer, filename);
          break;
        }

      case ZIP:
        {
          const filename = pad(Object.keys(this.filemap).length) + extension;
          this.filemap[filename] = buffer;
          break;
        }

      default:
        {
          throw new Error("Unsupported archive type [zip, tar]: ".concat(this.options.archive));
        }
    }
  }

  async save() {
    switch (this.options.archive) {
      case TAR:
        {
          const arrayBuffer = await this.tarBuilder.build();
          return new Blob([arrayBuffer], {
            type: TARBuilder.properties.mimeType
          });
        }

      case ZIP:
        {
          const arrayBuffer = await encode(this.filemap, ZipWriter);
          return new Blob([arrayBuffer], {
            type: ZipWriter.mimeTypes[0]
          });
        }

      default:
        {
          throw new Error("Unsupported archive type [zip, tar]: ".concat(this.options.archive));
        }
    }
  }

}

export default PNGSequenceEncoder;
//# sourceMappingURL=png-sequence-encoder.js.map