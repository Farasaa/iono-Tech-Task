{"version":3,"file":"photo-encoder.js","names":["PhotoEncoder","settings","blob","add","bind","canvas","canvasToArrayBuffer","mimeType","quality","buffer","Blob","type","Promise","resolve","FrameEncoder"],"sources":["../../../../src/encoders/photo/photo-encoder.js"],"sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport FrameEncoder from '../frame-encoder';\nimport {canvasToArrayBuffer} from '../utils';\n\nclass PhotoEncoder extends FrameEncoder {\n  /** @type {Blob} */\n  blob;\n\n  /** @param {import('types').FrameEncoderSettings} settings */\n  constructor(settings) {\n    super(settings);\n    this.blob = null;\n    this.add = this.add.bind(this);\n  }\n\n  /** @param {HTMLCanvasElement} canvas */\n  async add(canvas) {\n    // Adding a frame just overwrites old image\n    const buffer = await canvasToArrayBuffer(canvas, this.mimeType, this.quality);\n    this.blob = new Blob([buffer], {type: this.mimeType});\n    return Promise.resolve();\n  }\n\n  /**\n   * @return {Promise<Blob>}\n   */\n  async save() {\n    return Promise.resolve(this.blob);\n  }\n}\n\nexport default PhotoEncoder;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AACA;;;;;;IAEMA,Y;;;;;EAKJ,sBAAYC,QAAZ,EAAsB;IAAA;;IAAA;IACpB,0BAAMA,QAAN;IADoB;IAEpB,MAAKC,IAAL,GAAY,IAAZ;IACA,MAAKC,GAAL,GAAW,MAAKA,GAAL,CAASC,IAAT,6CAAX;IAHoB;EAIrB;;;;;2EAGD,iBAAUC,MAAV;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAEuB,IAAAC,0BAAA,EAAoBD,MAApB,EAA4B,KAAKE,QAAjC,EAA2C,KAAKC,OAAhD,CAFvB;;cAAA;gBAEQC,MAFR;gBAGE,KAAKP,IAAL,GAAY,IAAIQ,IAAJ,CAAS,CAACD,MAAD,CAAT,EAAmB;kBAACE,IAAI,EAAE,KAAKJ;gBAAZ,CAAnB,CAAZ;gBAHF,iCAISK,OAAO,CAACC,OAAR,EAJT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;4EAUA;QAAA;UAAA;YAAA;cAAA;gBAAA,kCACSD,OAAO,CAACC,OAAR,CAAgB,KAAKX,IAArB,CADT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;EAtByBY,qB;;eA2BZd,Y"}