{"version":3,"file":"category-table.js","names":[],"sources":["../../src/types/category-table.ts"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Schema} from './schema';\nimport type {Batch} from './batch';\nimport type {Feature} from './category-gis';\n\n// Avoid a big dependency, apparently even a type import can pull in a lot of code\n// import type {Table as ApacheArrowTable} from 'apache-arrow';\n\ntype ApacheArrowTable = unknown;\ntype ApacheRecordBatch = unknown;\n\n/** A general table */\nexport type Table =\n  | RowTable\n  | ArrayRowTable\n  | ObjectRowTable\n  | GeoJSONTable\n  | ColumnarTable\n  | ArrowTable;\n\n/** A table organized as an array of rows */\nexport type RowTable = ArrayRowTable | ObjectRowTable | GeoJSONTable;\n\n/** A table organized as an array of rows, each row is an array of values */\nexport type ArrayRowTable = {\n  shape: 'array-row-table';\n  schema?: Schema;\n  data: any[][];\n};\n\n/** A table organized as an array of rows, each row is an object mapping columns to values */\nexport type ObjectRowTable = {\n  shape: 'object-row-table';\n  schema?: Schema;\n  data: {[columnName: string]: any}[];\n};\n\n/**\n * A table organized as an array of rows, each row is a GeoJSON Feature\n * @note For compatibility with GeoJSON, rows are stored in `table.features` instead of `table.data`\n */\nexport type GeoJSONTable = {\n  shape: 'geojson-table';\n  schema?: Schema;\n  /** For compatibility with GeoJSON, the type field must always be set to `FeatureCollection` */\n  type: 'FeatureCollection';\n  /** For compatibility with GeoJSON, rows are stored in `table.features` instead of `table.data` */\n  features: Feature[];\n};\n\n/** A table organized as a map of columns, each column is an array of value */\nexport type ColumnarTable = {\n  shape: 'columnar-table';\n  schema?: Schema;\n  data: {[columnName: string]: ArrayLike<unknown>};\n};\n\n/** A table organized as an Apache Arrow table */\nexport type ArrowTable = {\n  shape: 'arrow-table';\n  schema?: Schema;\n  data: ApacheArrowTable;\n};\n\n/** A collection of tables */\nexport type Tables<TableType = Table> = {\n  shape: 'tables';\n  tables: {name: string; table: TableType}[];\n};\n\n// Batches\n\n/** Batch for a general table */\nexport type TableBatch =\n  | ArrayRowTableBatch\n  | ObjectRowTableBatch\n  | GeoJSONTableBatch\n  | ColumnarTableBatch\n  | ArrowTableBatch;\n\n/** Batch for a table organized as an array of rows, each row is an array of values */\nexport type ArrayRowTableBatch = Batch & {\n  shape: 'array-row-table';\n  schema?: Schema;\n  schemaType?: 'explicit' | 'deduced';\n  data: any[][];\n  length: number;\n};\n\n/** Batch for a table organized as an array of rows, each row is an object mapping columns to values */\nexport type ObjectRowTableBatch = Batch & {\n  shape: 'object-row-table';\n  schema?: Schema;\n  schemaType?: 'explicit' | 'deduced';\n  data: {[columnName: string]: any}[];\n  length: number;\n};\n\n/** Batch for a table organized as an array of rows, each row is an array of values */\nexport type GeoJSONTableBatch = Batch & {\n  shape: 'geojson-table';\n  schema?: Schema;\n  schemaType?: 'explicit' | 'deduced';\n  type: 'FeatureCollection';\n  features: Feature[];\n  length: number;\n};\n\n/** Batch for a table organized as a map of columns, each column is an array of value */\nexport type ColumnarTableBatch = Batch & {\n  shape: 'columnar-table';\n  schemaType?: 'explicit' | 'deduced';\n  schema?: Schema;\n  data: {[columnName: string]: ArrayLike<unknown>};\n  length: number;\n};\n\n/** Batch for a table organized as an Apache Arrow table */\nexport type ArrowTableBatch = Batch & {\n  shape: 'arrow-table';\n  schemaType?: 'explicit' | 'deduced';\n  schema?: Schema;\n  data: ApacheRecordBatch;\n  length: number;\n};\n"],"mappings":""}