"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _rangeFilter = _interopRequireDefault(require("../range-filter"));

var _filterPanelWithFieldSelect = _interopRequireDefault(require("./filter-panel-with-field-select"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
RangeFilterPanelFactory.deps = [_filterPanelWithFieldSelect["default"], _rangeFilter["default"]];

function RangeFilterPanelFactory(FieldPanelWithFieldSelect, RangeFilterComponent) {
  var RangeFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
        datasets = _ref.datasets,
        allAvailableFields = _ref.allAvailableFields,
        filter = _ref.filter,
        removeFilter = _ref.removeFilter,
        setFilter = _ref.setFilter;
    var onSetFilter = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'value', value);
    }, [idx, setFilter]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "range-filter-panel"
    }, /*#__PURE__*/_react["default"].createElement(FieldPanelWithFieldSelect, {
      allAvailableFields: allAvailableFields,
      datasets: datasets,
      filter: filter,
      idx: idx,
      removeFilter: removeFilter,
      setFilter: setFilter
    }, filter.type && /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-panel__filter"
    }, /*#__PURE__*/_react["default"].createElement(RangeFilterComponent, {
      filter: filter,
      setFilter: onSetFilter
    }))));
  });

  RangeFilterPanel.displayName = 'RangeFilterPanel';
  return RangeFilterPanel;
}

var _default = RangeFilterPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maWx0ZXJzL2ZpbHRlci1wYW5lbHMvcmFuZ2UtZmlsdGVyLXBhbmVsLnRzeCJdLCJuYW1lcyI6WyJSYW5nZUZpbHRlclBhbmVsRmFjdG9yeSIsImRlcHMiLCJGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeSIsIlJhbmdlRmlsdGVyRmFjdG9yeSIsIkZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3QiLCJSYW5nZUZpbHRlckNvbXBvbmVudCIsIlJhbmdlRmlsdGVyUGFuZWwiLCJSZWFjdCIsIm1lbW8iLCJpZHgiLCJkYXRhc2V0cyIsImFsbEF2YWlsYWJsZUZpZWxkcyIsImZpbHRlciIsInJlbW92ZUZpbHRlciIsInNldEZpbHRlciIsIm9uU2V0RmlsdGVyIiwidmFsdWUiLCJ0eXBlIiwiZGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBRUE7O0FBTkE7QUFDQTtBQVFBQSx1QkFBdUIsQ0FBQ0MsSUFBeEIsR0FBK0IsQ0FBQ0Msc0NBQUQsRUFBbUNDLHVCQUFuQyxDQUEvQjs7QUFFQSxTQUFTSCx1QkFBVCxDQUNFSSx5QkFERixFQUVFQyxvQkFGRixFQUdFO0FBQ0EsTUFBTUMsZ0JBQW1ELGdCQUFHQyxrQkFBTUMsSUFBTixDQUMxRCxnQkFBMEU7QUFBQSxRQUF4RUMsR0FBd0UsUUFBeEVBLEdBQXdFO0FBQUEsUUFBbkVDLFFBQW1FLFFBQW5FQSxRQUFtRTtBQUFBLFFBQXpEQyxrQkFBeUQsUUFBekRBLGtCQUF5RDtBQUFBLFFBQXJDQyxNQUFxQyxRQUFyQ0EsTUFBcUM7QUFBQSxRQUE3QkMsWUFBNkIsUUFBN0JBLFlBQTZCO0FBQUEsUUFBZkMsU0FBZSxRQUFmQSxTQUFlO0FBQ3hFLFFBQU1DLFdBQVcsR0FBRyx3QkFBWSxVQUFBQyxLQUFLO0FBQUEsYUFBSUYsU0FBUyxDQUFDTCxHQUFELEVBQU0sT0FBTixFQUFlTyxLQUFmLENBQWI7QUFBQSxLQUFqQixFQUFxRCxDQUFDUCxHQUFELEVBQU1LLFNBQU4sQ0FBckQsQ0FBcEI7QUFFQSx3QkFDRTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0UsZ0NBQUMseUJBQUQ7QUFDRSxNQUFBLGtCQUFrQixFQUFFSCxrQkFEdEI7QUFFRSxNQUFBLFFBQVEsRUFBRUQsUUFGWjtBQUdFLE1BQUEsTUFBTSxFQUFFRSxNQUhWO0FBSUUsTUFBQSxHQUFHLEVBQUVILEdBSlA7QUFLRSxNQUFBLFlBQVksRUFBRUksWUFMaEI7QUFNRSxNQUFBLFNBQVMsRUFBRUM7QUFOYixPQVFHRixNQUFNLENBQUNLLElBQVAsaUJBQ0M7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNFLGdDQUFDLG9CQUFEO0FBQXNCLE1BQUEsTUFBTSxFQUFFTCxNQUE5QjtBQUFzQyxNQUFBLFNBQVMsRUFBRUc7QUFBakQsTUFERixDQVRKLENBREYsQ0FERjtBQWtCRCxHQXRCeUQsQ0FBNUQ7O0FBeUJBVCxFQUFBQSxnQkFBZ0IsQ0FBQ1ksV0FBakIsR0FBK0Isa0JBQS9CO0FBRUEsU0FBT1osZ0JBQVA7QUFDRDs7ZUFFY04sdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhbmdlRmlsdGVyRmFjdG9yeSBmcm9tICcuLi9yYW5nZS1maWx0ZXInO1xuaW1wb3J0IHtSYW5nZUZpbHRlcn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQgRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdEZhY3RvcnkgZnJvbSAnLi9maWx0ZXItcGFuZWwtd2l0aC1maWVsZC1zZWxlY3QnO1xuaW1wb3J0IHtGaWx0ZXJQYW5lbENvbXBvbmVudH0gZnJvbSAnLi90eXBlcyc7XG5cblJhbmdlRmlsdGVyUGFuZWxGYWN0b3J5LmRlcHMgPSBbRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdEZhY3RvcnksIFJhbmdlRmlsdGVyRmFjdG9yeV07XG5cbmZ1bmN0aW9uIFJhbmdlRmlsdGVyUGFuZWxGYWN0b3J5KFxuICBGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0OiBSZXR1cm5UeXBlPHR5cGVvZiBGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeT4sXG4gIFJhbmdlRmlsdGVyQ29tcG9uZW50OiBSZXR1cm5UeXBlPHR5cGVvZiBSYW5nZUZpbHRlckZhY3Rvcnk+XG4pIHtcbiAgY29uc3QgUmFuZ2VGaWx0ZXJQYW5lbDogRmlsdGVyUGFuZWxDb21wb25lbnQ8UmFuZ2VGaWx0ZXI+ID0gUmVhY3QubWVtbyhcbiAgICAoe2lkeCwgZGF0YXNldHMsIGFsbEF2YWlsYWJsZUZpZWxkcywgZmlsdGVyLCByZW1vdmVGaWx0ZXIsIHNldEZpbHRlcn0pID0+IHtcbiAgICAgIGNvbnN0IG9uU2V0RmlsdGVyID0gdXNlQ2FsbGJhY2sodmFsdWUgPT4gc2V0RmlsdGVyKGlkeCwgJ3ZhbHVlJywgdmFsdWUpLCBbaWR4LCBzZXRGaWx0ZXJdKTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyYW5nZS1maWx0ZXItcGFuZWxcIj5cbiAgICAgICAgICA8RmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdFxuICAgICAgICAgICAgYWxsQXZhaWxhYmxlRmllbGRzPXthbGxBdmFpbGFibGVGaWVsZHN9XG4gICAgICAgICAgICBkYXRhc2V0cz17ZGF0YXNldHN9XG4gICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgIGlkeD17aWR4fVxuICAgICAgICAgICAgcmVtb3ZlRmlsdGVyPXtyZW1vdmVGaWx0ZXJ9XG4gICAgICAgICAgICBzZXRGaWx0ZXI9e3NldEZpbHRlcn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZmlsdGVyLnR5cGUgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbHRlci1wYW5lbF9fZmlsdGVyXCI+XG4gICAgICAgICAgICAgICAgPFJhbmdlRmlsdGVyQ29tcG9uZW50IGZpbHRlcj17ZmlsdGVyfSBzZXRGaWx0ZXI9e29uU2V0RmlsdGVyfSAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9GaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuICApO1xuXG4gIFJhbmdlRmlsdGVyUGFuZWwuZGlzcGxheU5hbWUgPSAnUmFuZ2VGaWx0ZXJQYW5lbCc7XG5cbiAgcmV0dXJuIFJhbmdlRmlsdGVyUGFuZWw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmdlRmlsdGVyUGFuZWxGYWN0b3J5O1xuIl19