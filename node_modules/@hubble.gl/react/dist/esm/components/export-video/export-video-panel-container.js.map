{"version":3,"sources":["../../../../src/components/export-video/export-video-panel-container.js"],"names":["React","Component","easing","DeckAdapter","DeckScene","CameraKeyframes","WebMEncoder","JPEGSequenceEncoder","PNGSequenceEncoder","PreviewEncoder","GifEncoder","ExportVideoPanel","parseSetCameraType","DEFAULT_FILENAME","getResolutionSetting","ENCODERS","gif","webm","jpeg","png","ExportVideoPanelContainer","props","setMediaType","bind","setCameraPreset","setFileName","setResolution","setViewState","getCameraKeyframes","getDeckScene","onPreviewVideo","onRenderVideo","setDuration","initialState","mapState","mapData","glContext","state","mediaType","cameraPreset","fileName","resolution","durationMs","viewState","adapter","getFileName","getCanvasSize","width","height","framerate","quality","sampleInterval","filename","prevCamera","undefined","longitude","latitude","zoom","pitch","bearing","timings","keyframes","easings","easeInOut","animationLoop","camera","currentCamera","timeline","attachAnimation","lengthMs","update","onSettingsChange","setState","setStateAndNotify","vs","encoderSettings","getEncoderSettings","onStop","forceUpdate","render","Encoder","getEncoder","scene","exportVideoWidth","handleClose","header","settingsData","defaultProps"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {Component} from 'react';\nimport {easing} from 'popmotion';\nimport {\n  DeckAdapter,\n  DeckScene,\n  CameraKeyframes,\n  WebMEncoder,\n  JPEGSequenceEncoder,\n  PNGSequenceEncoder,\n  PreviewEncoder,\n  GifEncoder\n} from '@hubble.gl/core';\n\nimport ExportVideoPanel from './export-video-panel';\nimport {parseSetCameraType} from './utils';\nimport {DEFAULT_FILENAME, getResolutionSetting} from './constants';\n\n// import {DEFAULT_TIME_FORMAT} from 'kepler.gl';\n// import moment from 'moment';\n\n// function setFileNameDeckAdapter(name) {\n//   encoderSettings.filename = `${name} ${moment()\n//     .format(DEFAULT_TIME_FORMAT)\n//     .toString()}`;\n// }\n\nconst ENCODERS = {\n  gif: GifEncoder,\n  webm: WebMEncoder,\n  jpeg: JPEGSequenceEncoder,\n  png: PNGSequenceEncoder\n};\n\nexport class ExportVideoPanelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setMediaType = this.setMediaType.bind(this);\n    this.setCameraPreset = this.setCameraPreset.bind(this);\n    this.setFileName = this.setFileName.bind(this);\n    this.setResolution = this.setResolution.bind(this);\n    this.setViewState = this.setViewState.bind(this);\n    this.getCameraKeyframes = this.getCameraKeyframes.bind(this);\n    this.getDeckScene = this.getDeckScene.bind(this);\n    this.onPreviewVideo = this.onPreviewVideo.bind(this);\n    this.onRenderVideo = this.onRenderVideo.bind(this);\n    this.setDuration = this.setDuration.bind(this);\n    this.setViewState = this.setViewState.bind(this);\n\n    const {\n      initialState,\n      mapData: {mapState},\n      glContext\n    } = props;\n\n    this.state = {\n      mediaType: 'gif',\n      cameraPreset: 'Orbit (90º)',\n      fileName: '',\n      resolution: '1280x720',\n      durationMs: 1000, // TODO change to 5000 later. 1000 for dev testing\n      viewState: mapState,\n      adapter: new DeckAdapter(this.getDeckScene, glContext),\n      ...(initialState || {})\n    };\n  }\n\n  getFileName() {\n    const {fileName} = this.state;\n    if (fileName === '') return DEFAULT_FILENAME;\n    return fileName;\n  }\n\n  getCanvasSize() {\n    const {resolution} = this.state;\n    return getResolutionSetting(resolution);\n  }\n\n  getEncoderSettings() {\n    const fileName = this.getFileName();\n    const {width, height} = this.getCanvasSize();\n\n    return {\n      framerate: 30,\n      webm: {\n        quality: 0.8\n      },\n      jpeg: {\n        quality: 0.8\n      },\n      gif: {\n        sampleInterval: 1000,\n        width,\n        height\n      },\n      filename: fileName\n    };\n  }\n\n  getEncoder() {\n    const {mediaType} = this.state;\n    return ENCODERS[mediaType];\n  }\n\n  getCameraKeyframes(prevCamera = undefined) {\n    const {viewState, cameraPreset, durationMs} = this.state;\n    const {longitude, latitude, zoom, pitch, bearing} = viewState;\n\n    return new CameraKeyframes({\n      timings: [0, durationMs],\n      keyframes: [\n        {\n          longitude,\n          latitude,\n          zoom,\n          pitch,\n          bearing\n        },\n        parseSetCameraType(cameraPreset, viewState)\n      ],\n      easings: [easing.easeInOut]\n    });\n  }\n\n  getDeckScene(animationLoop) {\n    // PSEUDO BRAINSTORM\n    // only runs once and permanently sets things like canvas resolution + duration\n    const {durationMs} = this.state;\n    const {width, height} = this.getCanvasSize();\n\n    const keyframes = {\n      camera: this.getCameraKeyframes()\n    };\n    const currentCamera = animationLoop.timeline.attachAnimation(keyframes.camera);\n\n    // TODO this scales canvas resolution but is only set once. Figure out how to update\n    // TODO this needs to update durationMs\n    return new DeckScene({\n      animationLoop,\n      keyframes,\n      lengthMs: durationMs,\n      width,\n      height,\n      currentCamera\n    });\n  }\n\n  setStateAndNotify(update) {\n    const {\n      props: {onSettingsChange},\n      state\n    } = this;\n    this.setState({...state, ...update});\n\n    if (onSettingsChange) {\n      const {mediaType, cameraPreset, fileName, resolution, durationMs} = state;\n      onSettingsChange({\n        mediaType,\n        cameraPreset,\n        fileName,\n        resolution,\n        durationMs,\n        ...update\n      });\n    }\n  }\n\n  setMediaType(mediaType) {\n    this.setStateAndNotify({mediaType});\n  }\n\n  setCameraPreset(cameraPreset) {\n    this.setStateAndNotify({cameraPreset});\n  }\n\n  setFileName(fileName) {\n    this.setStateAndNotify({fileName});\n  }\n\n  setResolution(resolution) {\n    this.setStateAndNotify({resolution});\n  }\n\n  setViewState(vs) {\n    this.setState({viewState: vs.viewState});\n  }\n\n  onPreviewVideo() {\n    const {adapter} = this.state;\n    const encoderSettings = this.getEncoderSettings();\n    const onStop = () => {\n      this.forceUpdate();\n    };\n    adapter.render(PreviewEncoder, encoderSettings, onStop, this.getCameraKeyframes);\n  }\n\n  onRenderVideo() {\n    const {adapter} = this.state;\n    const Encoder = this.getEncoder();\n    const encoderSettings = this.getEncoderSettings();\n    const onStop = () => {};\n\n    adapter.render(Encoder, encoderSettings, onStop, this.getCameraKeyframes);\n  }\n\n  setDuration(durationMs) {\n    const {adapter} = this.state;\n    adapter.scene.lengthMs = durationMs;\n    // function passed down to Slider class in ExportVideoPanelSettings\n    this.setStateAndNotify({durationMs});\n  }\n\n  render() {\n    const {exportVideoWidth, handleClose, mapData, header} = this.props;\n    const {\n      adapter,\n      durationMs,\n      mediaType,\n      cameraPreset,\n      fileName,\n      resolution,\n      viewState\n    } = this.state;\n\n    const settingsData = {mediaType, cameraPreset, fileName, resolution};\n\n    const encoderSettings = this.getEncoderSettings();\n    const {width, height} = this.getCanvasSize();\n\n    return (\n      <ExportVideoPanel\n        // UI Props\n        exportVideoWidth={exportVideoWidth}\n        handleClose={handleClose}\n        header={header}\n        // Map Props\n        mapData={mapData}\n        viewState={viewState}\n        setViewState={this.setViewState}\n        // Settings Props\n        settingsData={settingsData}\n        setMediaType={this.setMediaType}\n        setCameraPreset={this.setCameraPreset}\n        setFileName={this.setFileName}\n        setResolution={this.setResolution}\n        // Hubble Props\n        adapter={adapter}\n        handlePreviewVideo={this.onPreviewVideo}\n        handleRenderVideo={this.onRenderVideo}\n        durationMs={durationMs}\n        setDuration={this.setDuration}\n        frameRate={encoderSettings.framerate}\n        resolution={[width, height]}\n        mediaType={mediaType}\n      />\n    );\n  }\n}\n\nExportVideoPanelContainer.defaultProps = {\n  exportVideoWidth: 540,\n  header: true,\n  glContext: undefined\n};\n"],"file":"export-video-panel-container.js"}