"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findDefaultLayer = findDefaultLayer;
exports.calculateLayerData = calculateLayerData;
exports.getLayerHoverProp = getLayerHoverProp;
exports.renderDeckGlLayer = renderDeckGlLayer;
exports.isLayerRenderable = isLayerRenderable;
exports.isLayerVisible = isLayerVisible;
exports.prepareLayersForDeck = prepareLayersForDeck;
exports.prepareLayersToRender = prepareLayersToRender;
exports.getCustomDeckLayers = getCustomDeckLayers;
exports.bindLayerCallbacks = bindLayerCallbacks;
exports.computeDeckLayers = computeDeckLayers;
exports.getLayerOrderFromLayers = getLayerOrderFromLayers;
exports.reorderLayerOrder = reorderLayerOrder;
exports.addLayerToLayerOrder = addLayerToLayerOrder;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _sortable = require("@dnd-kit/sortable");

var _constants = require("@kepler.gl/constants");

var _layers = require("@kepler.gl/layers");

var _utils = require("@kepler.gl/utils");

var _deckglLayers = require("@kepler.gl/deckgl-layers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Find default layers from fields
 */
function findDefaultLayer(dataset, layerClasses) {
  if (!dataset) {
    return [];
  }

  var layerProps = Object.keys(layerClasses).reduce(function (previous, lc) {
    var result = typeof layerClasses[lc].findDefaultLayerProps === 'function' ? layerClasses[lc].findDefaultLayerProps(dataset, previous) : {
      props: []
    };
    var props = Array.isArray(result) ? result : result.props || [];
    var foundLayers = result.foundLayers || previous;
    return foundLayers.concat(props.map(function (p) {
      return _objectSpread(_objectSpread({}, p), {}, {
        type: lc,
        dataId: dataset.id
      });
    }));
  }, []); // go through all layerProps to create layer

  return layerProps.map(function (props) {
    // @ts-expect-error TODO: checking props.type !== null
    var layer = new layerClasses[props.type](props);
    return typeof layer.setInitialLayerConfig === 'function' && dataset.dataContainer ? layer.setInitialLayerConfig(dataset) : layer;
  });
}

/**
 * Calculate layer data based on layer type, col Config,
 * return updated layer if colorDomain, dataMap has changed.
 * Also, returns updated layer in case the input layer was in invalid state.
 * Adds an error message to the layer in case of an exception.
 */
function calculateLayerData(layer, state, oldLayerData) {
  var layerData;

  try {
    // Make sure the layer updates data after an error
    if (!layer.isValid) {
      layer._oldDataUpdateTriggers = undefined;
    }

    if (!layer.type || !layer.hasAllColumns() || !layer.config.dataId) {
      return {
        layer: layer,
        layerData: {}
      };
    }

    layerData = layer.formatLayerData(state.datasets, oldLayerData); // At this point the data for the layer is updated without errors

    if (!layer.isValid) {
      // Switch to visible after an error
      layer = layer.updateLayerConfig({
        isVisible: true
      });
    }

    layer.isValid = true;
    layer.errorMessage = null;
  } catch (err) {
    layer = layer.updateLayerConfig({
      isVisible: false
    });
    layer.isValid = false;
    layer.errorMessage = err instanceof Error && err.message ? err.message.substring(0, 100) : 'Unknown error';
    layerData = {};
  }

  return {
    layer: layer,
    layerData: layerData
  };
}
/**
 * Calculate props passed to LayerHoverInfo
 * @type {typeof import('./layer-utils').getLayerHoverProp}
 */


function getLayerHoverProp(_ref) {
  var interactionConfig = _ref.interactionConfig,
      hoverInfo = _ref.hoverInfo,
      layers = _ref.layers,
      layersToRender = _ref.layersToRender,
      datasets = _ref.datasets;

  if (interactionConfig.tooltip.enabled && hoverInfo && hoverInfo.picked) {
    // if anything hovered
    var object = hoverInfo.object,
        overlay = hoverInfo.layer; // deckgl layer to kepler-gl layer

    var layer = layers[overlay.props.idx]; // NOTE: for binary format GeojsonLayer, deck will return object=null but hoverInfo.index >= 0

    if ((object || hoverInfo.index >= 0) && layer && layer.getHoverData && layersToRender[layer.id]) {
      // if layer is visible and have hovered data
      var dataId = layer.config.dataId;

      if (!dataId) {
        return null;
      }

      var _datasets$dataId = datasets[dataId],
          dataContainer = _datasets$dataId.dataContainer,
          fields = _datasets$dataId.fields;
      var data = layer.getHoverData(object || hoverInfo.index, dataContainer, fields);

      if (!data) {
        return null;
      }

      var fieldsToShow = interactionConfig.tooltip.config.fieldsToShow[dataId];
      return {
        data: data,
        fields: fields,
        fieldsToShow: fieldsToShow,
        layer: layer
      };
    }
  }

  return null;
}

function renderDeckGlLayer(props, layerCallbacks) {
  var datasets = props.datasets,
      layer = props.layer,
      layerIndex = props.layerIndex,
      data = props.data,
      hoverInfo = props.hoverInfo,
      clicked = props.clicked,
      mapState = props.mapState,
      interactionConfig = props.interactionConfig,
      animationConfig = props.animationConfig,
      mapLayers = props.mapLayers;
  var dataset = datasets[layer.config.dataId];

  var _ref2 = dataset || {},
      gpuFilter = _ref2.gpuFilter;

  var objectHovered = clicked || hoverInfo;
  var visible = !mapLayers || mapLayers && mapLayers[layer.id]; // Layer is Layer class

  return layer.renderLayer({
    data: data,
    gpuFilter: gpuFilter,
    idx: layerIndex,
    interactionConfig: interactionConfig,
    layerCallbacks: layerCallbacks,
    mapState: mapState,
    animationConfig: animationConfig,
    objectHovered: objectHovered,
    visible: visible
  });
}

function isLayerRenderable(layer, layerData) {
  return layer.id !== _constants.GEOCODER_LAYER_ID && layer.shouldRenderLayer(layerData);
}

function isLayerVisible(layer, mapLayers) {
  return layer.config.isVisible && ( // if layer.id is not in mapLayers, don't render it
  !mapLayers || mapLayers && mapLayers[layer.id]);
} // Prepare a dict of layers rendered by the deck.gl
// Note, isVisible: false layer is passed to deck.gl here
// return {[id]: true \ false}


function prepareLayersForDeck(layers, layerData) {
  return layers.reduce(function (accu, layer, idx) {
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, layer.id, isLayerRenderable(layer, layerData[idx]) && layer.overlayType === _layers.OVERLAY_TYPE_CONST.deckgl));
  }, {});
} // Prepare a dict of rendered layers rendered in the map
// This includes only the visibile layers for single map view and split map view
// return {[id]: true \ false}


function prepareLayersToRender(layers, layerData, mapLayers) {
  return layers.reduce(function (accu, layer, idx) {
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, layer.id, isLayerRenderable(layer, layerData[idx]) && isLayerVisible(layer, mapLayers)));
  }, {});
}

function getCustomDeckLayers(deckGlProps) {
  var bottomDeckLayers = Array.isArray(deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.layers) ? deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.layers : (0, _utils.isFunction)(deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.layers) ? deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.layers() : [];
  var topDeckLayers = Array.isArray(deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.topLayers) ? deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.topLayers : (0, _utils.isFunction)(deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.topLayers) ? deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.topLayers() : [];
  return [bottomDeckLayers, topDeckLayers];
}

function bindLayerCallbacks() {
  var layerCallbacks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var idx = arguments.length > 1 ? arguments[1] : undefined;
  return Object.keys(layerCallbacks).reduce(function (accu, key) {
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, key, function (val) {
      return layerCallbacks[key](idx, val);
    }));
  }, {});
}

// eslint-disable-next-line complexity
function computeDeckLayers(_ref3, options, layerCallbacks, deckGlProps) {
  var visState = _ref3.visState,
      mapState = _ref3.mapState,
      mapStyle = _ref3.mapStyle;
  var datasets = visState.datasets,
      layers = visState.layers,
      layerOrder = visState.layerOrder,
      layerData = visState.layerData,
      hoverInfo = visState.hoverInfo,
      clicked = visState.clicked,
      interactionConfig = visState.interactionConfig,
      animationConfig = visState.animationConfig,
      splitMaps = visState.splitMaps;

  var _ref4 = options || {},
      mapIndex = _ref4.mapIndex,
      mapboxApiAccessToken = _ref4.mapboxApiAccessToken,
      mapboxApiUrl = _ref4.mapboxApiUrl,
      primaryMap = _ref4.primaryMap,
      layersForDeck = _ref4.layersForDeck,
      editorInfo = _ref4.editorInfo;

  var dataLayers = [];

  if (layerData && layerData.length) {
    var mapLayers = (0, _utils.getMapLayersFromSplitMaps)(splitMaps, mapIndex || 0);
    var currentLayersForDeck = layersForDeck || prepareLayersForDeck(layers, layerData);
    dataLayers = layerOrder.slice().reverse().filter(function (id) {
      return currentLayersForDeck[id];
    }).reduce(function (overlays, layerId) {
      var layerIndex = layers.findIndex(function (_ref5) {
        var id = _ref5.id;
        return id === layerId;
      });
      var bindedLayerCallbacks = layerCallbacks ? bindLayerCallbacks(layerCallbacks, layerIndex) : {};
      var layer = layers[layerIndex];
      var data = layerData[layerIndex];
      var layerOverlay = renderDeckGlLayer({
        datasets: datasets,
        layer: layer,
        layerIndex: layerIndex,
        data: data,
        hoverInfo: hoverInfo,
        clicked: clicked,
        mapState: mapState,
        interactionConfig: interactionConfig,
        animationConfig: animationConfig,
        mapLayers: mapLayers
      }, bindedLayerCallbacks);
      return overlays.concat(layerOverlay || []);
    }, []);
  }

  if (!primaryMap) {
    return dataLayers;
  }

  if (mapStyle !== null && mapStyle !== void 0 && mapStyle.visibleLayerGroups['3d building'] && primaryMap && mapboxApiAccessToken && mapboxApiUrl) {
    dataLayers.push(new _deckglLayers.ThreeDBuildingLayer({
      id: '_keplergl_3d-building',
      mapboxApiAccessToken: mapboxApiAccessToken,
      mapboxApiUrl: mapboxApiUrl,
      threeDBuildingColor: mapStyle.threeDBuildingColor,
      updateTriggers: {
        getFillColor: mapStyle.threeDBuildingColor
      }
    }));
  }

  var _getCustomDeckLayers = getCustomDeckLayers(deckGlProps),
      _getCustomDeckLayers2 = (0, _slicedToArray2["default"])(_getCustomDeckLayers, 2),
      customBottomDeckLayers = _getCustomDeckLayers2[0],
      customTopDeckLayers = _getCustomDeckLayers2[1];

  var editorLayer = [];

  if (editorInfo) {
    editorLayer.push((0, _layers.getEditorLayer)(_objectSpread({}, editorInfo)));
  }

  return [].concat((0, _toConsumableArray2["default"])(customBottomDeckLayers), (0, _toConsumableArray2["default"])(dataLayers), (0, _toConsumableArray2["default"])(customTopDeckLayers), editorLayer);
}

function getLayerOrderFromLayers(layers) {
  return layers.map(function (_ref6) {
    var id = _ref6.id;
    return id;
  });
}

function reorderLayerOrder(layerOrder, originLayerId, destinationLayerId) {
  var activeIndex = layerOrder.indexOf(originLayerId);
  var overIndex = layerOrder.indexOf(destinationLayerId);
  return (0, _sortable.arrayMove)(layerOrder, activeIndex, overIndex);
}

function addLayerToLayerOrder(layerOrder, layerId) {
  return [layerId].concat((0, _toConsumableArray2["default"])(layerOrder));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,