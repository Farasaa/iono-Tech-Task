"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VideoCapture = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _downloadjs = _interopRequireDefault(require("downloadjs"));

var _encoders = require("../encoders");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var VideoCapture = function () {
  function VideoCapture() {
    (0, _classCallCheck2["default"])(this, VideoCapture);
    (0, _defineProperty2["default"])(this, "recording", void 0);
    (0, _defineProperty2["default"])(this, "capturing", void 0);
    (0, _defineProperty2["default"])(this, "timeMs", void 0);
    (0, _defineProperty2["default"])(this, "endTimeMs", void 0);
    (0, _defineProperty2["default"])(this, "durationMs", void 0);
    (0, _defineProperty2["default"])(this, "framerate", void 0);
    (0, _defineProperty2["default"])(this, "encoder", void 0);
    (0, _defineProperty2["default"])(this, "filename", void 0);
    (0, _defineProperty2["default"])(this, "encoderSettings", void 0);
    this.recording = false;
    this.capturing = false;
    this.timeMs = 0;
    this.encoder = null;
    this.encoderSettings = null;
    this._getNextTimeMs = this._getNextTimeMs.bind(this);
    this._step = this._step.bind(this);
    this._capture = this._capture.bind(this);
    this.capture = this.capture.bind(this);
    this.render = this.render.bind(this);
    this.stop = this.stop.bind(this);
    this.save = this.save.bind(this);
  }

  (0, _createClass2["default"])(VideoCapture, [{
    key: "parseEncoderSettings",
    value: function parseEncoderSettings(encoderSettings, sceneLengthMs) {
      var parsedSettings = _objectSpread({}, encoderSettings);

      if (!parsedSettings.startOffsetMs) {
        parsedSettings.startOffsetMs = 0;
      }

      this.timeMs = parsedSettings.startOffsetMs;

      if (parsedSettings.durationMs) {
        this.endTimeMs = parsedSettings.startOffsetMs + parsedSettings.durationMs;
      } else {
        parsedSettings.durationMs = sceneLengthMs - parsedSettings.startOffsetMs;
        this.endTimeMs = sceneLengthMs;
      }

      if (this.endTimeMs > sceneLengthMs) {
        throw new Error("Recording end time (".concat(this.endTimeMs, ") cannot be greater then scene length (").concat(sceneLengthMs, ")"));
      }

      if (parsedSettings.durationMs <= 0) {
        throw new Error("Invalid recording length in ms (".concat(parsedSettings.durationMs, ").  Must be greater than 0."));
      }

      this.durationMs = parsedSettings.durationMs;

      if (!parsedSettings.filename) {
        parsedSettings.filename = (0, _utils.guid)();
      }

      this.filename = parsedSettings.filename;
      return parsedSettings;
    }
  }, {
    key: "isRecording",
    value: function isRecording() {
      return this.recording;
    }
  }, {
    key: "render",
    value: function render(Encoder, encoderSettings, sceneLengthMs) {
      var onStop = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;

      if (!this.isRecording()) {
        console.time('render');
        this.encoderSettings = this.parseEncoderSettings(encoderSettings, sceneLengthMs);
        console.log("Starting recording for ".concat(this.durationMs, "ms."));
        this.onStop = onStop;
        this.encoder = new Encoder(this.encoderSettings);
        this.recording = true;
        this.encoder.start();
      }
    }
  }, {
    key: "capture",
    value: function capture(canvas, proceedToNextFrame) {
      var _this = this;

      if (!this.capturing && this.isRecording()) {
        this.capturing = true;

        this._capture(canvas).then(function (data) {
          _this.capturing = false;

          if (data.kind === 'step') {
            console.log("data.nextTimeMs: ".concat(data.nextTimeMs));
            proceedToNextFrame(data.nextTimeMs);
          } else if (data.error === 'STOP') {
            console.log('data.error: STOP');

            _this.stop(_this.onStop);
          } else {
            console.log(data);
          }
        });
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      if (this.isRecording()) {
        console.log("Stopping recording.  Recorded for ".concat(this.durationMs, "ms."));
        this.recording = false;
        this.capturing = false;
        this.encoderSettings = null;
        this.save();

        if (callback) {
          callback();
        }
      }
    }
  }, {
    key: "save",
    value: function save(callback) {
      var _this2 = this;

      console.timeEnd('render');

      if (!callback) {
        callback = function callback(blob) {
          console.timeEnd('save');

          if (blob) {
            (0, _downloadjs["default"])(blob, _this2.filename + _this2.encoder.extension, _this2.encoder.mimeType);
          }

          return false;
        };
      }

      console.time('save');
      this.encoder.save().then(callback);
    }
  }, {
    key: "_capture",
    value: function () {
      var _capture2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(canvas) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.isRecording()) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", {
                  kind: 'error',
                  error: 'NOT_RECORDING'
                });

              case 2:
                _context.next = 4;
                return this.encoder.add(canvas).then(this._step)["catch"](function (reason) {
                  return {
                    kind: 'error',
                    error: reason
                  };
                });

              case 4:
                return _context.abrupt("return", _context.sent);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _capture(_x) {
        return _capture2.apply(this, arguments);
      }

      return _capture;
    }()
  }, {
    key: "_step",
    value: function _step() {
      this.timeMs = this._getNextTimeMs();

      if (this.timeMs > this.endTimeMs) {
        return {
          kind: 'error',
          error: 'STOP'
        };
      }

      return {
        kind: 'step',
        nextTimeMs: this.timeMs
      };
    }
  }, {
    key: "_getNextTimeMs",
    value: function _getNextTimeMs() {
      var frameLengthMs = parseInt(1000.0 / this.encoder.framerate, 10);
      return this.timeMs + frameLengthMs;
    }
  }]);
  return VideoCapture;
}();

exports.VideoCapture = VideoCapture;
//# sourceMappingURL=video-capture.js.map