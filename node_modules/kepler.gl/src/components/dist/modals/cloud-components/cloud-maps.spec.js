"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _componentJestUtils = require("../../../../../test/helpers/component-jest-utils");

var _cloudMaps = require("./cloud-maps");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// @ts-nocheck
describe('CloudMaps Component', function () {
  it('renderWithThemes without crashing', function () {
    var _renderWithTheme = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
      isLoading: false,
      maps: [],
      error: null
    })),
        getByText = _renderWithTheme.getByText;

    expect(getByText(/noSavedMaps/i)).toBeInTheDocument();
  });
  it('displays error message when there is an error', function () {
    var errorMessage = 'Test Error';

    var _renderWithTheme2 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
      isLoading: false,
      maps: [],
      error: {
        message: errorMessage
      }
    })),
        getByText = _renderWithTheme2.getByText;

    expect(getByText("Error while fetching maps: ".concat(errorMessage))).toBeInTheDocument();
  });
  it('displays loading spinner when isLoading is true', function () {
    var _renderWithTheme3 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
      isLoading: true,
      maps: [],
      error: null
    })),
        getByText = _renderWithTheme3.getByText;

    expect(getByText('modal.loadingDialog.loading')).toBeInTheDocument(); // Ensure your spinner has 'data-testid="loading-spinner"'
  });
  it('renderWithThemes correct number of CloudItems based on maps prop', function () {
    var mockMaps = [{
      id: 1,
      title: 'map'
    }, {
      id: 2,
      title: 'map'
    }, {
      id: 3,
      title: 'map'
    }];

    var _renderWithTheme4 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
      isLoading: false,
      maps: mockMaps,
      error: null
    })),
        getAllByText = _renderWithTheme4.getAllByText;

    expect(getAllByText('map')).toHaveLength(mockMaps.length); // Ensure your CloudItem has 'data-testid="cloud-item"'
  });
  it('displays message when there are no maps', function () {
    var _renderWithTheme5 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
      isLoading: false,
      maps: [],
      error: null
    })),
        getByText = _renderWithTheme5.getByText;

    expect(getByText(/noSavedMaps/i)).toBeInTheDocument();
  });
  it('calls onSelectMap when a CloudItem is clicked', function () {
    var mockMaps = [{
      id: 1,
      title: 'map'
    }, {
      id: 2,
      title: 'map'
    }, {
      id: 3,
      title: 'map'
    }];
    var onSelectMap = jest.fn();
    var provider = 'testProvider';

    var _renderWithTheme6 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
      provider: provider,
      onSelectMap: onSelectMap,
      isLoading: false,
      maps: mockMaps,
      error: null
    })),
        getAllByText = _renderWithTheme6.getAllByText;

    var firstItem = getAllByText('map')[0];

    _react2.fireEvent.click(firstItem);

    expect(onSelectMap).toHaveBeenCalledWith(provider, mockMaps[0]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RhbHMvY2xvdWQtY29tcG9uZW50cy9jbG91ZC1tYXBzLnNwZWMudHN4Il0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImVycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJtb2NrTWFwcyIsImlkIiwidGl0bGUiLCJnZXRBbGxCeVRleHQiLCJ0b0hhdmVMZW5ndGgiLCJsZW5ndGgiLCJvblNlbGVjdE1hcCIsImplc3QiLCJmbiIsInByb3ZpZGVyIiwiZmlyc3RJdGVtIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCJdLCJtYXBwaW5ncyI6Ijs7OztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQVBBO0FBQ0E7QUFFQTtBQU1BQSxRQUFRLENBQUMscUJBQUQsRUFBd0IsWUFBTTtBQUNwQ0MsRUFBQUEsRUFBRSxDQUFDLG1DQUFELEVBQXNDLFlBQU07QUFBQSwyQkFDeEIsdURBQWdCLGdDQUFDLG9CQUFEO0FBQVcsTUFBQSxTQUFTLEVBQUUsS0FBdEI7QUFBNkIsTUFBQSxJQUFJLEVBQUUsRUFBbkM7QUFBdUMsTUFBQSxLQUFLLEVBQUU7QUFBOUMsTUFBaEIsQ0FEd0I7QUFBQSxRQUNyQ0MsU0FEcUMsb0JBQ3JDQSxTQURxQzs7QUFFNUNDLElBQUFBLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLGNBQUQsQ0FBVixDQUFOLENBQWtDRSxpQkFBbEM7QUFDRCxHQUhDLENBQUY7QUFLQUgsRUFBQUEsRUFBRSxDQUFDLCtDQUFELEVBQWtELFlBQU07QUFDeEQsUUFBTUksWUFBWSxHQUFHLFlBQXJCOztBQUR3RCw0QkFFcEMsdURBQ2xCLGdDQUFDLG9CQUFEO0FBQVcsTUFBQSxTQUFTLEVBQUUsS0FBdEI7QUFBNkIsTUFBQSxJQUFJLEVBQUUsRUFBbkM7QUFBdUMsTUFBQSxLQUFLLEVBQUU7QUFBQ0MsUUFBQUEsT0FBTyxFQUFFRDtBQUFWO0FBQTlD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QUFvQixDQUFwQixDQUFsQjs7QUFDQVEsc0JBQVVDLEtBQVYsQ0FBZ0JGLFNBQWhCOztBQUNBZCxJQUFBQSxNQUFNLENBQUNVLFdBQUQsQ0FBTixDQUFvQk8sb0JBQXBCLENBQXlDSixRQUF6QyxFQUFtRFQsUUFBUSxDQUFDLENBQUQsQ0FBM0Q7QUFDRCxHQXJCQyxDQUFGO0FBc0JELENBMURPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7ZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7cmVuZGVyV2l0aFRoZW1lfSBmcm9tICcuLi8uLi8uLi8uLi8uLi90ZXN0L2hlbHBlcnMvY29tcG9uZW50LWplc3QtdXRpbHMnO1xuaW1wb3J0IHtDbG91ZE1hcHN9IGZyb20gJy4vY2xvdWQtbWFwcyc7XG5cbmRlc2NyaWJlKCdDbG91ZE1hcHMgQ29tcG9uZW50JywgKCkgPT4ge1xuICBpdCgncmVuZGVyV2l0aFRoZW1lcyB3aXRob3V0IGNyYXNoaW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFRoZW1lKDxDbG91ZE1hcHMgaXNMb2FkaW5nPXtmYWxzZX0gbWFwcz17W119IGVycm9yPXtudWxsfSAvPik7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgvbm9TYXZlZE1hcHMvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBlcnJvciBtZXNzYWdlIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3InLCAoKSA9PiB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ1Rlc3QgRXJyb3InO1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFRoZW1lKFxuICAgICAgPENsb3VkTWFwcyBpc0xvYWRpbmc9e2ZhbHNlfSBtYXBzPXtbXX0gZXJyb3I9e3ttZXNzYWdlOiBlcnJvck1lc3NhZ2V9fSAvPlxuICAgICk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dChgRXJyb3Igd2hpbGUgZmV0Y2hpbmcgbWFwczogJHtlcnJvck1lc3NhZ2V9YCkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBsb2FkaW5nIHNwaW5uZXIgd2hlbiBpc0xvYWRpbmcgaXMgdHJ1ZScsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcldpdGhUaGVtZSg8Q2xvdWRNYXBzIGlzTG9hZGluZz17dHJ1ZX0gbWFwcz17W119IGVycm9yPXtudWxsfSAvPik7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnbW9kYWwubG9hZGluZ0RpYWxvZy5sb2FkaW5nJykpLnRvQmVJblRoZURvY3VtZW50KCk7IC8vIEVuc3VyZSB5b3VyIHNwaW5uZXIgaGFzICdkYXRhLXRlc3RpZD1cImxvYWRpbmctc3Bpbm5lclwiJ1xuICB9KTtcblxuICBpdCgncmVuZGVyV2l0aFRoZW1lcyBjb3JyZWN0IG51bWJlciBvZiBDbG91ZEl0ZW1zIGJhc2VkIG9uIG1hcHMgcHJvcCcsICgpID0+IHtcbiAgICBjb25zdCBtb2NrTWFwcyA9IFtcbiAgICAgIHtpZDogMSwgdGl0bGU6ICdtYXAnfSxcbiAgICAgIHtpZDogMiwgdGl0bGU6ICdtYXAnfSxcbiAgICAgIHtpZDogMywgdGl0bGU6ICdtYXAnfVxuICAgIF07XG4gICAgY29uc3Qge2dldEFsbEJ5VGV4dH0gPSByZW5kZXJXaXRoVGhlbWUoXG4gICAgICA8Q2xvdWRNYXBzIGlzTG9hZGluZz17ZmFsc2V9IG1hcHM9e21vY2tNYXBzfSBlcnJvcj17bnVsbH0gLz5cbiAgICApO1xuICAgIGV4cGVjdChnZXRBbGxCeVRleHQoJ21hcCcpKS50b0hhdmVMZW5ndGgobW9ja01hcHMubGVuZ3RoKTsgLy8gRW5zdXJlIHlvdXIgQ2xvdWRJdGVtIGhhcyAnZGF0YS10ZXN0aWQ9XCJjbG91ZC1pdGVtXCInXG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBtZXNzYWdlIHdoZW4gdGhlcmUgYXJlIG5vIG1hcHMnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXJXaXRoVGhlbWUoPENsb3VkTWFwcyBpc0xvYWRpbmc9e2ZhbHNlfSBtYXBzPXtbXX0gZXJyb3I9e251bGx9IC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KC9ub1NhdmVkTWFwcy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uU2VsZWN0TWFwIHdoZW4gYSBDbG91ZEl0ZW0gaXMgY2xpY2tlZCcsICgpID0+IHtcbiAgICBjb25zdCBtb2NrTWFwcyA9IFtcbiAgICAgIHtpZDogMSwgdGl0bGU6ICdtYXAnfSxcbiAgICAgIHtpZDogMiwgdGl0bGU6ICdtYXAnfSxcbiAgICAgIHtpZDogMywgdGl0bGU6ICdtYXAnfVxuICAgIF07XG4gICAgY29uc3Qgb25TZWxlY3RNYXAgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgcHJvdmlkZXIgPSAndGVzdFByb3ZpZGVyJztcbiAgICBjb25zdCB7Z2V0QWxsQnlUZXh0fSA9IHJlbmRlcldpdGhUaGVtZShcbiAgICAgIDxDbG91ZE1hcHNcbiAgICAgICAgcHJvdmlkZXI9e3Byb3ZpZGVyfVxuICAgICAgICBvblNlbGVjdE1hcD17b25TZWxlY3RNYXB9XG4gICAgICAgIGlzTG9hZGluZz17ZmFsc2V9XG4gICAgICAgIG1hcHM9e21vY2tNYXBzfVxuICAgICAgICBlcnJvcj17bnVsbH1cbiAgICAgIC8+XG4gICAgKTtcblxuICAgIGNvbnN0IGZpcnN0SXRlbSA9IGdldEFsbEJ5VGV4dCgnbWFwJylbMF07XG4gICAgZmlyZUV2ZW50LmNsaWNrKGZpcnN0SXRlbSk7XG4gICAgZXhwZWN0KG9uU2VsZWN0TWFwKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChwcm92aWRlciwgbW9ja01hcHNbMF0pO1xuICB9KTtcbn0pO1xuIl19