"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = VisConfigSliderFactory;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledComponents2 = require("../../common/styled-components");

var _rangeSlider = _interopRequireDefault(require("../../common/range-slider"));

var _localization = require("@kepler.gl/localization");

var _constants = require("@kepler.gl/constants");

var _ = require("../..");

var _utils = require("@kepler.gl/utils");

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

var InputWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  line-height: 12px;\n  margin-bottom: 12px;\n"])));

var CustomInputWrapper = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n"])));

var CustomInputLabel = _styledComponents["default"].label(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  font-weight: 500;\n  letter-spacing: 0.2px;\n  font-size: ", ";\n  padding-right: 15px;\n\n  &:last-child {\n    position: absolute;\n    right: 0;\n    padding: 0;\n  }\n"])), function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.layerConfigGroupLabelLabelFontSize;
});

var RangeInput = _styledComponents["default"].input(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  ", ";\n  font-size: ", ";\n  width: 44px;\n  overflow: auto;\n  height: 20px;\n  margin-top: 5px;\n"])), function (props) {
  return props.theme.input;
}, function (props) {
  return props.theme.sliderInputFontSize;
});

var LazyInput = function LazyInput(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      name = _ref.name;

  var _useState = (0, _react.useState)(value),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      stateValue = _useState2[0],
      setValue = _useState2[1];

  var inputRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    setValue(value);
  }, [value]);
  var onKeyDown = (0, _react.useCallback)(function (e) {
    switch (e.keyCode) {
      case _constants.KeyEvent.DOM_VK_ENTER:
      case _constants.KeyEvent.DOM_VK_RETURN:
        onChange(stateValue);

        if (inputRef !== null) {
          // @ts-ignore
          inputRef === null || inputRef === void 0 ? void 0 : inputRef.current.blur();
        }

        break;

      default:
        break;
    }
  }, [onChange, stateValue]);

  var _onChange = (0, _react.useCallback)(function (e) {
    return setValue(e.target.value);
  }, [setValue]);

  var onBlur = (0, _react.useCallback)(function () {
    return onChange(name, stateValue);
  }, [onChange, name, stateValue]);
  return /*#__PURE__*/_react["default"].createElement(RangeInput, {
    type: "number",
    ref: inputRef,
    value: stateValue,
    onChange: _onChange,
    onBlur: onBlur,
    onKeyDown: onKeyDown,
    id: name
  });
};

var CustomInput = function CustomInput(_ref2) {
  var isRanged = _ref2.isRanged,
      value = _ref2.value,
      onChangeCustomInput = _ref2.onChangeCustomInput;
  var onChangeInput = (0, _react.useCallback)(function (name, v) {
    if (isRanged) onChangeCustomInput(name === 'value0' ? [v, value[1]] : [value[0], v]);else onChangeCustomInput(v);
  }, [isRanged, value, onChangeCustomInput]);
  return /*#__PURE__*/_react["default"].createElement(CustomInputWrapper, null, isRanged ? /*#__PURE__*/_react["default"].createElement(InputWrapper, null, /*#__PURE__*/_react["default"].createElement(CustomInputLabel, null, "min", /*#__PURE__*/_react["default"].createElement(LazyInput, {
    name: "value0",
    value: value[0],
    onChange: onChangeInput
  })), /*#__PURE__*/_react["default"].createElement(CustomInputLabel, null, "max", /*#__PURE__*/_react["default"].createElement(LazyInput, {
    name: "value1",
    value: value[1],
    onChange: onChangeInput
  }))) : /*#__PURE__*/_react["default"].createElement(InputWrapper, null, /*#__PURE__*/_react["default"].createElement(LazyInput, {
    name: "value",
    value: value,
    onChange: onChangeInput
  })));
};

VisConfigSliderFactory.deps = [_rangeSlider["default"]];

function VisConfigSliderFactory(RangeSlider) {
  var VisConfigSlider = function VisConfigSlider(_ref3) {
    var config = _ref3.layer.config,
        property = _ref3.property,
        label = _ref3.label,
        range = _ref3.range,
        step = _ref3.step,
        isRanged = _ref3.isRanged,
        allowCustomValue = _ref3.allowCustomValue,
        disabled = _ref3.disabled,
        _onChange4 = _ref3.onChange,
        inputTheme = _ref3.inputTheme;
    var value = config.visConfig[property];

    var _useState3 = (0, _react.useState)(false || !(0, _utils.isInRange)(value, range)),
        _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
        custom = _useState4[0],
        setCustom = _useState4[1];

    var onChangeCheckbox = (0, _react.useCallback)(function () {
      if (custom) {
        // we are swithcing from custom to not custom
        // adjust value to range
        var adjustedValue = isRanged ? [(0, _utils.clamp)(range, value[0]), (0, _utils.clamp)(range, value[1])] : (0, _utils.clamp)(range, value);

        _onChange4((0, _defineProperty2["default"])({}, property, adjustedValue));
      }

      setCustom(!custom);
    }, [_onChange4, property, isRanged, value, range, custom, setCustom]);
    return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, {
      disabled: Boolean(disabled)
    }, label ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, typeof label === 'string' ? /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: label
    }) : typeof label === 'function' ? /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: label(config)
    }) : /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "property.".concat(property)
    })) : null, allowCustomValue ? /*#__PURE__*/_react["default"].createElement(InputWrapper, null, /*#__PURE__*/_react["default"].createElement(CustomInputLabel, null, "custom input"), /*#__PURE__*/_react["default"].createElement(_.Checkbox, {
      id: "property.".concat(property),
      checked: custom,
      onChange: onChangeCheckbox
    })) : null, !custom ? /*#__PURE__*/_react["default"].createElement(RangeSlider, {
      range: range,
      value0: isRanged ? value[0] : range[0],
      value1: isRanged ? value[1] : value,
      step: step,
      isRanged: Boolean(isRanged),
      onChange: function onChange(v) {
        return _onChange4((0, _defineProperty2["default"])({}, property, isRanged ? v : v[1]));
      },
      inputTheme: inputTheme,
      showInput: true
    }) : /*#__PURE__*/_react["default"].createElement(CustomInput, {
      isRanged: isRanged,
      value: value,
      onChangeCustomInput: function onChangeCustomInput(v) {
        return _onChange4((0, _defineProperty2["default"])({}, property, v));
      }
    }));
  };

  return VisConfigSlider;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,