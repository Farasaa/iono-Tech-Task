"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("@kepler.gl/constants");

var _icons = require("../common/icons");

var _styledComponents = require("../common/styled-components");

var _toolbarItem = _interopRequireDefault(require("../common/toolbar-item"));

var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));

var _mapControlToolbar = _interopRequireDefault(require("./map-control-toolbar"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
MapDrawPanelFactory.deps = [_mapControlTooltip["default"], _mapControlToolbar["default"]];

function MapDrawPanelFactory(MapControlTooltip, MapControlToolbar) {
  var defaultActionIcons = {
    visible: _icons.EyeSeen,
    hidden: _icons.EyeUnseen,
    polygon: _icons.DrawPolygon,
    cursor: _icons.CursorClick,
    innerPolygon: _icons.Polygon,
    rectangle: _icons.Rectangle
  };

  var MapDrawPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var _mapControls$mapDraw, _mapControls$mapDraw2;

    var editor = _ref.editor,
        mapControls = _ref.mapControls,
        onToggleMapControl = _ref.onToggleMapControl,
        onSetEditorMode = _ref.onSetEditorMode,
        _ref$actionIcons = _ref.actionIcons,
        actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons;
    var isActive = mapControls === null || mapControls === void 0 ? void 0 : (_mapControls$mapDraw = mapControls.mapDraw) === null || _mapControls$mapDraw === void 0 ? void 0 : _mapControls$mapDraw.active;
    var onToggleMenuPanel = (0, _react.useCallback)(function () {
      return onToggleMapControl('mapDraw');
    }, [onToggleMapControl]);

    if (!(mapControls !== null && mapControls !== void 0 && (_mapControls$mapDraw2 = mapControls.mapDraw) !== null && _mapControls$mapDraw2 !== void 0 && _mapControls$mapDraw2.show)) {
      return null;
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "map-draw-controls",
      style: {
        position: 'relative'
      }
    }, isActive ? /*#__PURE__*/_react["default"].createElement(MapControlToolbar, {
      show: isActive
    }, /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "edit-feature",
      onClick: function onClick() {
        return onSetEditorMode(_constants.EDITOR_MODES.EDIT);
      },
      label: "toolbar.select",
      icon: actionIcons.cursor,
      active: editor.mode === _constants.EDITOR_MODES.EDIT
    }), /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "draw-feature",
      onClick: function onClick() {
        return onSetEditorMode(_constants.EDITOR_MODES.DRAW_POLYGON);
      },
      label: "toolbar.polygon",
      icon: actionIcons.innerPolygon,
      active: editor.mode === _constants.EDITOR_MODES.DRAW_POLYGON
    }), /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "draw-rectangle",
      onClick: function onClick() {
        return onSetEditorMode(_constants.EDITOR_MODES.DRAW_RECTANGLE);
      },
      label: "toolbar.rectangle",
      icon: actionIcons.rectangle,
      active: editor.mode === _constants.EDITOR_MODES.DRAW_RECTANGLE
    })) : null, /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "map-draw",
      message: "tooltip.DrawOnMap"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      className: (0, _classnames["default"])('map-control-button', 'map-draw', {
        isActive: isActive
      }),
      onClick: function onClick(e) {
        e.preventDefault();
        onToggleMenuPanel();
      },
      active: isActive
    }, /*#__PURE__*/_react["default"].createElement(actionIcons.polygon, {
      height: "22px"
    }))));
  });

  MapDrawPanel.displayName = 'MapDrawPanel';
  return MapDrawPanel;
}

var _default = MapDrawPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvbWFwLWRyYXctcGFuZWwudHN4Il0sIm5hbWVzIjpbIk1hcERyYXdQYW5lbEZhY3RvcnkiLCJkZXBzIiwiTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5IiwiTWFwQ29udHJvbFRvb2xiYXJGYWN0b3J5IiwiTWFwQ29udHJvbFRvb2x0aXAiLCJNYXBDb250cm9sVG9vbGJhciIsImRlZmF1bHRBY3Rpb25JY29ucyIsInZpc2libGUiLCJFeWVTZWVuIiwiaGlkZGVuIiwiRXllVW5zZWVuIiwicG9seWdvbiIsIkRyYXdQb2x5Z29uIiwiY3Vyc29yIiwiQ3Vyc29yQ2xpY2siLCJpbm5lclBvbHlnb24iLCJQb2x5Z29uIiwicmVjdGFuZ2xlIiwiUmVjdGFuZ2xlIiwiTWFwRHJhd1BhbmVsIiwiUmVhY3QiLCJtZW1vIiwiZWRpdG9yIiwibWFwQ29udHJvbHMiLCJvblRvZ2dsZU1hcENvbnRyb2wiLCJvblNldEVkaXRvck1vZGUiLCJhY3Rpb25JY29ucyIsImlzQWN0aXZlIiwibWFwRHJhdyIsImFjdGl2ZSIsIm9uVG9nZ2xlTWVudVBhbmVsIiwic2hvdyIsInBvc2l0aW9uIiwiRURJVE9SX01PREVTIiwiRURJVCIsIm1vZGUiLCJEUkFXX1BPTFlHT04iLCJEUkFXX1JFQ1RBTkdMRSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRpc3BsYXlOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQVhBO0FBQ0E7QUFjQUEsbUJBQW1CLENBQUNDLElBQXBCLEdBQTJCLENBQUNDLDZCQUFELEVBQTJCQyw2QkFBM0IsQ0FBM0I7O0FBV0EsU0FBU0gsbUJBQVQsQ0FDRUksaUJBREYsRUFFRUMsaUJBRkYsRUFHRTtBQUNBLE1BQU1DLGtCQUFrQixHQUFHO0FBQ3pCQyxJQUFBQSxPQUFPLEVBQUVDLGNBRGdCO0FBRXpCQyxJQUFBQSxNQUFNLEVBQUVDLGdCQUZpQjtBQUd6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LEVBQUVIO0FBTlYsb0JBUUUsZ0NBQUMsV0FBRCxDQUFhLE9BQWI7QUFBcUIsTUFBQSxNQUFNLEVBQUM7QUFBNUIsTUFSRixDQURGLENBMUJGLENBREY7QUF5Q0QsR0F4RCtDLENBQWxEOztBQTJEQVIsRUFBQUEsWUFBWSxDQUFDcUIsV0FBYixHQUEyQixjQUEzQjtBQUNBLFNBQU9yQixZQUFQO0FBQ0Q7O2VBRWNuQixtQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHtFRElUT1JfTU9ERVN9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7Q3Vyc29yQ2xpY2ssIERyYXdQb2x5Z29uLCBFeWVTZWVuLCBFeWVVbnNlZW4sIFBvbHlnb24sIFJlY3RhbmdsZX0gZnJvbSAnLi4vY29tbW9uL2ljb25zJztcbmltcG9ydCB7TWFwQ29udHJvbEJ1dHRvbn0gZnJvbSAnLi4vY29tbW9uL3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBUb29sYmFySXRlbSBmcm9tICcuLi9jb21tb24vdG9vbGJhci1pdGVtJztcbmltcG9ydCBNYXBDb250cm9sVG9vbHRpcEZhY3RvcnkgZnJvbSAnLi9tYXAtY29udHJvbC10b29sdGlwJztcbmltcG9ydCBNYXBDb250cm9sVG9vbGJhckZhY3RvcnkgZnJvbSAnLi9tYXAtY29udHJvbC10b29sYmFyJztcbmltcG9ydCB7RWRpdG9yLCBNYXBDb250cm9sc30gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge0Jhc2VQcm9wc30gZnJvbSAnLi4vY29tbW9uL2ljb25zJztcblxuTWFwRHJhd1BhbmVsRmFjdG9yeS5kZXBzID0gW01hcENvbnRyb2xUb29sdGlwRmFjdG9yeSwgTWFwQ29udHJvbFRvb2xiYXJGYWN0b3J5XTtcblxuZXhwb3J0IHR5cGUgTWFwRHJhd1BhbmVsUHJvcHMgPSB7XG4gIGVkaXRvcjogRWRpdG9yO1xuICBtYXBDb250cm9sczogTWFwQ29udHJvbHM7XG4gIG9uVG9nZ2xlTWFwQ29udHJvbDogKGNvbnRyb2w6IHN0cmluZykgPT4gdm9pZDtcbiAgb25TZXRFZGl0b3JNb2RlOiAobW9kZTogc3RyaW5nKSA9PiB2b2lkO1xuICBvblRvZ2dsZUVkaXRvclZpc2liaWxpdHk6ICgpID0+IHZvaWQ7XG4gIGFjdGlvbkljb25zOiB7W2lkOiBzdHJpbmddOiBSZWFjdC5Db21wb25lbnRUeXBlPFBhcnRpYWw8QmFzZVByb3BzPj59O1xufTtcblxuZnVuY3Rpb24gTWFwRHJhd1BhbmVsRmFjdG9yeShcbiAgTWFwQ29udHJvbFRvb2x0aXA6IFJldHVyblR5cGU8dHlwZW9mIE1hcENvbnRyb2xUb29sdGlwRmFjdG9yeT4sXG4gIE1hcENvbnRyb2xUb29sYmFyOiBSZXR1cm5UeXBlPHR5cGVvZiBNYXBDb250cm9sVG9vbGJhckZhY3Rvcnk+XG4pIHtcbiAgY29uc3QgZGVmYXVsdEFjdGlvbkljb25zID0ge1xuICAgIHZpc2libGU6IEV5ZVNlZW4sXG4gICAgaGlkZGVuOiBFeWVVbnNlZW4sXG4gICAgcG9seWdvbjogRHJhd1BvbHlnb24sXG4gICAgY3Vyc29yOiBDdXJzb3JDbGljayxcbiAgICBpbm5lclBvbHlnb246IFBvbHlnb24sXG4gICAgcmVjdGFuZ2xlOiBSZWN0YW5nbGVcbiAgfTtcblxuICBjb25zdCBNYXBEcmF3UGFuZWw6IFJlYWN0LkZDPE1hcERyYXdQYW5lbFByb3BzPiA9IFJlYWN0Lm1lbW8oXG4gICAgKHtcbiAgICAgIGVkaXRvcixcbiAgICAgIG1hcENvbnRyb2xzLFxuICAgICAgb25Ub2dnbGVNYXBDb250cm9sLFxuICAgICAgb25TZXRFZGl0b3JNb2RlLFxuICAgICAgYWN0aW9uSWNvbnMgPSBkZWZhdWx0QWN0aW9uSWNvbnNcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCBpc0FjdGl2ZSA9IG1hcENvbnRyb2xzPy5tYXBEcmF3Py5hY3RpdmU7XG4gICAgICBjb25zdCBvblRvZ2dsZU1lbnVQYW5lbCA9IHVzZUNhbGxiYWNrKCgpID0+IG9uVG9nZ2xlTWFwQ29udHJvbCgnbWFwRHJhdycpLCBbXG4gICAgICAgIG9uVG9nZ2xlTWFwQ29udHJvbFxuICAgICAgXSk7XG4gICAgICBpZiAoIW1hcENvbnRyb2xzPy5tYXBEcmF3Py5zaG93KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXAtZHJhdy1jb250cm9sc1wiIHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZSd9fT5cbiAgICAgICAgICB7aXNBY3RpdmUgPyAoXG4gICAgICAgICAgICA8TWFwQ29udHJvbFRvb2xiYXIgc2hvdz17aXNBY3RpdmV9PlxuICAgICAgICAgICAgICA8VG9vbGJhckl0ZW1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlZGl0LWZlYXR1cmVcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2V0RWRpdG9yTW9kZShFRElUT1JfTU9ERVMuRURJVCl9XG4gICAgICAgICAgICAgICAgbGFiZWw9XCJ0b29sYmFyLnNlbGVjdFwiXG4gICAgICAgICAgICAgICAgaWNvbj17YWN0aW9uSWNvbnMuY3Vyc29yfVxuICAgICAgICAgICAgICAgIGFjdGl2ZT17ZWRpdG9yLm1vZGUgPT09IEVESVRPUl9NT0RFUy5FRElUfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8VG9vbGJhckl0ZW1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkcmF3LWZlYXR1cmVcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2V0RWRpdG9yTW9kZShFRElUT1JfTU9ERVMuRFJBV19QT0xZR09OKX1cbiAgICAgICAgICAgICAgICBsYWJlbD1cInRvb2xiYXIucG9seWdvblwiXG4gICAgICAgICAgICAgICAgaWNvbj17YWN0aW9uSWNvbnMuaW5uZXJQb2x5Z29ufVxuICAgICAgICAgICAgICAgIGFjdGl2ZT17ZWRpdG9yLm1vZGUgPT09IEVESVRPUl9NT0RFUy5EUkFXX1BPTFlHT059XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxUb29sYmFySXRlbVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRyYXctcmVjdGFuZ2xlXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblNldEVkaXRvck1vZGUoRURJVE9SX01PREVTLkRSQVdfUkVDVEFOR0xFKX1cbiAgICAgICAgICAgICAgICBsYWJlbD1cInRvb2xiYXIucmVjdGFuZ2xlXCJcbiAgICAgICAgICAgICAgICBpY29uPXthY3Rpb25JY29ucy5yZWN0YW5nbGV9XG4gICAgICAgICAgICAgICAgYWN0aXZlPXtlZGl0b3IubW9kZSA9PT0gRURJVE9SX01PREVTLkRSQVdfUkVDVEFOR0xFfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9NYXBDb250cm9sVG9vbGJhcj5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICA8TWFwQ29udHJvbFRvb2x0aXAgaWQ9XCJtYXAtZHJhd1wiIG1lc3NhZ2U9XCJ0b29sdGlwLkRyYXdPbk1hcFwiPlxuICAgICAgICAgICAgPE1hcENvbnRyb2xCdXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdtYXAtY29udHJvbC1idXR0b24nLCAnbWFwLWRyYXcnLCB7aXNBY3RpdmV9KX1cbiAgICAgICAgICAgICAgb25DbGljaz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIG9uVG9nZ2xlTWVudVBhbmVsKCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGFjdGl2ZT17aXNBY3RpdmV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxhY3Rpb25JY29ucy5wb2x5Z29uIGhlaWdodD1cIjIycHhcIiAvPlxuICAgICAgICAgICAgPC9NYXBDb250cm9sQnV0dG9uPlxuICAgICAgICAgIDwvTWFwQ29udHJvbFRvb2x0aXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gICk7XG5cbiAgTWFwRHJhd1BhbmVsLmRpc3BsYXlOYW1lID0gJ01hcERyYXdQYW5lbCc7XG4gIHJldHVybiBNYXBEcmF3UGFuZWw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hcERyYXdQYW5lbEZhY3Rvcnk7XG4iXX0=