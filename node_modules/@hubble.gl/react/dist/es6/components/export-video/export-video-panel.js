import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";

function _templateObject4() {
  const data = _taggedTemplateLiteral(["\n  width: ", "px;\n"]);

  _templateObject4 = function () {
    return data;
  };

  return data;
}

function _templateObject3() {
  const data = _taggedTemplateLiteral(["\n  padding: 0 ", "px;\n  display: grid;\n  grid-template-columns: ", "px ", "px;\n  grid-template-rows: auto;\n  grid-column-gap: ", "px;\n"]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: 20px;\n  font-weight: 400;\n  line-height: ", ";\n  padding: 0 ", "px 16px ", "px;\n"]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: flex-end;\n  padding: ", "px ", "px 0 ", "px;\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

import React from 'react';
import styled, { withTheme } from 'styled-components';
import { DEFAULT_PADDING, DEFAULT_ICON_BUTTON_HEIGHT, DEFAULT_ROW_GAP, DEFAULT_SETTINGS_WIDTH } from './constants';
import ExportVideoPanelSettings from './export-video-panel-settings';
import { ExportVideoPanelPreview } from './export-video-panel-preview';
import ExportVideoPanelFooter from './export-video-panel-footer';
import { WithKeplerUI } from '../inject-kepler';
const PanelCloseInner = styled.div(_templateObject(), DEFAULT_PADDING, DEFAULT_PADDING, DEFAULT_PADDING);

const PanelClose = ({
  handleClose
}) => React.createElement(WithKeplerUI, null, ({
  IconButton,
  Icons
}) => React.createElement(PanelCloseInner, {
  className: "export-video-panel__close"
}, React.createElement(IconButton, {
  className: "export-video-panel__button",
  link: true,
  onClick: handleClose
}, React.createElement(Icons.Delete, {
  height: DEFAULT_ICON_BUTTON_HEIGHT
}))));

const StyledTitle = styled.div(_templateObject2(), props => props.theme.titleTextColor, props => props.theme.lineHeight, DEFAULT_PADDING, DEFAULT_PADDING);
const PanelBodyInner = styled.div(_templateObject3(), DEFAULT_PADDING, props => props.exportVideoWidth, DEFAULT_SETTINGS_WIDTH, DEFAULT_ROW_GAP);

const PanelBody = ({
  exportVideoWidth,
  mapData,
  adapter,
  setViewState,
  setMediaType,
  setCameraPreset,
  setFileName,
  setResolution,
  settingsData,
  durationMs,
  frameRate,
  resolution,
  mediaType,
  viewState,
  setDuration
}) => React.createElement(PanelBodyInner, {
  className: "export-video-panel__body",
  exportVideoWidth: exportVideoWidth
}, React.createElement(ExportVideoPanelPreview, {
  mapData: mapData,
  adapter: adapter,
  setViewState: setViewState,
  exportVideoWidth: exportVideoWidth,
  resolution: resolution,
  viewState: viewState
}), React.createElement(ExportVideoPanelSettings, {
  setMediaType: setMediaType,
  setCameraPreset: setCameraPreset,
  setFileName: setFileName,
  setResolution: setResolution,
  settingsData: settingsData,
  durationMs: durationMs,
  frameRate: frameRate,
  resolution: resolution,
  mediaType: mediaType,
  setDuration: setDuration
}));

const Panel = styled.div(_templateObject4(), props => props.exportVideoWidth + 2 * DEFAULT_PADDING + DEFAULT_ROW_GAP + DEFAULT_SETTINGS_WIDTH);

const ExportVideoPanel = ({
  exportVideoWidth,
  handleClose,
  header,
  mapData,
  setViewState,
  settingsData,
  setMediaType,
  setCameraPreset,
  setFileName,
  setResolution,
  adapter,
  handlePreviewVideo,
  handleRenderVideo,
  durationMs,
  frameRate,
  resolution,
  mediaType,
  viewState,
  setDuration
}) => {
  return React.createElement(Panel, {
    exportVideoWidth: exportVideoWidth,
    className: "export-video-panel"
  }, header !== false ? React.createElement(React.Fragment, null, React.createElement(PanelClose, {
    handleClose: handleClose
  }), React.createElement(StyledTitle, {
    className: "export-video-panel__title"
  }, "Export Video")) : null, React.createElement(PanelBody, {
    exportVideoWidth: exportVideoWidth,
    mapData: mapData,
    adapter: adapter,
    setMediaType: setMediaType,
    setCameraPreset: setCameraPreset,
    setFileName: setFileName,
    setResolution: setResolution,
    settingsData: settingsData,
    setViewState: setViewState,
    durationMs: durationMs,
    frameRate: frameRate,
    resolution: resolution,
    mediaType: mediaType,
    viewState: viewState,
    setDuration: setDuration
  }), React.createElement(ExportVideoPanelFooter, {
    handleClose: handleClose,
    handlePreviewVideo: handlePreviewVideo,
    handleRenderVideo: handleRenderVideo
  }));
};

export default withTheme(ExportVideoPanel);
//# sourceMappingURL=export-video-panel.js.map