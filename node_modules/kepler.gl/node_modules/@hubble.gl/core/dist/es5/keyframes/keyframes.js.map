{"version":3,"sources":["../../../src/keyframes/keyframes.js"],"names":["Keyframes","features","timings","keyframes","easings","_setActiveFeatures","bind","getFrame","length","Error","_easings","_timings","activeFeatures","reduce","feature","_keyframes","setKeyFrames","firstKeyframe","Object","keys","key","undefined","factor","start","getStartData","end","getEndData","frame","forEach","ease","LumaKeyFrames"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AACA;;;;;;IAEMA,S;;;;;AAEJ,2BAAqD;AAAA;;AAAA,QAAxCC,QAAwC,QAAxCA,QAAwC;AAAA,QAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,QAArBC,SAAqB,QAArBA,SAAqB;AAAA,QAAVC,OAAU,QAAVA,OAAU;AAAA;AACnD,8BAAM,EAAN;AADmD,uGADpC,EACoC;AAEnD,UAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,gDAA1B;AACA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcD,IAAd,gDAAhB;;AAEA,QAAIH,SAAS,CAACK,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,QAAMC,QAAQ,GAAG,4BAAgBP,SAAhB,EAA2BC,OAA3B,CAAjB;;AAEA,QAAMO,QAAQ,GAAG,4BAAgBR,SAAhB,EAA2BD,OAA3B,CAAjB;;AAEA,UAAKU,cAAL,GAAsBX,QAAQ,CAACY,MAAT,CAAgB,UAACD,cAAD,EAAiBE,OAAjB,EAA6B;AACjEF,MAAAA,cAAc,CAACE,OAAD,CAAd,GAA0B,KAA1B;AACA,aAAOF,cAAP;AACD,KAHqB,EAGnB,EAHmB,CAAtB;;AAKA,UAAKP,kBAAL,CAAwBF,SAAxB;;AACA,QAAMY,UAAU,GAAG,kBAAMJ,QAAN,EAAgBR,SAAhB,EAA2BO,QAA3B,CAAnB;;AACA,UAAKM,YAAL,CAAkBD,UAAlB;;AApBmD;AAqBpD;;;;uCAEkBZ,S,EAAW;AAC5B,UAAMc,aAAa,GAAGd,SAAS,CAAC,CAAD,CAA/B;AACA,WAAKS,cAAL,GAAsBM,MAAM,CAACC,IAAP,CAAYF,aAAZ,EAA2BJ,MAA3B,CAAkC,UAACD,cAAD,EAAiBQ,GAAjB,EAAyB;AAE/E,YAAIH,aAAa,CAACG,GAAD,CAAb,KAAuBC,SAA3B,EAAsC;AACpCT,UAAAA,cAAc,CAACQ,GAAD,CAAd,GAAsB,IAAtB;AACD;;AACD,eAAOR,cAAP;AACD,OANqB,EAMnB,KAAKA,cANc,CAAtB;AAOD;;;+BAEU;AAAA;;AACT,UAAMU,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,KAAK,GAAG,KAAKC,YAAL,EAAd;AACA,UAAMC,GAAG,GAAG,KAAKC,UAAL,EAAZ;AACA,UAAMC,KAAK,GAAG,EAAd;AAEAT,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKP,cAAjB,EAAiCgB,OAAjC,CAAyC,UAAAR,GAAG,EAAI;AAC9C,YAAI,MAAI,CAACR,cAAL,CAAoBQ,GAApB,CAAJ,EAA8B;AAC5BO,UAAAA,KAAK,CAACP,GAAD,CAAL,GAAa,+BAAmBG,KAAK,CAACH,GAAD,CAAxB,EAA+BK,GAAG,CAACL,GAAD,CAAlC,EAAyCK,GAAG,CAACI,IAA7C,EAAmDP,MAAnD,CAAb;AACD;AACF,OAJD;AAMA,aAAOK,KAAP;AACD;;;EAjDqBG,iB;;eAoDT9B,S","sourcesContent":["// Copyright (c) 2020 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {KeyFrames as LumaKeyFrames} from '@luma.gl/engine';\nimport {sanitizeEasings, merge, sanitizeTimings, factorInterpolator} from './utils';\n\nclass Keyframes extends LumaKeyFrames {\n  activeFeatures = {};\n  constructor({features, timings, keyframes, easings}) {\n    super([]);\n    this._setActiveFeatures = this._setActiveFeatures.bind(this);\n    this.getFrame = this.getFrame.bind(this);\n\n    if (keyframes.length === 0) {\n      throw new Error('There must be at least one keyframe');\n    }\n\n    const _easings = sanitizeEasings(keyframes, easings);\n\n    const _timings = sanitizeTimings(keyframes, timings);\n\n    this.activeFeatures = features.reduce((activeFeatures, feature) => {\n      activeFeatures[feature] = false;\n      return activeFeatures;\n    }, {});\n\n    this._setActiveFeatures(keyframes);\n    const _keyframes = merge(_timings, keyframes, _easings);\n    this.setKeyFrames(_keyframes);\n  }\n\n  _setActiveFeatures(keyframes) {\n    const firstKeyframe = keyframes[0];\n    this.activeFeatures = Object.keys(firstKeyframe).reduce((activeFeatures, key) => {\n      // activate only keys that are expected\n      if (firstKeyframe[key] !== undefined) {\n        activeFeatures[key] = true;\n      }\n      return activeFeatures;\n    }, this.activeFeatures);\n  }\n\n  getFrame() {\n    const factor = this.factor;\n    const start = this.getStartData();\n    const end = this.getEndData();\n    const frame = {};\n\n    Object.keys(this.activeFeatures).forEach(key => {\n      if (this.activeFeatures[key]) {\n        frame[key] = factorInterpolator(start[key], end[key], end.ease)(factor);\n      }\n    });\n\n    return frame;\n  }\n}\n\nexport default Keyframes;\n"],"file":"keyframes.js"}