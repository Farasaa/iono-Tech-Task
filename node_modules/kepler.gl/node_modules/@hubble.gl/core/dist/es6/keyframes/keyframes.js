import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { KeyFrames as LumaKeyFrames } from '@luma.gl/engine';
import { sanitizeEasings, merge, sanitizeTimings, factorInterpolator } from './utils';

class Keyframes extends LumaKeyFrames {
  constructor({
    features,
    timings,
    keyframes,
    easings
  }) {
    super([]);

    _defineProperty(this, "activeFeatures", {});

    this._setActiveFeatures = this._setActiveFeatures.bind(this);
    this.getFrame = this.getFrame.bind(this);

    if (keyframes.length === 0) {
      throw new Error('There must be at least one keyframe');
    }

    const _easings = sanitizeEasings(keyframes, easings);

    const _timings = sanitizeTimings(keyframes, timings);

    this.activeFeatures = features.reduce((activeFeatures, feature) => {
      activeFeatures[feature] = false;
      return activeFeatures;
    }, {});

    this._setActiveFeatures(keyframes);

    const _keyframes = merge(_timings, keyframes, _easings);

    this.setKeyFrames(_keyframes);
  }

  _setActiveFeatures(keyframes) {
    const firstKeyframe = keyframes[0];
    this.activeFeatures = Object.keys(firstKeyframe).reduce((activeFeatures, key) => {
      if (firstKeyframe[key] !== undefined) {
        activeFeatures[key] = true;
      }

      return activeFeatures;
    }, this.activeFeatures);
  }

  getFrame() {
    const factor = this.factor;
    const start = this.getStartData();
    const end = this.getEndData();
    const frame = {};
    Object.keys(this.activeFeatures).forEach(key => {
      if (this.activeFeatures[key]) {
        frame[key] = factorInterpolator(start[key], end[key], end.ease)(factor);
      }
    });
    return frame;
  }

}

export default Keyframes;
//# sourceMappingURL=keyframes.js.map