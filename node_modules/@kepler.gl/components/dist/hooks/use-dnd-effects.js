"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _reactRedux = require("react-redux");

var _actions = require("@kepler.gl/actions");

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var useDndEffects = function useDndEffects(effects, effectOrder) {
  var dispatch = (0, _reactRedux.useDispatch)();

  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      activeEffect = _useState2[0],
      setActiveEffect = _useState2[1];

  var onEffectDragStart = (0, _react.useCallback)(function (event) {
    var active = event.active;
    var newActiveEffect = effects.find(function (effect) {
      return effect.id === active.id;
    });

    if (newActiveEffect) {
      setActiveEffect(newActiveEffect);

      if (newActiveEffect.isConfigActive) {
        dispatch((0, _actions.updateEffect)(newActiveEffect.id, {
          isConfigActive: false
        }));
      }
    }
  }, [dispatch, effects]);
  var onEffectDragEnd = (0, _react.useCallback)(function (event) {
    var _over$data, _over$data$current;

    var active = event.active,
        over = event.over;
    var activeEffectId = active.id;
    var overType = over === null || over === void 0 ? void 0 : (_over$data = over.data) === null || _over$data === void 0 ? void 0 : (_over$data$current = _over$data.current) === null || _over$data$current === void 0 ? void 0 : _over$data$current.type;

    if (!overType) {
      setActiveEffect(undefined);
      return;
    }

    switch (overType) {
      // swaping effects
      case _constants.SORTABLE_EFFECT_TYPE:
        dispatch((0, _actions.reorderEffect)((0, _utils.reorderEffectOrder)(effectOrder, activeEffectId, over.id)));
        break;
      //  moving effects within side panel

      case _constants.SORTABLE_EFFECT_PANEL_TYPE:
        // move effect to the end of the list
        dispatch((0, _actions.reorderEffect)((0, _utils.reorderEffectOrder)(effectOrder, activeEffectId, effectOrder[effectOrder.length - 1])));
        break;

      default:
        break;
    }

    setActiveEffect(undefined);
  }, [dispatch, effectOrder]);
  return {
    activeEffect: activeEffect,
    onDragStart: onEffectDragStart,
    onDragEnd: onEffectDragEnd
  };
};

var _default = useDndEffects;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2UtZG5kLWVmZmVjdHMudHN4Il0sIm5hbWVzIjpbInVzZURuZEVmZmVjdHMiLCJlZmZlY3RzIiwiZWZmZWN0T3JkZXIiLCJkaXNwYXRjaCIsImFjdGl2ZUVmZmVjdCIsInNldEFjdGl2ZUVmZmVjdCIsIm9uRWZmZWN0RHJhZ1N0YXJ0IiwiZXZlbnQiLCJhY3RpdmUiLCJuZXdBY3RpdmVFZmZlY3QiLCJmaW5kIiwiZWZmZWN0IiwiaWQiLCJpc0NvbmZpZ0FjdGl2ZSIsIm9uRWZmZWN0RHJhZ0VuZCIsIm92ZXIiLCJhY3RpdmVFZmZlY3RJZCIsIm92ZXJUeXBlIiwiZGF0YSIsImN1cnJlbnQiLCJ0eXBlIiwidW5kZWZpbmVkIiwiU09SVEFCTEVfRUZGRUNUX1RZUEUiLCJTT1JUQUJMRV9FRkZFQ1RfUEFORUxfVFlQRSIsImxlbmd0aCIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnRW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUdBOztBQUNBOztBQUNBOztBQVRBO0FBQ0E7QUFpQkEsSUFBTUEsYUFBMkUsR0FBRyxTQUE5RUEsYUFBOEUsQ0FDbEZDLE9BRGtGLEVBRWxGQyxXQUZrRixFQUcvRTtBQUNILE1BQU1DLFFBQVEsR0FBRyw4QkFBakI7O0FBREcsa0JBRWdJLHNCQUZoSTtBQUFBO0FBQUEsTUFFSUMsWUFGSjtBQUFBLE1BRWtCQyxlQUZsQjs7QUFHSCxNQUFNQyxpQkFBaUIsR0FBRyx3QkFDeEIsVUFBQUMsS0FBSyxFQUFJO0FBQUEsUUFDQUMsTUFEQSxHQUNVRCxLQURWLENBQ0FDLE1BREE7QUFFUCxRQUFNQyxlQUFlLEdBQUdSLE9BQU8sQ0FBQ1MsSUFBUixDQUFhLFVBQUFDLE1BQU07QUFBQSxhQUFJQSxNQUFNLENBQUNDLEVBQVAsS0FBY0osTUFBTSxDQUFDSSxFQUF6QjtBQUFBLEtBQW5CLENBQXhCOztBQUNBLFFBQUlILGVBQUosRUFBcUI7QUFDbkJKLE1BQUFBLGVBQWUsQ0FBQ0ksZUFBRCxDQUFmOztBQUNBLFVBQUlBLGVBQWUsQ0FBQ0ksY0FBcEIsRUFBb0M7QUFDbENWLFFBQUFBLFFBQVEsQ0FBQywyQkFBYU0sZUFBZSxDQUFDRyxFQUE3QixFQUFpQztBQUFDQyxVQUFBQSxjQUFjLEVBQUU7QUFBakIsU0FBakMsQ0FBRCxDQUFSO0FBQ0Q7QUFDRjtBQUNGLEdBVnVCLEVBV3hCLENBQUNWLFFBQUQsRUFBV0YsT0FBWCxDQVh3QixDQUExQjtBQWNBLE1BQU1hLGVBQWUsR0FBRyx3QkFDdEIsVUFBQVAsS0FBSyxFQUFJO0FBQUE7O0FBQUEsUUFDQUMsTUFEQSxHQUNnQkQsS0FEaEIsQ0FDQUMsTUFEQTtBQUFBLFFBQ1FPLElBRFIsR0FDZ0JSLEtBRGhCLENBQ1FRLElBRFI7QUFBQSxRQUdJQyxjQUhKLEdBR3NCUixNQUh0QixDQUdBSSxFQUhBO0FBSVAsUUFBTUssUUFBUSxHQUFHRixJQUFILGFBQUdBLElBQUgscUNBQUdBLElBQUksQ0FBRUcsSUFBVCxxRUFBRyxXQUFZQyxPQUFmLHVEQUFHLG1CQUFxQkMsSUFBdEM7O0FBRUEsUUFBSSxDQUFDSCxRQUFMLEVBQWU7QUFDYlosTUFBQUEsZUFBZSxDQUFDZ0IsU0FBRCxDQUFmO0FBQ0E7QUFDRDs7QUFFRCxZQUFRSixRQUFSO0FBQ0U7QUFDQSxXQUFLSywrQkFBTDtBQUNFbkIsUUFBQUEsUUFBUSxDQUFDLDRCQUFjLCtCQUFtQkQsV0FBbkIsRUFBZ0NjLGNBQWhDLEVBQWdERCxJQUFJLENBQUNILEVBQXJELENBQWQsQ0FBRCxDQUFSO0FBQ0E7QUFDRjs7QUFDQSxXQUFLVyxxQ0FBTDtBQUNFO0FBQ0FwQixRQUFBQSxRQUFRLENBQ04sNEJBQ0UsK0JBQW1CRCxXQUFuQixFQUFnQ2MsY0FBaEMsRUFBZ0RkLFdBQVcsQ0FBQ0EsV0FBVyxDQUFDc0IsTUFBWixHQUFxQixDQUF0QixDQUEzRCxDQURGLENBRE0sQ0FBUjtBQUtBOztBQUNGO0FBQ0U7QUFmSjs7QUFrQkFuQixJQUFBQSxlQUFlLENBQUNnQixTQUFELENBQWY7QUFDRCxHQS9CcUIsRUFnQ3RCLENBQUNsQixRQUFELEVBQVdELFdBQVgsQ0FoQ3NCLENBQXhCO0FBbUNBLFNBQU87QUFBQ0UsSUFBQUEsWUFBWSxFQUFaQSxZQUFEO0FBQWVxQixJQUFBQSxXQUFXLEVBQUVuQixpQkFBNUI7QUFBK0NvQixJQUFBQSxTQUFTLEVBQUVaO0FBQTFELEdBQVA7QUFDRCxDQXhERDs7ZUEwRGVkLGEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge3VzZUNhbGxiYWNrLCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VEaXNwYXRjaH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtEcmFnRW5kRXZlbnQsIERyYWdTdGFydEV2ZW50fSBmcm9tICdAZG5kLWtpdC9jb3JlJztcblxuaW1wb3J0IHtyZW9yZGVyRWZmZWN0LCB1cGRhdGVFZmZlY3R9IGZyb20gJ0BrZXBsZXIuZ2wvYWN0aW9ucyc7XG5pbXBvcnQge1NPUlRBQkxFX0VGRkVDVF9QQU5FTF9UWVBFLCBTT1JUQUJMRV9FRkZFQ1RfVFlQRX0gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtyZW9yZGVyRWZmZWN0T3JkZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuaW1wb3J0IHtFZmZlY3R9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG50eXBlIERuZEVmZmVjdHNIb29rID0ge1xuICBhY3RpdmVFZmZlY3Q6IEVmZmVjdCB8IHVuZGVmaW5lZDtcbiAgb25EcmFnU3RhcnQ6IChldmVudDogRHJhZ1N0YXJ0RXZlbnQpID0+IHZvaWQ7XG4gIG9uRHJhZ0VuZDogKGV2ZW50OiBEcmFnRW5kRXZlbnQpID0+IHZvaWQ7XG59O1xuXG5jb25zdCB1c2VEbmRFZmZlY3RzOiAoZWZmZWN0czogRWZmZWN0W10sIGVmZmVjdE9yZGVyOiBzdHJpbmdbXSkgPT4gRG5kRWZmZWN0c0hvb2sgPSAoXG4gIGVmZmVjdHMsXG4gIGVmZmVjdE9yZGVyXG4pID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBbYWN0aXZlRWZmZWN0LCBzZXRBY3RpdmVFZmZlY3RdOiBbYWN0aXZlRWZmZWN0OiBFZmZlY3QgfCB1bmRlZmluZWQsIHNldEFjdGl2ZUVmZmVjdDogKGVmZmVjdDogRWZmZWN0IHwgdW5kZWZpbmVkKSA9PiB2b2lkXSA9IHVzZVN0YXRlKCk7XG4gIGNvbnN0IG9uRWZmZWN0RHJhZ1N0YXJ0ID0gdXNlQ2FsbGJhY2soXG4gICAgZXZlbnQgPT4ge1xuICAgICAgY29uc3Qge2FjdGl2ZX0gPSBldmVudDtcbiAgICAgIGNvbnN0IG5ld0FjdGl2ZUVmZmVjdCA9IGVmZmVjdHMuZmluZChlZmZlY3QgPT4gZWZmZWN0LmlkID09PSBhY3RpdmUuaWQpO1xuICAgICAgaWYgKG5ld0FjdGl2ZUVmZmVjdCkge1xuICAgICAgICBzZXRBY3RpdmVFZmZlY3QobmV3QWN0aXZlRWZmZWN0KTtcbiAgICAgICAgaWYgKG5ld0FjdGl2ZUVmZmVjdC5pc0NvbmZpZ0FjdGl2ZSkge1xuICAgICAgICAgIGRpc3BhdGNoKHVwZGF0ZUVmZmVjdChuZXdBY3RpdmVFZmZlY3QuaWQsIHtpc0NvbmZpZ0FjdGl2ZTogZmFsc2V9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtkaXNwYXRjaCwgZWZmZWN0c11cbiAgKTtcblxuICBjb25zdCBvbkVmZmVjdERyYWdFbmQgPSB1c2VDYWxsYmFjayhcbiAgICBldmVudCA9PiB7XG4gICAgICBjb25zdCB7YWN0aXZlLCBvdmVyfSA9IGV2ZW50O1xuXG4gICAgICBjb25zdCB7aWQ6IGFjdGl2ZUVmZmVjdElkfSA9IGFjdGl2ZTtcbiAgICAgIGNvbnN0IG92ZXJUeXBlID0gb3Zlcj8uZGF0YT8uY3VycmVudD8udHlwZTtcblxuICAgICAgaWYgKCFvdmVyVHlwZSkge1xuICAgICAgICBzZXRBY3RpdmVFZmZlY3QodW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKG92ZXJUeXBlKSB7XG4gICAgICAgIC8vIHN3YXBpbmcgZWZmZWN0c1xuICAgICAgICBjYXNlIFNPUlRBQkxFX0VGRkVDVF9UWVBFOlxuICAgICAgICAgIGRpc3BhdGNoKHJlb3JkZXJFZmZlY3QocmVvcmRlckVmZmVjdE9yZGVyKGVmZmVjdE9yZGVyLCBhY3RpdmVFZmZlY3RJZCwgb3Zlci5pZCkpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gIG1vdmluZyBlZmZlY3RzIHdpdGhpbiBzaWRlIHBhbmVsXG4gICAgICAgIGNhc2UgU09SVEFCTEVfRUZGRUNUX1BBTkVMX1RZUEU6XG4gICAgICAgICAgLy8gbW92ZSBlZmZlY3QgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgcmVvcmRlckVmZmVjdChcbiAgICAgICAgICAgICAgcmVvcmRlckVmZmVjdE9yZGVyKGVmZmVjdE9yZGVyLCBhY3RpdmVFZmZlY3RJZCwgZWZmZWN0T3JkZXJbZWZmZWN0T3JkZXIubGVuZ3RoIC0gMV0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc2V0QWN0aXZlRWZmZWN0KHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBbZGlzcGF0Y2gsIGVmZmVjdE9yZGVyXVxuICApO1xuXG4gIHJldHVybiB7YWN0aXZlRWZmZWN0LCBvbkRyYWdTdGFydDogb25FZmZlY3REcmFnU3RhcnQsIG9uRHJhZ0VuZDogb25FZmZlY3REcmFnRW5kfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZURuZEVmZmVjdHM7XG4iXX0=