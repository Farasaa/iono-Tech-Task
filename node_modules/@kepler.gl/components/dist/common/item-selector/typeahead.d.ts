import React, { Component, ElementType, KeyboardEventHandler } from 'react';
import DropdownList from './dropdown-list';
import { Search } from '../icons';
interface TypeaheadProps {
    name?: string;
    customClasses?: any;
    resultsTruncatedMessage?: string;
    options?: ReadonlyArray<string | number | boolean | object | undefined>;
    fixedOptions?: ReadonlyArray<string | number | boolean | object> | null;
    allowCustomValues?: number;
    initialValue?: string;
    value?: string;
    placeholder?: string;
    disabled?: boolean;
    textarea?: boolean;
    inputProps?: object;
    onOptionSelected?: (option: any, event: any) => any;
    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
    onKeyPress?: KeyboardEventHandler<HTMLDivElement>;
    onKeyUp?: KeyboardEventHandler<HTMLDivElement>;
    onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
    filterOption?: string | Function;
    searchOptions?: Function;
    displayOption?: string | Function;
    inputDisplayOption?: string | Function;
    formInputOption?: string | Function;
    defaultClassNames?: boolean;
    customListComponent?: ElementType;
    customListItemComponent?: ElementType | Function;
    customListHeaderComponent?: ElementType | Function | null;
    showOptionsWhenEmpty?: boolean;
    searchable?: boolean;
    light?: boolean;
    inputIcon: ElementType;
    className?: string;
    selectedItems?: any[] | null;
    maxVisible?: number;
}
interface TypeaheadState {
    searchResults: ReadonlyArray<string | number | boolean | object | undefined>;
    entryValue?: string;
    selection?: string;
    selectionIndex: null;
    isFocused: boolean;
}
declare class Typeahead extends Component<TypeaheadProps, TypeaheadState> {
    static defaultProps: {
        options: never[];
        customClasses: {};
        allowCustomValues: number;
        initialValue: string;
        value: string;
        placeholder: string;
        disabled: boolean;
        textarea: boolean;
        inputProps: {};
        onOptionSelected(option: any): void;
        onChange(event: any): void;
        onKeyDown(event: any): void;
        onKeyPress(event: any): void;
        onKeyUp(event: any): void;
        onFocus(event: any): void;
        onBlur(event: any): void;
        filterOption: null;
        searchOptions: null;
        inputDisplayOption: null;
        defaultClassNames: boolean;
        customListComponent: typeof DropdownList;
        customListItemComponent: ({ value, displayOption, disabled, light }: {
            value: any;
            displayOption?: ((d: any) => any) | undefined;
            disabled: any;
            light: any;
        }) => React.JSX.Element;
        inputIcon: typeof Search;
        customListHeaderComponent: null;
        showOptionsWhenEmpty: boolean;
        searchable: boolean;
        resultsTruncatedMessage: null;
    };
    static getDerivedStateFromProps(props: any, state: any): {
        searchResults?: undefined;
        prevOptions?: undefined;
    } | {
        searchResults: any;
        prevOptions: any;
    };
    constructor(props: any);
    componentDidMount(): void;
    root: React.RefObject<HTMLDivElement>;
    entry: React.RefObject<HTMLInputElement>;
    focus: () => void;
    _hasCustomValue: () => boolean;
    _getCustomValue: () => string | null | undefined;
    _renderIncrementalSearchResults(): React.JSX.Element;
    getSelection(): string | number | boolean | object | null | undefined;
    _onOptionSelected: (option: any, event: any) => void;
    _onTextEntryUpdated: () => void;
    _onEnter: (event: any) => void;
    _onEscape: () => void;
    _onTab: (event: any) => void;
    eventMap: () => {};
    _nav: (delta: any) => void;
    navDown: () => void;
    navUp: () => void;
    _onChange: React.ChangeEventHandler<HTMLInputElement>;
    _onKeyDown: React.KeyboardEventHandler<HTMLDivElement>;
    _onFocus: React.FocusEventHandler<HTMLDivElement>;
    _onBlur: React.FocusEventHandler<HTMLInputElement>;
    _renderHiddenInput(): React.JSX.Element | null;
    _hasHint(): boolean;
    _hasFixedOptions(): number | false;
    render(): React.JSX.Element;
}
export default Typeahead;
