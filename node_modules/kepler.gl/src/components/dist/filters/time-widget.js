"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledComponents2 = require("../common/styled-components");

var _timeRangeSlider = _interopRequireDefault(require("../common/time-range-slider"));

var _floatingTimeDisplay = _interopRequireDefault(require("../common/animation-control/floating-time-display"));

var _timeRangeFilter = require("./time-range-filter");

var _timeWidgetTop = _interopRequireDefault(require("./time-widget-top"));

var _templateObject;

var TimeBottomWidgetInner = (0, _styledComponents["default"])(_styledComponents2.BottomWidgetInner)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 6px 32px 24px 32px;\n"])));
TimeWidgetFactory.deps = [_timeRangeSlider["default"], _floatingTimeDisplay["default"], _timeWidgetTop["default"]];

function TimeWidgetFactory(TimeRangeSlider, FloatingTimeDisplay, TimeWidgetTop) {
  var TimeWidget = function TimeWidget(_ref) {
    var datasets = _ref.datasets,
        filter = _ref.filter,
        index = _ref.index,
        readOnly = _ref.readOnly,
        showTimeDisplay = _ref.showTimeDisplay,
        setFilterAnimationTime = _ref.setFilterAnimationTime,
        onClose = _ref.onClose,
        resetAnimation = _ref.resetAnimation,
        isAnimatable = _ref.isAnimatable,
        updateAnimationSpeed = _ref.updateAnimationSpeed,
        toggleAnimation = _ref.toggleAnimation,
        setFilterPlot = _ref.setFilterPlot,
        setFilterAnimationWindow = _ref.setFilterAnimationWindow,
        timeline = _ref.timeline;

    var _useState = (0, _react.useState)(false),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        isMinified = _useState2[0],
        setMinified = _useState2[1];

    var _updateAnimationSpeed = (0, _react.useCallback)(function (speed) {
      return updateAnimationSpeed(index, speed);
    }, [updateAnimationSpeed, index]);

    var _toggleAnimation = (0, _react.useCallback)(function () {
      return toggleAnimation(index);
    }, [toggleAnimation, index]);

    var _onToggleMinify = (0, _react.useCallback)(function () {
      return setMinified(!isMinified);
    }, [setMinified, isMinified]);

    var _setFilterAnimationWindow = (0, _react.useCallback)(function (animationWindow) {
      return setFilterAnimationWindow({
        id: filter.id,
        animationWindow: animationWindow
      });
    }, [setFilterAnimationWindow, filter.id]);

    var timeSliderOnChange = (0, _react.useCallback)(function (value) {
      return setFilterAnimationTime(index, 'value', value);
    }, [setFilterAnimationTime, index]);
    return /*#__PURE__*/_react["default"].createElement(TimeBottomWidgetInner, {
      className: "bottom-widget--inner"
    }, /*#__PURE__*/_react["default"].createElement(TimeWidgetTop, {
      filter: filter,
      readOnly: readOnly,
      datasets: datasets,
      setFilterPlot: setFilterPlot,
      index: index,
      onClose: onClose,
      onToggleMinify: _onToggleMinify,
      isMinified: isMinified
    }), /*#__PURE__*/_react["default"].createElement(TimeRangeSlider, (0, _extends2["default"])({}, (0, _timeRangeFilter.timeRangeSliderFieldsSelector)(filter), {
      onChange: timeSliderOnChange,
      toggleAnimation: _toggleAnimation,
      updateAnimationSpeed: _updateAnimationSpeed,
      setFilterAnimationWindow: _setFilterAnimationWindow,
      hideTimeTitle: showTimeDisplay,
      resetAnimation: resetAnimation,
      isAnimatable: isAnimatable,
      isMinified: isMinified,
      timeline: timeline
    })), showTimeDisplay ? /*#__PURE__*/_react["default"].createElement(FloatingTimeDisplay, {
      currentTime: filter.value,
      defaultTimeFormat: filter.defaultTimeFormat,
      timeFormat: filter.timeFormat,
      timezone: filter.timezone
    }) : null);
  };

  return /*#__PURE__*/_react["default"].memo(TimeWidget);
}

var _default = TimeWidgetFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,