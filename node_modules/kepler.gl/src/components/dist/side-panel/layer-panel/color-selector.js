"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.InputBoxContainer = exports.ColorSelectorInput = exports.ColorBlock = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactIntl = require("react-intl");

var _utils = require("@kepler.gl/utils");

var _singleColorPalette = _interopRequireDefault(require("./single-color-palette"));

var _colorRangeSelector = _interopRequireDefault(require("./color-range-selector"));

var _colorPalette = _interopRequireDefault(require("./color-palette"));

var _styledComponents2 = require("../../common/styled-components");

var _reactOnclickoutside = _interopRequireDefault(require("react-onclickoutside"));

var _rangeSlider = _interopRequireDefault(require("../../common/range-slider"));

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var OpacitySliderWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 0px 12px 12px 12px;\n"])));

var OPACITY_SLIDER_PROPS = {
  type: 'number',
  range: [0, 1],
  value0: 0,
  step: 0.01,
  isRanged: false,
  label: 'Opacity',
  showInput: true
};

var ColorBlock = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 32px;\n  height: 18px;\n  border-radius: 1px;\n  background-color: ", ";\n"])), function (props) {
  return Array.isArray(props.backgroundcolor) ? "rgb(".concat(props.backgroundcolor.slice(0, 3).join(','), ")") : 'transparent';
});

exports.ColorBlock = ColorBlock;

var ColorSelectorInput = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  ", ";\n  height: ", ";\n\n  .color-selector__selector__label {\n    text-transform: capitalize;\n    font-size: 12px;\n    text-align: center;\n    color: ", ";\n  }\n"])), function (props) {
  return props.inputTheme === 'secondary' ? props.theme.secondaryInput : props.theme.input;
}, function (props) {
  return props.theme.inputBoxHeight;
}, function (props) {
  return props.theme.inputPlaceholderColor;
});

exports.ColorSelectorInput = ColorSelectorInput;

var InputBoxContainer = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n\n  .color-select__input-group {\n    flex-grow: 1;\n  }\n  .color-select__input-group:nth-child(2) {\n    margin-left: 12px;\n  }\n"])));

exports.InputBoxContainer = InputBoxContainer;
ColorSelectorFactory.deps = [_rangeSlider["default"]];

function ColorSelectorFactory(RangeSlider) {
  var ColorSelector = /*#__PURE__*/function (_Component) {
    (0, _inherits2["default"])(ColorSelector, _Component);

    var _super = _createSuper(ColorSelector);

    function ColorSelector() {
      var _this;

      (0, _classCallCheck2["default"])(this, ColorSelector);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
        showDropdown: false
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "node", /*#__PURE__*/(0, _react.createRef)());
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleClickOutside", function (e) {
        if (_this.props.colorUI && Number.isInteger(_this.props.colorUI.showSketcher)) {
          // if sketcher is open, let sketch to close itself first
          return;
        }

        _this._closePanelDropdown();
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_getEditing", function () {
        return _this.props.colorUI ? _this.props.colorUI.showDropdown : _this.state.showDropdown;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_closePanelDropdown", function () {
        if (_this._getEditing() === false) {
          return;
        }

        if (_this.props.setColorUI) {
          _this.props.setColorUI({
            showDropdown: false,
            showSketcher: false
          });
        } else {
          _this.setState({
            showDropdown: false
          });
        }
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onSelectColor", function (color, e) {
        e.stopPropagation();

        var editing = _this._getEditing();

        var colorSet = typeof editing === 'number' && _this.props.colorSets[editing];

        if (colorSet) {
          _this._setColor(colorSet, color, colorSet.selectedColor[3]);
        }
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onSelectOpacity", function (opacity, e) {
        if (e) e.stopPropagation();

        var editing = _this._getEditing();

        var colorSet = typeof editing === 'number' && _this.props.colorSets[editing];

        if (colorSet) {
          _this._setColor(colorSet, colorSet.selectedColor, Math.round(opacity[1] * 255));
        }
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_setColor", function (colorSet, color, opacity) {
        if (_this.props.useOpacity && Array.isArray(color)) {
          colorSet.setColor([].concat((0, _toConsumableArray2["default"])(color.slice(0, 3)), [opacity]));
        } else {
          colorSet.setColor(color);
        }
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_showDropdown", function (e, i) {
        e.stopPropagation();
        e.preventDefault();

        if (_this.props.setColorUI) {
          _this.props.setColorUI({
            showDropdown: i
          });
        } else {
          _this.setState({
            showDropdown: i
          });
        }
      });
      return _this;
    }

    (0, _createClass2["default"])(ColorSelector, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            colorSets = _this$props.colorSets,
            useOpacity = _this$props.useOpacity,
            disabled = _this$props.disabled,
            inputTheme = _this$props.inputTheme,
            colorUI = _this$props.colorUI;

        var editing = this._getEditing();

        var currentEditing = typeof editing === 'number' && colorSets[editing] && (0, _typeof2["default"])(colorSets[editing]) === 'object';
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: "color-selector",
          ref: this.node
        }, /*#__PURE__*/_react["default"].createElement(InputBoxContainer, null, colorSets.map(function (cSet, i) {
          return /*#__PURE__*/_react["default"].createElement("div", {
            className: "color-select__input-group",
            key: i
          }, /*#__PURE__*/_react["default"].createElement(ColorSelectorInput, {
            className: "color-selector__selector",
            active: editing === i,
            disabled: disabled,
            inputTheme: inputTheme,
            onMouseDown: function onMouseDown(e) {
              return _this2._showDropdown(e, i);
            }
          }, cSet.isRange ? /*#__PURE__*/_react["default"].createElement(_colorPalette["default"], {
            colors: cSet.selectedColor.colors
          }) : /*#__PURE__*/_react["default"].createElement(ColorBlock, {
            className: "color-selector__selector__block",
            backgroundcolor: cSet.selectedColor
          }), cSet.label ? /*#__PURE__*/_react["default"].createElement("div", {
            className: "color-selector__selector__label"
          }, cSet.label) : null));
        })), currentEditing ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledPanelDropdown, {
          className: "color-selector__dropdown"
        }, colorSets[editing].isRange ? /*#__PURE__*/_react["default"].createElement(_colorRangeSelector["default"], {
          selectedColorRange: colorSets[editing].selectedColor,
          onSelectColorRange: this._onSelectColor,
          setColorPaletteUI: this.props.setColorUI,
          colorPaletteUI: colorUI
        }) : /*#__PURE__*/_react["default"].createElement(_singleColorPalette["default"], {
          selectedColor: (0, _utils.rgbToHex)(colorSets[editing].selectedColor),
          onSelectColor: this._onSelectColor
        }), useOpacity ? /*#__PURE__*/_react["default"].createElement(OpacitySliderWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
          id: "color.opacity"
        })), /*#__PURE__*/_react["default"].createElement(RangeSlider, (0, _extends2["default"])({}, OPACITY_SLIDER_PROPS, {
          value1: colorSets[editing].selectedColor[3] / 255,
          onChange: this._onSelectOpacity
        }))) : null) : null);
      }
    }]);
    return ColorSelector;
  }(_react.Component);

  (0, _defineProperty2["default"])(ColorSelector, "defaultProps", {
    colorSets: []
  });
  return (0, _reactOnclickoutside["default"])(ColorSelector);
}

var _default = ColorSelectorFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,