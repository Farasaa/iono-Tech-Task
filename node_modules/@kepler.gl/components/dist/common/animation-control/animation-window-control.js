"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _localization = require("@kepler.gl/localization");

var _iconButton = _interopRequireDefault(require("../icon-button"));

var _styledComponents = require("../styled-components");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function AnimationWindowControlFactory() {
  var AnimationWindowControl = function AnimationWindowControl(_ref) {
    var animationWindow = _ref.animationWindow,
        setFilterAnimationWindow = _ref.setFilterAnimationWindow,
        toggleAnimationWindowControl = _ref.toggleAnimationWindowControl,
        height = _ref.height,
        animationItems = _ref.animationItems,
        _ref$btnStyle = _ref.btnStyle,
        btnStyle = _ref$btnStyle === void 0 ? {} : _ref$btnStyle,
        showAnimationWindowControl = _ref.showAnimationWindowControl;
    var onSelectAnimationControl = (0, _react.useCallback)(function (item) {
      setFilterAnimationWindow(item.id);
      toggleAnimationWindowControl();
    }, [setFilterAnimationWindow, toggleAnimationWindowControl]);
    return showAnimationWindowControl ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "animation-window-control"
    }, Object.values(animationItems).filter(function (item) {
      return item.id !== animationWindow;
    }).map(function (item) {
      return /*#__PURE__*/_react["default"].createElement(_iconButton["default"], (0, _extends2["default"])({
        key: item.id,
        "data-tip": true,
        "data-for": "".concat(item.id, "-tooltip"),
        className: "playback-control-button",
        onClick: function onClick() {
          return onSelectAnimationControl(item);
        }
      }, btnStyle), /*#__PURE__*/_react["default"].createElement(item.icon, {
        height: height
      }), item.tooltip ? /*#__PURE__*/_react["default"].createElement(_styledComponents.Tooltip, {
        id: "".concat(item.id, "-tooltip"),
        effect: "solid",
        place: "top"
      }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
        id: item.tooltip
      })) : null);
    })) : null;
  };

  return AnimationWindowControl;
}

var _default = AnimationWindowControlFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vYW5pbWF0aW9uLWNvbnRyb2wvYW5pbWF0aW9uLXdpbmRvdy1jb250cm9sLnRzeCJdLCJuYW1lcyI6WyJBbmltYXRpb25XaW5kb3dDb250cm9sRmFjdG9yeSIsIkFuaW1hdGlvbldpbmRvd0NvbnRyb2wiLCJhbmltYXRpb25XaW5kb3ciLCJzZXRGaWx0ZXJBbmltYXRpb25XaW5kb3ciLCJ0b2dnbGVBbmltYXRpb25XaW5kb3dDb250cm9sIiwiaGVpZ2h0IiwiYW5pbWF0aW9uSXRlbXMiLCJidG5TdHlsZSIsInNob3dBbmltYXRpb25XaW5kb3dDb250cm9sIiwib25TZWxlY3RBbmltYXRpb25Db250cm9sIiwiaXRlbSIsImlkIiwiT2JqZWN0IiwidmFsdWVzIiwiZmlsdGVyIiwibWFwIiwidG9vbHRpcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUVBOztBQUNBOztBQVBBO0FBQ0E7QUF1QkEsU0FBU0EsNkJBQVQsR0FBZ0Y7QUFDOUUsTUFBTUMsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QixPQVFJO0FBQUEsUUFQakNDLGVBT2lDLFFBUGpDQSxlQU9pQztBQUFBLFFBTmpDQyx3QkFNaUMsUUFOakNBLHdCQU1pQztBQUFBLFFBTGpDQyw0QkFLaUMsUUFMakNBLDRCQUtpQztBQUFBLFFBSmpDQyxNQUlpQyxRQUpqQ0EsTUFJaUM7QUFBQSxRQUhqQ0MsY0FHaUMsUUFIakNBLGNBR2lDO0FBQUEsNkJBRmpDQyxRQUVpQztBQUFBLFFBRmpDQSxRQUVpQyw4QkFGdEIsRUFFc0I7QUFBQSxRQURqQ0MsMEJBQ2lDLFFBRGpDQSwwQkFDaUM7QUFDakMsUUFBTUMsd0JBQXdCLEdBQUcsd0JBQy9CLFVBQUFDLElBQUksRUFBSTtBQUNOUCxNQUFBQSx3QkFBd0IsQ0FBQ08sSUFBSSxDQUFDQyxFQUFOLENBQXhCO0FBQ0FQLE1BQUFBLDRCQUE0QjtBQUM3QixLQUo4QixFQUsvQixDQUFDRCx3QkFBRCxFQUEyQkMsNEJBQTNCLENBTCtCLENBQWpDO0FBUUEsV0FBT0ksMEJBQTBCLGdCQUMvQjtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDR0ksTUFBTSxDQUFDQyxNQUFQLENBQWNQLGNBQWQsRUFDRVEsTUFERixDQUNTLFVBQUFKLElBQUk7QUFBQSxhQUFJQSxJQUFJLENBQUNDLEVBQUwsS0FBWVQsZUFBaEI7QUFBQSxLQURiLEVBRUVhLEdBRkYsQ0FFTSxVQUFBTCxJQUFJO0FBQUEsMEJBQ1AsZ0NBQUMsc0JBQUQ7QUFDRSxRQUFBLEdBQUcsRUFBRUEsSUFBSSxDQUFDQyxFQURaO0FBRUUsd0JBRkY7QUFHRSw4QkFBYUQsSUFBSSxDQUFDQyxFQUFsQixhQUhGO0FBSUUsUUFBQSxTQUFTLEVBQUMseUJBSlo7QUFLRSxRQUFBLE9BQU8sRUFBRTtBQUFBLGlCQUFNRix3QkFBd0IsQ0FBQ0MsSUFBRCxDQUE5QjtBQUFBO0FBTFgsU0FNTUgsUUFOTixnQkFRRSxnQ0FBQyxJQUFELENBQU0sSUFBTjtBQUFXLFFBQUEsTUFBTSxFQUFFRjtBQUFuQixRQVJGLEVBU0dLLElBQUksQ0FBQ00sT0FBTCxnQkFDQyxnQ0FBQyx5QkFBRDtBQUFTLFFBQUEsRUFBRSxZQUFLTixJQUFJLENBQUNDLEVBQVYsYUFBWDtBQUFtQyxRQUFBLE1BQU0sRUFBQyxPQUExQztBQUFrRCxRQUFBLEtBQUssRUFBQztBQUF4RCxzQkFDRSxnQ0FBQyw4QkFBRDtBQUFrQixRQUFBLEVBQUUsRUFBRUQsSUFBSSxDQUFDTTtBQUEzQixRQURGLENBREQsR0FJRyxJQWJOLENBRE87QUFBQSxLQUZWLENBREgsQ0FEK0IsR0FzQjdCLElBdEJKO0FBdUJELEdBeENEOztBQTBDQSxTQUFPZixzQkFBUDtBQUNEOztlQUVjRCw2QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ0BrZXBsZXIuZ2wvbG9jYWxpemF0aW9uJztcbmltcG9ydCB7UmVhY3RDb21wb25lbnRMaWtlfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uL2ljb24tYnV0dG9uJztcbmltcG9ydCB7VG9vbHRpcH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvbkl0ZW0ge1xuICBpZDogc3RyaW5nO1xuICBpY29uOiBSZWFjdENvbXBvbmVudExpa2U7XG4gIHRvb2x0aXA6IHN0cmluZztcbn1cbmludGVyZmFjZSBBbmltYXRpb25XaW5kb3dDb250cm9sUHJvcHMge1xuICBhbmltYXRpb25XaW5kb3c/OiBzdHJpbmc7XG4gIHNldEZpbHRlckFuaW1hdGlvbldpbmRvdzogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHRvZ2dsZUFuaW1hdGlvbldpbmRvd0NvbnRyb2w6ICgpID0+IHZvaWQ7XG4gIGhlaWdodD86IHN0cmluZztcbiAgYW5pbWF0aW9uSXRlbXM6IHtba2V5OiBzdHJpbmddOiBBbmltYXRpb25JdGVtfTtcbiAgYnRuU3R5bGU7XG4gIHNob3dBbmltYXRpb25XaW5kb3dDb250cm9sOiBib29sZWFuO1xufVxuXG5mdW5jdGlvbiBBbmltYXRpb25XaW5kb3dDb250cm9sRmFjdG9yeSgpOiBSZWFjdC5GQzxBbmltYXRpb25XaW5kb3dDb250cm9sUHJvcHM+IHtcbiAgY29uc3QgQW5pbWF0aW9uV2luZG93Q29udHJvbCA9ICh7XG4gICAgYW5pbWF0aW9uV2luZG93LFxuICAgIHNldEZpbHRlckFuaW1hdGlvbldpbmRvdyxcbiAgICB0b2dnbGVBbmltYXRpb25XaW5kb3dDb250cm9sLFxuICAgIGhlaWdodCxcbiAgICBhbmltYXRpb25JdGVtcyxcbiAgICBidG5TdHlsZSA9IHt9LFxuICAgIHNob3dBbmltYXRpb25XaW5kb3dDb250cm9sXG4gIH06IEFuaW1hdGlvbldpbmRvd0NvbnRyb2xQcm9wcykgPT4ge1xuICAgIGNvbnN0IG9uU2VsZWN0QW5pbWF0aW9uQ29udHJvbCA9IHVzZUNhbGxiYWNrKFxuICAgICAgaXRlbSA9PiB7XG4gICAgICAgIHNldEZpbHRlckFuaW1hdGlvbldpbmRvdyhpdGVtLmlkKTtcbiAgICAgICAgdG9nZ2xlQW5pbWF0aW9uV2luZG93Q29udHJvbCgpO1xuICAgICAgfSxcbiAgICAgIFtzZXRGaWx0ZXJBbmltYXRpb25XaW5kb3csIHRvZ2dsZUFuaW1hdGlvbldpbmRvd0NvbnRyb2xdXG4gICAgKTtcblxuICAgIHJldHVybiBzaG93QW5pbWF0aW9uV2luZG93Q29udHJvbCA/IChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0aW9uLXdpbmRvdy1jb250cm9sXCI+XG4gICAgICAgIHtPYmplY3QudmFsdWVzKGFuaW1hdGlvbkl0ZW1zKVxuICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLmlkICE9PSBhbmltYXRpb25XaW5kb3cpXG4gICAgICAgICAgLm1hcChpdGVtID0+IChcbiAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgIGtleT17aXRlbS5pZH1cbiAgICAgICAgICAgICAgZGF0YS10aXBcbiAgICAgICAgICAgICAgZGF0YS1mb3I9e2Ake2l0ZW0uaWR9LXRvb2x0aXBgfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwbGF5YmFjay1jb250cm9sLWJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2VsZWN0QW5pbWF0aW9uQ29udHJvbChpdGVtKX1cbiAgICAgICAgICAgICAgey4uLmJ0blN0eWxlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aXRlbS5pY29uIGhlaWdodD17aGVpZ2h0fSAvPlxuICAgICAgICAgICAgICB7aXRlbS50b29sdGlwID8gKFxuICAgICAgICAgICAgICAgIDxUb29sdGlwIGlkPXtgJHtpdGVtLmlkfS10b29sdGlwYH0gZWZmZWN0PVwic29saWRcIiBwbGFjZT1cInRvcFwiPlxuICAgICAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9e2l0ZW0udG9vbHRpcH0gLz5cbiAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIEFuaW1hdGlvbldpbmRvd0NvbnRyb2w7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGlvbldpbmRvd0NvbnRyb2xGYWN0b3J5O1xuIl19