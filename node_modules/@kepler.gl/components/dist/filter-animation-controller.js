"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("@kepler.gl/utils");

var _constants = require("@kepler.gl/constants");

var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
FilterAnimationControllerFactory.deps = [_animationController["default"]];

function FilterAnimationControllerFactory(AnimationController) {
  var FilterAnimationController = function FilterAnimationController(_ref) {
    var filter = _ref.filter,
        filterIdx = _ref.filterIdx,
        setFilterAnimationTime = _ref.setFilterAnimationTime,
        children = _ref.children;
    var intervalBins = (0, _react.useMemo)(function () {
      return (0, _utils.getIntervalBins)(filter);
    }, [filter]);
    var steps = (0, _react.useMemo)(function () {
      return intervalBins ? intervalBins.map(function (x) {
        return x.x0;
      }) : null;
    }, [intervalBins]);
    var updateAnimation = (0, _react.useCallback)(function (value) {
      switch (filter.animationWindow) {
        case _constants.ANIMATION_WINDOW.interval:
          var _idx = value[1];
          setFilterAnimationTime(filterIdx, 'value', [intervalBins[_idx].x0, intervalBins[_idx].x1 - 1]);
          break;

        default:
          setFilterAnimationTime(filterIdx, 'value', value);
          break;
      }
    }, [filterIdx, intervalBins, filter.animationWindow, setFilterAnimationTime]); // if filter is synced merge the filter and animation config

    var timeline = (0, _utils.getTimelineFromFilter)(filter);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "filter-control",
      value: filter.value,
      domain: filter.domain,
      speed: filter.speed,
      isAnimating: filter.isAnimating,
      animationWindow: filter.animationWindow,
      steps: steps,
      updateAnimation: updateAnimation // @ts-expect-error different function type, goes to TimeWidget setFilterAnimationTime()
      ,
      setTimelineValue: setFilterAnimationTime,
      timeline: timeline,
      children: children
    });
  };

  return FilterAnimationController;
}

var _default = FilterAnimationControllerFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWx0ZXItYW5pbWF0aW9uLWNvbnRyb2xsZXIudHN4Il0sIm5hbWVzIjpbIkZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IiwiZGVwcyIsIkFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IiwiQW5pbWF0aW9uQ29udHJvbGxlciIsIkZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXIiLCJmaWx0ZXIiLCJmaWx0ZXJJZHgiLCJzZXRGaWx0ZXJBbmltYXRpb25UaW1lIiwiY2hpbGRyZW4iLCJpbnRlcnZhbEJpbnMiLCJzdGVwcyIsIm1hcCIsIngiLCJ4MCIsInVwZGF0ZUFuaW1hdGlvbiIsInZhbHVlIiwiYW5pbWF0aW9uV2luZG93IiwiQU5JTUFUSU9OX1dJTkRPVyIsImludGVydmFsIiwiaWR4IiwieDEiLCJ0aW1lbGluZSIsImRvbWFpbiIsInNwZWVkIiwiaXNBbmltYXRpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBUEE7QUFDQTtBQXVCQUEsZ0NBQWdDLENBQUNDLElBQWpDLEdBQXdDLENBQUNDLCtCQUFELENBQXhDOztBQUNBLFNBQVNGLGdDQUFULENBQ0VHLG1CQURGLEVBRUU7QUFDQSxNQUFNQyx5QkFBbUUsR0FBRyxTQUF0RUEseUJBQXNFLE9BS3RFO0FBQUEsUUFKSkMsTUFJSSxRQUpKQSxNQUlJO0FBQUEsUUFISkMsU0FHSSxRQUhKQSxTQUdJO0FBQUEsUUFGSkMsc0JBRUksUUFGSkEsc0JBRUk7QUFBQSxRQURKQyxRQUNJLFFBREpBLFFBQ0k7QUFDSixRQUFNQyxZQUFZLEdBQUcsb0JBQVE7QUFBQSxhQUFNLDRCQUFnQkosTUFBaEIsQ0FBTjtBQUFBLEtBQVIsRUFBdUMsQ0FBQ0EsTUFBRCxDQUF2QyxDQUFyQjtBQUVBLFFBQU1LLEtBQUssR0FBRyxvQkFBUTtBQUFBLGFBQU9ELFlBQVksR0FBR0EsWUFBWSxDQUFDRSxHQUFiLENBQWlCLFVBQUFDLENBQUM7QUFBQSxlQUFJQSxDQUFDLENBQUNDLEVBQU47QUFBQSxPQUFsQixDQUFILEdBQWlDLElBQXBEO0FBQUEsS0FBUixFQUFtRSxDQUMvRUosWUFEK0UsQ0FBbkUsQ0FBZDtBQUlBLFFBQU1LLGVBQWUsR0FBRyx3QkFDdEIsVUFBQUMsS0FBSyxFQUFJO0FBQ1AsY0FBUVYsTUFBTSxDQUFDVyxlQUFmO0FBQ0UsYUFBS0MsNEJBQWlCQyxRQUF0QjtBQUNFLGNBQU1DLElBQUcsR0FBR0osS0FBSyxDQUFDLENBQUQsQ0FBakI7QUFDQVIsVUFBQUEsc0JBQXNCLENBQUNELFNBQUQsRUFBWSxPQUFaLEVBQXFCLENBQ3pDRyxZQUFZLENBQUNVLElBQUQsQ0FBWixDQUFrQk4sRUFEdUIsRUFFekNKLFlBQVksQ0FBQ1UsSUFBRCxDQUFaLENBQWtCQyxFQUFsQixHQUF1QixDQUZrQixDQUFyQixDQUF0QjtBQUlBOztBQUNGO0FBQ0ViLFVBQUFBLHNCQUFzQixDQUFDRCxTQUFELEVBQVksT0FBWixFQUFxQlMsS0FBckIsQ0FBdEI7QUFDQTtBQVZKO0FBWUQsS0FkcUIsRUFldEIsQ0FBQ1QsU0FBRCxFQUFZRyxZQUFaLEVBQTBCSixNQUFNLENBQUNXLGVBQWpDLEVBQWtEVCxzQkFBbEQsQ0Fmc0IsQ0FBeEIsQ0FQSSxDQXlCSjs7QUFDQSxRQUFNYyxRQUFRLEdBQUcsa0NBQXNCaEIsTUFBdEIsQ0FBakI7QUFFQSx3QkFDRSxnQ0FBQyxtQkFBRDtBQUNFLE1BQUEsR0FBRyxFQUFDLGdCQUROO0FBRUUsTUFBQSxLQUFLLEVBQUVBLE1BQU0sQ0FBQ1UsS0FGaEI7QUFHRSxNQUFBLE1BQU0sRUFBRVYsTUFBTSxDQUFDaUIsTUFIakI7QUFJRSxNQUFBLEtBQUssRUFBRWpCLE1BQU0sQ0FBQ2tCLEtBSmhCO0FBS0UsTUFBQSxXQUFXLEVBQUVsQixNQUFNLENBQUNtQixXQUx0QjtBQU1FLE1BQUEsZUFBZSxFQUFFbkIsTUFBTSxDQUFDVyxlQU4xQjtBQU9FLE1BQUEsS0FBSyxFQUFFTixLQVBUO0FBUUUsTUFBQSxlQUFlLEVBQUVJLGVBUm5CLENBU0U7QUFURjtBQVVFLE1BQUEsZ0JBQWdCLEVBQUVQLHNCQVZwQjtBQVdFLE1BQUEsUUFBUSxFQUFFYyxRQVhaO0FBWUUsTUFBQSxRQUFRLEVBQUViO0FBWlosTUFERjtBQWdCRCxHQWpERDs7QUFrREEsU0FBT0oseUJBQVA7QUFDRDs7ZUFFY0osZ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlTWVtb30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtnZXRJbnRlcnZhbEJpbnMsIGdldFRpbWVsaW5lRnJvbUZpbHRlcn0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5pbXBvcnQge1RpbWVSYW5nZUZpbHRlcn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge0FOSU1BVElPTl9XSU5ET1d9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCBBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSBmcm9tICcuL2NvbW1vbi9hbmltYXRpb24tY29udHJvbC9hbmltYXRpb24tY29udHJvbGxlcic7XG5pbXBvcnQge1RpbWVsaW5lfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuaW50ZXJmYWNlIEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJQcm9wcyB7XG4gIGZpbHRlcjogVGltZVJhbmdlRmlsdGVyICYge2FuaW1hdGlvbldpbmRvdz86IHN0cmluZ307XG4gIGZpbHRlcklkeDogbnVtYmVyO1xuICBzZXRGaWx0ZXJBbmltYXRpb25UaW1lOiAoaWR4OiBudW1iZXIsIHZhbHVlOiBzdHJpbmcsIGE6IGFueVtdKSA9PiB2b2lkO1xuICBjaGlsZHJlbj86IChcbiAgICBpc0FuaW1hdGluZzogYm9vbGVhbiB8IHVuZGVmaW5lZCxcbiAgICBzdGFydEFuaW1hdGlvbjogKCkgPT4gdm9pZCxcbiAgICBwYXVzZUFuaW1hdGlvbjogKCkgPT4gdm9pZCxcbiAgICByZXNldEFuaW1hdGlvbjogKCkgPT4gdm9pZCxcbiAgICB0aW1lbGluZTogVGltZWxpbmUgfCB1bmRlZmluZWQsXG4gICAgc2V0VGltZWxpbmVWYWx1ZTogKHg6IGFueSkgPT4gdm9pZFxuICApID0+IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGw7XG59XG5cbkZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5LmRlcHMgPSBbQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnldO1xuZnVuY3Rpb24gRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkoXG4gIEFuaW1hdGlvbkNvbnRyb2xsZXI6IFJldHVyblR5cGU8dHlwZW9mIEFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5PlxuKSB7XG4gIGNvbnN0IEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXI6IFJlYWN0LkZDPEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJQcm9wcz4gPSAoe1xuICAgIGZpbHRlcixcbiAgICBmaWx0ZXJJZHgsXG4gICAgc2V0RmlsdGVyQW5pbWF0aW9uVGltZSxcbiAgICBjaGlsZHJlblxuICB9KSA9PiB7XG4gICAgY29uc3QgaW50ZXJ2YWxCaW5zID0gdXNlTWVtbygoKSA9PiBnZXRJbnRlcnZhbEJpbnMoZmlsdGVyKSwgW2ZpbHRlcl0pO1xuXG4gICAgY29uc3Qgc3RlcHMgPSB1c2VNZW1vKCgpID0+IChpbnRlcnZhbEJpbnMgPyBpbnRlcnZhbEJpbnMubWFwKHggPT4geC54MCkgOiBudWxsKSwgW1xuICAgICAgaW50ZXJ2YWxCaW5zXG4gICAgXSk7XG5cbiAgICBjb25zdCB1cGRhdGVBbmltYXRpb24gPSB1c2VDYWxsYmFjayhcbiAgICAgIHZhbHVlID0+IHtcbiAgICAgICAgc3dpdGNoIChmaWx0ZXIuYW5pbWF0aW9uV2luZG93KSB7XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fV0lORE9XLmludGVydmFsOlxuICAgICAgICAgICAgY29uc3QgaWR4ID0gdmFsdWVbMV07XG4gICAgICAgICAgICBzZXRGaWx0ZXJBbmltYXRpb25UaW1lKGZpbHRlcklkeCwgJ3ZhbHVlJywgW1xuICAgICAgICAgICAgICBpbnRlcnZhbEJpbnNbaWR4XS54MCxcbiAgICAgICAgICAgICAgaW50ZXJ2YWxCaW5zW2lkeF0ueDEgLSAxXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzZXRGaWx0ZXJBbmltYXRpb25UaW1lKGZpbHRlcklkeCwgJ3ZhbHVlJywgdmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbZmlsdGVySWR4LCBpbnRlcnZhbEJpbnMsIGZpbHRlci5hbmltYXRpb25XaW5kb3csIHNldEZpbHRlckFuaW1hdGlvblRpbWVdXG4gICAgKTtcblxuICAgIC8vIGlmIGZpbHRlciBpcyBzeW5jZWQgbWVyZ2UgdGhlIGZpbHRlciBhbmQgYW5pbWF0aW9uIGNvbmZpZ1xuICAgIGNvbnN0IHRpbWVsaW5lID0gZ2V0VGltZWxpbmVGcm9tRmlsdGVyKGZpbHRlcik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGlvbkNvbnRyb2xsZXJcbiAgICAgICAga2V5PVwiZmlsdGVyLWNvbnRyb2xcIlxuICAgICAgICB2YWx1ZT17ZmlsdGVyLnZhbHVlfVxuICAgICAgICBkb21haW49e2ZpbHRlci5kb21haW59XG4gICAgICAgIHNwZWVkPXtmaWx0ZXIuc3BlZWR9XG4gICAgICAgIGlzQW5pbWF0aW5nPXtmaWx0ZXIuaXNBbmltYXRpbmd9XG4gICAgICAgIGFuaW1hdGlvbldpbmRvdz17ZmlsdGVyLmFuaW1hdGlvbldpbmRvd31cbiAgICAgICAgc3RlcHM9e3N0ZXBzfVxuICAgICAgICB1cGRhdGVBbmltYXRpb249e3VwZGF0ZUFuaW1hdGlvbn1cbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBkaWZmZXJlbnQgZnVuY3Rpb24gdHlwZSwgZ29lcyB0byBUaW1lV2lkZ2V0IHNldEZpbHRlckFuaW1hdGlvblRpbWUoKVxuICAgICAgICBzZXRUaW1lbGluZVZhbHVlPXtzZXRGaWx0ZXJBbmltYXRpb25UaW1lfVxuICAgICAgICB0aW1lbGluZT17dGltZWxpbmV9XG4gICAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5O1xuIl19