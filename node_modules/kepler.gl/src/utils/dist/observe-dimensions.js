"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observeDimensions = observeDimensions;
exports.unobserveDimensions = unobserveDimensions;
exports["default"] = useDimensions;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = _interopRequireDefault(require("lodash.throttle"));

var _react = require("react");

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var DEFAULT_THROTTLE_DELAY = 100; // Using a single ResizeObserver for all elements can be 10x
// more performant than using a separate ResizeObserver per element
// https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/z6ienONUb5A/F5-VcUZtBAAJ

var _observerRegistry;

function getObserverRegistry() {
  if (_observerRegistry === undefined) {
    var callbacks = new Map();
    var resizeObserver = new _resizeObserverPolyfill["default"](function (entries, observer) {
      var _iterator = _createForOfIteratorHelper(entries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _callbacks$get;

          var entry = _step.value;
          (_callbacks$get = callbacks.get(entry.target)) === null || _callbacks$get === void 0 ? void 0 : _callbacks$get(entry, observer);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
    _observerRegistry = {
      subscribe: function subscribe(target, callback) {
        if (target instanceof Element) {
          resizeObserver.observe(target);
          callbacks.set(target, callback);
        }
      },
      unsubscribe: function unsubscribe(target) {
        if (target instanceof Element) {
          resizeObserver.unobserve(target);
          callbacks["delete"](target);
        }
      }
    };
  }

  return _observerRegistry;
}

function observeDimensions(target, handleResize) {
  var throttleDelay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_THROTTLE_DELAY;
  var registry = getObserverRegistry();
  var handler = throttleDelay > 0 ? (0, _lodash["default"])(handleResize, throttleDelay) : handleResize;
  registry.subscribe(target, function (entry) {
    return handler(getSize(target, entry));
  });
}

function unobserveDimensions(target) {
  var registry = getObserverRegistry();
  registry.unsubscribe(target);
}

function getSize(node, entry) {
  if (entry.contentRect) {
    var _entry$contentRect = entry.contentRect,
        width = _entry$contentRect.width,
        height = _entry$contentRect.height;
    return {
      width: width,
      height: height
    };
  }

  if (node.getBoundingClientRect) {
    var _node$getBoundingClie = node.getBoundingClientRect(),
        _width = _node$getBoundingClie.width,
        _height = _node$getBoundingClie.height;

    return {
      width: _width,
      height: _height
    };
  }

  return null;
}
/**
 * Usage example:
 * const [ref, dimensions] = useDimensions<HTMLDivElement>();
 *
 * @param throttleDelay
 * @returns
 */


function useDimensions(nodeRef) {
  var throttleDelay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THROTTLE_DELAY;
  var ref = nodeRef !== null && nodeRef !== void 0 ? nodeRef : (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];

  (0, _react.useEffect)(function () {
    var current = ref.current;

    if (!current) {
      return;
    }

    var didUnobserve = false;
    observeDimensions(current, function (entry) {
      if (didUnobserve) return;
      var newSize = getSize(current, entry);

      if (newSize) {
        // @ts-ignore
        setSize(newSize);
      }
    }, throttleDelay);
    return function () {
      didUnobserve = true;
      unobserveDimensions(current);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [throttleDelay, ref === null || ref === void 0 ? void 0 : ref.current]);
  return [ref, size];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,