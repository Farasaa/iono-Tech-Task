"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _core = require("@deck.gl/core");

var _scatterplotIconLayer = _interopRequireDefault(require("./scatterplot-icon-layer"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

// default icon geometry is a square
var DEFAULT_ICON_GEOMETRY = [1, 1, 0, 1, -1, 0, -1, -1, 0, -1, -1, 0, -1, 1, 0, 1, 1, 0];
var defaultProps = {
  getIconGeometry: function getIconGeometry(iconId) {
    return DEFAULT_ICON_GEOMETRY;
  },
  getIcon: function getIcon(d) {
    return d.icon;
  }
};

var SvgIconLayer = /*#__PURE__*/function (_CompositeLayer) {
  (0, _inherits2["default"])(SvgIconLayer, _CompositeLayer);

  var _super = _createSuper(SvgIconLayer);

  function SvgIconLayer() {
    (0, _classCallCheck2["default"])(this, SvgIconLayer);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(SvgIconLayer, [{
    key: "initializeState",
    value: // Must be defined
    function initializeState() {
      this.state = {
        data: {}
      };
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var changeFlags = _ref.changeFlags;

      if (changeFlags.dataChanged) {
        this._extractSublayers();
      }
    }
  }, {
    key: "_extractSublayers",
    value: function _extractSublayers() {
      var _this$props = this.props,
          data = _this$props.data,
          getIconGeometry = _this$props.getIconGeometry,
          getIcon = _this$props.getIcon;
      var iconLayers = {};

      for (var _i = 0; _i < data.length; _i++) {
        var iconId = getIcon(data[_i]);
        iconLayers[iconId] = iconLayers[iconId] || {
          id: iconId,
          geometry: getIconGeometry(iconId) || DEFAULT_ICON_GEOMETRY,
          data: []
        };
        iconLayers[iconId].data.push(data[_i]);
      }

      this.setState({
        data: Object.values(iconLayers)
      });
    }
  }, {
    key: "_updateAutoHighlight",
    value: function _updateAutoHighlight(info) {
      var _info$sourceLayer;

      info === null || info === void 0 ? void 0 : (_info$sourceLayer = info.sourceLayer) === null || _info$sourceLayer === void 0 ? void 0 : _info$sourceLayer.updateAutoHighlight(info);
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var _this = this;

      var layerId = this.props.id;
      var layers = this.state.data && this.state.data.length && this.state.data.map(function (_ref2) {
        var id = _ref2.id,
            data = _ref2.data,
            geometry = _ref2.geometry;
        return new _scatterplotIconLayer["default"](_objectSpread(_objectSpread({}, _this.props), {}, {
          id: "".concat(layerId, "-").concat(id),
          data: data,
          iconGeometry: geometry
        }));
      });
      return layers && layers.length > 0 ? layers : null;
    }
  }]);
  return SvgIconLayer;
}(_core.CompositeLayer);

exports["default"] = SvgIconLayer;
SvgIconLayer.layerName = 'SvgIconLayer';
SvgIconLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdmctaWNvbi1sYXllci9zdmctaWNvbi1sYXllci50cyJdLCJuYW1lcyI6WyJERUZBVUxUX0lDT05fR0VPTUVUUlkiLCJkZWZhdWx0UHJvcHMiLCJnZXRJY29uR2VvbWV0cnkiLCJpY29uSWQiLCJnZXRJY29uIiwiZCIsImljb24iLCJTdmdJY29uTGF5ZXIiLCJzdGF0ZSIsImRhdGEiLCJjaGFuZ2VGbGFncyIsImRhdGFDaGFuZ2VkIiwiX2V4dHJhY3RTdWJsYXllcnMiLCJwcm9wcyIsImljb25MYXllcnMiLCJpIiwibGVuZ3RoIiwiaWQiLCJnZW9tZXRyeSIsInB1c2giLCJzZXRTdGF0ZSIsIk9iamVjdCIsInZhbHVlcyIsImluZm8iLCJzb3VyY2VMYXllciIsInVwZGF0ZUF1dG9IaWdobGlnaHQiLCJsYXllcklkIiwibGF5ZXJzIiwibWFwIiwiU2NhdHRlcnBsb3RJY29uTGF5ZXIiLCJpY29uR2VvbWV0cnkiLCJDb21wb3NpdGVMYXllciIsImxheWVyTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBSUE7Ozs7Ozs7Ozs7QUFFQTtBQUNBLElBQU1BLHFCQUFxQixHQUFHLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQUMsQ0FBZCxFQUFpQixDQUFqQixFQUFvQixDQUFDLENBQXJCLEVBQXdCLENBQUMsQ0FBekIsRUFBNEIsQ0FBNUIsRUFBK0IsQ0FBQyxDQUFoQyxFQUFtQyxDQUFDLENBQXBDLEVBQXVDLENBQXZDLEVBQTBDLENBQUMsQ0FBM0MsRUFBOEMsQ0FBOUMsRUFBaUQsQ0FBakQsRUFBb0QsQ0FBcEQsRUFBdUQsQ0FBdkQsRUFBMEQsQ0FBMUQsQ0FBOUI7QUFFQSxJQUFNQyxZQUFZLEdBQUc7QUFDbkJDLEVBQUFBLGVBQWUsRUFBRSx5QkFBQ0MsTUFBRDtBQUFBLFdBQW9CSCxxQkFBcEI7QUFBQSxHQURFO0FBRW5CSSxFQUFBQSxPQUFPLEVBQUUsaUJBQUNDLENBQUQ7QUFBQSxXQUF1QkEsQ0FBQyxDQUFDQyxJQUF6QjtBQUFBO0FBRlUsQ0FBckI7O0lBYXFCQyxZOzs7Ozs7Ozs7Ozs7V0FDbkI7QUFDQSwrQkFBa0I7QUFDaEIsV0FBS0MsS0FBTCxHQUFhO0FBQ1hDLFFBQUFBLElBQUksRUFBRTtBQURLLE9BQWI7QUFHRDs7O1dBRUQsMkJBQTJCO0FBQUEsVUFBZEMsV0FBYyxRQUFkQSxXQUFjOztBQUN6QixVQUFJQSxXQUFXLENBQUNDLFdBQWhCLEVBQTZCO0FBQzNCLGFBQUtDLGlCQUFMO0FBQ0Q7QUFDRjs7O1dBRUQsNkJBQW9CO0FBQUEsd0JBQ3VCLEtBQUtDLEtBRDVCO0FBQUEsVUFDWEosSUFEVyxlQUNYQSxJQURXO0FBQUEsVUFDTFAsZUFESyxlQUNMQSxlQURLO0FBQUEsVUFDWUUsT0FEWixlQUNZQSxPQURaO0FBR2xCLFVBQU1VLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxXQUFLLElBQUlDLEVBQUMsR0FBRyxDQUFiLEVBQWdCQSxFQUFDLEdBQUdOLElBQUksQ0FBQ08sTUFBekIsRUFBaUNELEVBQUMsRUFBbEMsRUFBc0M7QUFDcEMsWUFBTVosTUFBTSxHQUFHQyxPQUFPLENBQUNLLElBQUksQ0FBQ00sRUFBRCxDQUFMLENBQXRCO0FBQ0FELFFBQUFBLFVBQVUsQ0FBQ1gsTUFBRCxDQUFWLEdBQXFCVyxVQUFVLENBQUNYLE1BQUQsQ0FBVixJQUFzQjtBQUN6Q2MsVUFBQUEsRUFBRSxFQUFFZCxNQURxQztBQUV6Q2UsVUFBQUEsUUFBUSxFQUFFaEIsZUFBZSxDQUFDQyxNQUFELENBQWYsSUFBMkJILHFCQUZJO0FBR3pDUyxVQUFBQSxJQUFJLEVBQUU7QUFIbUMsU0FBM0M7QUFLQUssUUFBQUEsVUFBVSxDQUFDWCxNQUFELENBQVYsQ0FBbUJNLElBQW5CLENBQXdCVSxJQUF4QixDQUE2QlYsSUFBSSxDQUFDTSxFQUFELENBQWpDO0FBQ0Q7O0FBQ0QsV0FBS0ssUUFBTCxDQUFjO0FBQ1pYLFFBQUFBLElBQUksRUFBRVksTUFBTSxDQUFDQyxNQUFQLENBQWNSLFVBQWQ7QUFETSxPQUFkO0FBR0Q7OztXQUVELDhCQUFxQlMsSUFBckIsRUFBMkI7QUFBQTs7QUFDekJBLE1BQUFBLElBQUksU0FBSixJQUFBQSxJQUFJLFdBQUosaUNBQUFBLElBQUksQ0FBRUMsV0FBTix3RUFBbUJDLG1CQUFuQixDQUF1Q0YsSUFBdkM7QUFDRDs7O1dBRUQsd0JBQWU7QUFBQTs7QUFDYixVQUFNRyxPQUFPLEdBQUcsS0FBS2IsS0FBTCxDQUFXSSxFQUEzQjtBQUVBLFVBQU1VLE1BQU0sR0FDVixLQUFLbkIsS0FBTCxDQUFXQyxJQUFYLElBQ0EsS0FBS0QsS0FBTCxDQUFXQyxJQUFYLENBQWdCTyxNQURoQixJQUVBLEtBQUtSLEtBQUwsQ0FBV0MsSUFBWCxDQUFnQm1CLEdBQWhCLENBQ0U7QUFBQSxZQUFFWCxFQUFGLFNBQUVBLEVBQUY7QUFBQSxZQUFNUixJQUFOLFNBQU1BLElBQU47QUFBQSxZQUFZUyxRQUFaLFNBQVlBLFFBQVo7QUFBQSxlQUNFLElBQUlXLGdDQUFKLGlDQUNLLEtBQUksQ0FBQ2hCLEtBRFY7QUFFRUksVUFBQUEsRUFBRSxZQUFLUyxPQUFMLGNBQWdCVCxFQUFoQixDQUZKO0FBR0VSLFVBQUFBLElBQUksRUFBSkEsSUFIRjtBQUlFcUIsVUFBQUEsWUFBWSxFQUFFWjtBQUpoQixXQURGO0FBQUEsT0FERixDQUhGO0FBYUEsYUFBT1MsTUFBTSxJQUFJQSxNQUFNLENBQUNYLE1BQVAsR0FBZ0IsQ0FBMUIsR0FBOEJXLE1BQTlCLEdBQXVDLElBQTlDO0FBQ0Q7OztFQXJEdUNJLG9COzs7QUF3RDFDeEIsWUFBWSxDQUFDeUIsU0FBYixHQUF5QixjQUF6QjtBQUNBekIsWUFBWSxDQUFDTixZQUFiLEdBQTRCQSxZQUE1QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7Q29tcG9zaXRlTGF5ZXJ9IGZyb20gJ0BkZWNrLmdsL2NvcmUnO1xuaW1wb3J0IHtDb21wb3NpdGVMYXllclByb3BzfSBmcm9tICdAZGVjay5nbC9jb3JlL2xpYi9jb21wb3NpdGUtbGF5ZXInO1xuaW1wb3J0IHtQb3NpdGlvbiwgUkdCQUNvbG9yfSBmcm9tICdkZWNrLmdsJztcbmltcG9ydCB7UkdCQ29sb3J9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IFNjYXR0ZXJwbG90SWNvbkxheWVyIGZyb20gJy4vc2NhdHRlcnBsb3QtaWNvbi1sYXllcic7XG5cbi8vIGRlZmF1bHQgaWNvbiBnZW9tZXRyeSBpcyBhIHNxdWFyZVxuY29uc3QgREVGQVVMVF9JQ09OX0dFT01FVFJZID0gWzEsIDEsIDAsIDEsIC0xLCAwLCAtMSwgLTEsIDAsIC0xLCAtMSwgMCwgLTEsIDEsIDAsIDEsIDEsIDBdO1xuXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gIGdldEljb25HZW9tZXRyeTogKGljb25JZDogc3RyaW5nKSA9PiBERUZBVUxUX0lDT05fR0VPTUVUUlksXG4gIGdldEljb246IChkOiB7aWNvbjogc3RyaW5nfSkgPT4gZC5pY29uXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFN2Z0ljb25MYXllclByb3BzIGV4dGVuZHMgQ29tcG9zaXRlTGF5ZXJQcm9wczxhbnk+IHtcbiAgZ2V0SWNvbkdlb21ldHJ5OiAoaTogc3RyaW5nKSA9PiBudW1iZXJbXTtcbiAgZ2V0SWNvbjogKGQ6IHtpY29uOiBzdHJpbmd9KSA9PiBzdHJpbmc7XG4gIGdldFBvc2l0aW9uOiAoZDogYW55KSA9PiBQb3NpdGlvbjtcbiAgZ2V0UmFkaXVzOiAoKGQ6IGFueSkgPT4gbnVtYmVyKSB8IG51bWJlcjtcbiAgZ2V0RmlsbENvbG9yOiBSR0JDb2xvciB8IFJHQkFDb2xvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3ZnSWNvbkxheWVyIGV4dGVuZHMgQ29tcG9zaXRlTGF5ZXI8YW55LCBTdmdJY29uTGF5ZXJQcm9wcz4ge1xuICAvLyBNdXN0IGJlIGRlZmluZWRcbiAgaW5pdGlhbGl6ZVN0YXRlKCkge1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkYXRhOiB7fVxuICAgIH07XG4gIH1cblxuICB1cGRhdGVTdGF0ZSh7Y2hhbmdlRmxhZ3N9KSB7XG4gICAgaWYgKGNoYW5nZUZsYWdzLmRhdGFDaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9leHRyYWN0U3VibGF5ZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgX2V4dHJhY3RTdWJsYXllcnMoKSB7XG4gICAgY29uc3Qge2RhdGEsIGdldEljb25HZW9tZXRyeSwgZ2V0SWNvbn0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgaWNvbkxheWVycyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaWNvbklkID0gZ2V0SWNvbihkYXRhW2ldKTtcbiAgICAgIGljb25MYXllcnNbaWNvbklkXSA9IGljb25MYXllcnNbaWNvbklkXSB8fCB7XG4gICAgICAgIGlkOiBpY29uSWQsXG4gICAgICAgIGdlb21ldHJ5OiBnZXRJY29uR2VvbWV0cnkoaWNvbklkKSB8fCBERUZBVUxUX0lDT05fR0VPTUVUUlksXG4gICAgICAgIGRhdGE6IFtdXG4gICAgICB9O1xuICAgICAgaWNvbkxheWVyc1tpY29uSWRdLmRhdGEucHVzaChkYXRhW2ldKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkYXRhOiBPYmplY3QudmFsdWVzKGljb25MYXllcnMpXG4gICAgfSk7XG4gIH1cblxuICBfdXBkYXRlQXV0b0hpZ2hsaWdodChpbmZvKSB7XG4gICAgaW5mbz8uc291cmNlTGF5ZXI/LnVwZGF0ZUF1dG9IaWdobGlnaHQoaW5mbyk7XG4gIH1cblxuICByZW5kZXJMYXllcnMoKSB7XG4gICAgY29uc3QgbGF5ZXJJZCA9IHRoaXMucHJvcHMuaWQ7XG5cbiAgICBjb25zdCBsYXllcnMgPVxuICAgICAgdGhpcy5zdGF0ZS5kYXRhICYmXG4gICAgICB0aGlzLnN0YXRlLmRhdGEubGVuZ3RoICYmXG4gICAgICB0aGlzLnN0YXRlLmRhdGEubWFwKFxuICAgICAgICAoe2lkLCBkYXRhLCBnZW9tZXRyeX0pID0+XG4gICAgICAgICAgbmV3IFNjYXR0ZXJwbG90SWNvbkxheWVyKHtcbiAgICAgICAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICAgICAgICBpZDogYCR7bGF5ZXJJZH0tJHtpZH1gLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGljb25HZW9tZXRyeTogZ2VvbWV0cnlcbiAgICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIHJldHVybiBsYXllcnMgJiYgbGF5ZXJzLmxlbmd0aCA+IDAgPyBsYXllcnMgOiBudWxsO1xuICB9XG59XG5cblN2Z0ljb25MYXllci5sYXllck5hbWUgPSAnU3ZnSWNvbkxheWVyJztcblN2Z0ljb25MYXllci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG4iXX0=