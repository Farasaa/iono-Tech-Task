"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExportVideoPanelPreview = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _react2 = _interopRequireDefault(require("@deck.gl/react"));

var _reactMapGl = require("react-map-gl");

var _mapbox = require("@deck.gl/mapbox");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ExportVideoPanelPreview = function (_Component) {
  (0, _inherits2["default"])(ExportVideoPanelPreview, _Component);

  var _super = _createSuper(ExportVideoPanelPreview);

  function ExportVideoPanelPreview(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ExportVideoPanelPreview);
    _this = _super.call(this, props);
    var user = _this.props.mapData.mapStyle.bottomMapStyle.owner;
    var mapId = _this.props.mapData.mapStyle.bottomMapStyle.id;
    _this.mapRef = _react["default"].createRef();
    _this.deckRef = _react["default"].createRef();
    _this.state = {
      timestamp: {
        latitude: 47.65,
        longitude: 7
      },
      mapStyle: "mapbox://styles/".concat(user, "/").concat(mapId),
      glContext: undefined,
      memoDevicePixelRatio: window.devicePixelRatio
    };
    _this._onLayerSetDomain = _this._onLayerSetDomain.bind((0, _assertThisInitialized2["default"])(_this));
    _this._renderLayer = _this._renderLayer.bind((0, _assertThisInitialized2["default"])(_this));
    _this._onMapLoad = _this._onMapLoad.bind((0, _assertThisInitialized2["default"])(_this));
    _this._resizeVideo = _this._resizeVideo.bind((0, _assertThisInitialized2["default"])(_this));
    _this._getContainerHeight = _this._getContainerHeight.bind((0, _assertThisInitialized2["default"])(_this));

    _this._resizeVideo();

    return _this;
  }

  (0, _createClass2["default"])(ExportVideoPanelPreview, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.resolution !== this.props.resolution) {
        this._resizeVideo();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var memoDevicePixelRatio = this.state.memoDevicePixelRatio;

      this._setDevicePixelRatio(memoDevicePixelRatio);
    }
  }, {
    key: "_resizeVideo",
    value: function _resizeVideo() {
      var _this$props = this.props,
          exportVideoWidth = _this$props.exportVideoWidth,
          resolution = _this$props.resolution;

      this._setDevicePixelRatio(resolution[0] / exportVideoWidth);

      if (this.mapRef.current) {
        var map = this.mapRef.current.getMap();
        map.resize();
      }
    }
  }, {
    key: "_setDevicePixelRatio",
    value: function _setDevicePixelRatio(devicePixelRatio) {
      window.devicePixelRatio = devicePixelRatio;
    }
  }, {
    key: "_onLayerSetDomain",
    value: function _onLayerSetDomain(idx, colorDomain) {}
  }, {
    key: "_renderLayer",
    value: function _renderLayer(overlays, idx) {
      var _this2 = this;

      var _this$props$mapData = this.props.mapData,
          visState = _this$props$mapData.visState,
          mapState = _this$props$mapData.mapState;
      var datasets = visState.datasets,
          layers = visState.layers,
          layerData = visState.layerData,
          hoverInfo = visState.hoverInfo,
          clicked = visState.clicked,
          interactionConfig = visState.interactionConfig,
          animationConfig = visState.animationConfig;
      var layer = layers[idx];
      var data = layerData[idx];

      var _ref = datasets[layer.config.dataId] || {},
          gpuFilter = _ref.gpuFilter;

      var objectHovered = clicked || hoverInfo;
      var layerCallbacks = {
        onSetLayerDomain: function onSetLayerDomain(val) {
          return _this2._onLayerSetDomain(idx, val);
        }
      };
      var layerOverlay = layer.renderLayer({
        data: data,
        gpuFilter: gpuFilter,
        idx: idx,
        interactionConfig: interactionConfig,
        layerCallbacks: layerCallbacks,
        mapState: mapState,
        animationConfig: animationConfig,
        objectHovered: objectHovered
      });
      return overlays.concat(layerOverlay || []);
    }
  }, {
    key: "_getContainerHeight",
    value: function _getContainerHeight() {
      var _this$props2 = this.props,
          exportVideoWidth = _this$props2.exportVideoWidth,
          resolution = _this$props2.resolution;
      var aspectRatio = resolution[0] / resolution[1];
      return exportVideoWidth / aspectRatio;
    }
  }, {
    key: "_onMapLoad",
    value: function _onMapLoad() {
      var _this3 = this;

      var map = this.mapRef.current.getMap();
      var deck = this.deckRef.current.deck;
      map.addLayer(new _mapbox.MapboxLayer({
        id: 'my-deck',
        deck: deck
      }));
      map.on('render', function () {
        return _this3.props.adapter.onAfterRender(function () {
          _this3.forceUpdate();
        });
      });
      map.resize();
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var layerOrder = this.props.mapData.visState.layerOrder;
      var deckGlLayers = [];

      if (layerOrder && layerOrder.length) {
        deckGlLayers = layerOrder.slice().reverse().reduce(this._renderLayer, []);
      }

      var deckStyle = {
        width: '100%',
        height: '100%'
      };
      var containerStyle = {
        width: "".concat(this.props.exportVideoWidth, "px"),
        height: "".concat(this._getContainerHeight(), "px"),
        position: 'relative',
        overflow: 'auto'
      };
      return _react["default"].createElement("div", {
        id: "deck-canvas",
        style: containerStyle
      }, _react["default"].createElement(_react2["default"], (0, _extends2["default"])({
        ref: this.deckRef,
        viewState: this.props.viewState,
        id: "hubblegl-overlay",
        layers: deckGlLayers,
        style: deckStyle,
        controller: true,
        glOptions: {
          stencil: true
        },
        onWebGLInitialized: function onWebGLInitialized(gl) {
          return _this4.setState({
            glContext: gl
          });
        },
        onViewStateChange: this.props.setViewState
      }, this.props.adapter.getProps(this.deckRef, function () {})), this.state.glContext && _react["default"].createElement(_reactMapGl.StaticMap, {
        ref: this.mapRef,
        mapStyle: this.state.mapStyle,
        preventStyleDiffing: true,
        gl: this.state.glContext,
        onLoad: this._onMapLoad
      })));
    }
  }]);
  return ExportVideoPanelPreview;
}(_react.Component);

exports.ExportVideoPanelPreview = ExportVideoPanelPreview;
//# sourceMappingURL=export-video-panel-preview.js.map