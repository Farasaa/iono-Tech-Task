"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _layers = require("@deck.gl/layers");

var _constants = _interopRequireDefault(require("@luma.gl/constants"));

var _ = require("../");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultProps = _objectSpread(_objectSpread({}, _layers.LineLayer.defaultProps), {}, {
  getTargetColor: function getTargetColor(x) {
    return x.color || [0, 0, 0, 255];
  }
});

function addInstanceColorShader(vs) {
  var targetColorVs = (0, _.editShader)(vs, 'line target color vs', 'attribute vec4 instanceColors;', 'attribute vec4 instanceColors; attribute vec4 instanceTargetColors;');
  return (0, _.editShader)(targetColorVs, 'line color vs', 'vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);', "vec4 color = mix(instanceColors, instanceTargetColors, positions.x);" + "vColor = vec4(color.rgb, color.a * opacity);");
}

function addElevationScale(vs) {
  var elevationVs = (0, _.editShader)(vs, 'line elevation scale 1 vs - inject elevation scale', 'uniform float widthMaxPixels;', "uniform float widthMaxPixels;\n     uniform float elevationScale;");
  elevationVs = (0, _.editShader)(elevationVs, 'line elevation scale 2 vs - multiply by elevation scale', "geometry.worldPosition = instanceSourcePositions;\n  geometry.worldPositionAlt = instanceTargetPositions;", "vec3 source_world = instanceSourcePositions;\n     vec3 target_world = instanceTargetPositions;\n     source_world.z *= elevationScale;\n     target_world.z *= elevationScale;\n     \n     geometry.worldPosition = source_world;\n     geometry.worldPositionAlt = target_world;");
  elevationVs = (0, _.editShader)(elevationVs, 'line elevation scale 3 vs', "vec3 source_world = instanceSourcePositions;\n  vec3 target_world = instanceTargetPositions;", '');
  return elevationVs;
}

var EnhancedLineLayer = /*#__PURE__*/function (_LineLayer) {
  (0, _inherits2["default"])(EnhancedLineLayer, _LineLayer);

  var _super = _createSuper(EnhancedLineLayer);

  function EnhancedLineLayer() {
    (0, _classCallCheck2["default"])(this, EnhancedLineLayer);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(EnhancedLineLayer, [{
    key: "getShaders",
    value: function getShaders() {
      var shaders = (0, _get2["default"])((0, _getPrototypeOf2["default"])(EnhancedLineLayer.prototype), "getShaders", this).call(this);
      var vs = addInstanceColorShader(shaders.vs);
      vs = addElevationScale(vs);
      return _objectSpread(_objectSpread({}, shaders), {}, {
        vs: vs
      });
    }
  }, {
    key: "draw",
    value: function draw(_ref) {
      var uniforms = _ref.uniforms;
      var elevationScale = this.props.elevationScale;
      (0, _get2["default"])((0, _getPrototypeOf2["default"])(EnhancedLineLayer.prototype), "draw", this).call(this, {
        uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {
          elevationScale: elevationScale
        })
      });
    }
  }, {
    key: "initializeState",
    value: function initializeState() {
      var _this$props$colorForm;

      (0, _get2["default"])((0, _getPrototypeOf2["default"])(EnhancedLineLayer.prototype), "initializeState", this).call(this, undefined);
      var attributeManager = this.state.attributeManager;
      attributeManager.addInstanced({
        instanceTargetColors: {
          size: (_this$props$colorForm = this.props.colorFormat) === null || _this$props$colorForm === void 0 ? void 0 : _this$props$colorForm.length,
          type: _constants["default"].UNSIGNED_BYTE,
          normalized: true,
          transition: true,
          accessor: 'getTargetColor',
          defaultValue: [0, 0, 0, 255]
        }
      });
    }
  }]);
  return EnhancedLineLayer;
}(_layers.LineLayer);

exports["default"] = EnhancedLineLayer;
EnhancedLineLayer.layerName = 'EnhancedLineLayer';
EnhancedLineLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saW5lLWxheWVyL2xpbmUtbGF5ZXIudHMiXSwibmFtZXMiOlsiZGVmYXVsdFByb3BzIiwiTGluZUxheWVyIiwiZ2V0VGFyZ2V0Q29sb3IiLCJ4IiwiY29sb3IiLCJhZGRJbnN0YW5jZUNvbG9yU2hhZGVyIiwidnMiLCJ0YXJnZXRDb2xvclZzIiwiYWRkRWxldmF0aW9uU2NhbGUiLCJlbGV2YXRpb25WcyIsIkVuaGFuY2VkTGluZUxheWVyIiwic2hhZGVycyIsInVuaWZvcm1zIiwiZWxldmF0aW9uU2NhbGUiLCJwcm9wcyIsInVuZGVmaW5lZCIsImF0dHJpYnV0ZU1hbmFnZXIiLCJzdGF0ZSIsImFkZEluc3RhbmNlZCIsImluc3RhbmNlVGFyZ2V0Q29sb3JzIiwic2l6ZSIsImNvbG9yRm9ybWF0IiwibGVuZ3RoIiwidHlwZSIsIkdMIiwiVU5TSUdORURfQllURSIsIm5vcm1hbGl6ZWQiLCJ0cmFuc2l0aW9uIiwiYWNjZXNzb3IiLCJkZWZhdWx0VmFsdWUiLCJsYXllck5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxZQUFZLG1DQUNiQyxrQkFBVUQsWUFERztBQUVoQkUsRUFBQUEsY0FBYyxFQUFFLHdCQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDQyxLQUFGLElBQVcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxHQUFWLENBQWY7QUFBQTtBQUZELEVBQWxCOztBQUtBLFNBQVNDLHNCQUFULENBQWdDQyxFQUFoQyxFQUFvQztBQUNsQyxNQUFNQyxhQUFhLEdBQUcsa0JBQ3BCRCxFQURvQixFQUVwQixzQkFGb0IsRUFHcEIsZ0NBSG9CLEVBSXBCLHFFQUpvQixDQUF0QjtBQU9BLFNBQU8sa0JBQ0xDLGFBREssRUFFTCxlQUZLLEVBR0wsZ0VBSEssRUFJTCx1SEFKSyxDQUFQO0FBT0Q7O0FBRUQsU0FBU0MsaUJBQVQsQ0FBMkJGLEVBQTNCLEVBQStCO0FBQzdCLE1BQUlHLFdBQVcsR0FBRyxrQkFDaEJILEVBRGdCLEVBRWhCLG9EQUZnQixFQUdoQiwrQkFIZ0Isc0VBQWxCO0FBUUFHLEVBQUFBLFdBQVcsR0FBRyxrQkFDWkEsV0FEWSxFQUVaLHlEQUZZLHFZQUFkO0FBY0FBLEVBQUFBLFdBQVcsR0FBRyxrQkFDWkEsV0FEWSxFQUVaLDJCQUZZLGtHQUtaLEVBTFksQ0FBZDtBQVFBLFNBQU9BLFdBQVA7QUFDRDs7SUFFb0JDLGlCOzs7Ozs7Ozs7Ozs7V0FJbkIsc0JBQWE7QUFDWCxVQUFNQyxPQUFPLHNIQUFiO0FBRUEsVUFBSUwsRUFBRSxHQUFHRCxzQkFBc0IsQ0FBQ00sT0FBTyxDQUFDTCxFQUFULENBQS9CO0FBQ0FBLE1BQUFBLEVBQUUsR0FBR0UsaUJBQWlCLENBQUNGLEVBQUQsQ0FBdEI7QUFFQSw2Q0FDS0ssT0FETDtBQUVFTCxRQUFBQSxFQUFFLEVBQUZBO0FBRkY7QUFJRDs7O1dBRUQsb0JBQWlCO0FBQUEsVUFBWE0sUUFBVyxRQUFYQSxRQUFXO0FBQUEsVUFDUkMsY0FEUSxHQUNVLEtBQUtDLEtBRGYsQ0FDUkQsY0FEUTtBQUVmLG9IQUFXO0FBQUNELFFBQUFBLFFBQVEsa0NBQU1BLFFBQU47QUFBZ0JDLFVBQUFBLGNBQWMsRUFBZEE7QUFBaEI7QUFBVCxPQUFYO0FBQ0Q7OztXQUVELDJCQUFrQjtBQUFBOztBQUNoQiwrSEFBc0JFLFNBQXRCO0FBRGdCLFVBRVRDLGdCQUZTLEdBRVcsS0FBS0MsS0FGaEIsQ0FFVEQsZ0JBRlM7QUFHaEJBLE1BQUFBLGdCQUFnQixDQUFDRSxZQUFqQixDQUE4QjtBQUM1QkMsUUFBQUEsb0JBQW9CLEVBQUU7QUFDcEJDLFVBQUFBLElBQUksMkJBQUUsS0FBS04sS0FBTCxDQUFXTyxXQUFiLDBEQUFFLHNCQUF3QkMsTUFEVjtBQUVwQkMsVUFBQUEsSUFBSSxFQUFFQyxzQkFBR0MsYUFGVztBQUdwQkMsVUFBQUEsVUFBVSxFQUFFLElBSFE7QUFJcEJDLFVBQUFBLFVBQVUsRUFBRSxJQUpRO0FBS3BCQyxVQUFBQSxRQUFRLEVBQUUsZ0JBTFU7QUFNcEJDLFVBQUFBLFlBQVksRUFBRSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLEdBQVY7QUFOTTtBQURNLE9BQTlCO0FBVUQ7OztFQWxDNEM1QixpQjs7O0FBcUMvQ1MsaUJBQWlCLENBQUNvQixTQUFsQixHQUE4QixtQkFBOUI7QUFDQXBCLGlCQUFpQixDQUFDVixZQUFsQixHQUFpQ0EsWUFBakMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge0xpbmVMYXllciwgTGluZUxheWVyUHJvcHN9IGZyb20gJ0BkZWNrLmdsL2xheWVycyc7XG5pbXBvcnQgR0wgZnJvbSAnQGx1bWEuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7UkdCQUNvbG9yfSBmcm9tICdkZWNrLmdsJztcbmltcG9ydCB7ZWRpdFNoYWRlcn0gZnJvbSAnLi4vJztcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICAuLi5MaW5lTGF5ZXIuZGVmYXVsdFByb3BzLFxuICBnZXRUYXJnZXRDb2xvcjogeCA9PiB4LmNvbG9yIHx8IFswLCAwLCAwLCAyNTVdXG59O1xuXG5mdW5jdGlvbiBhZGRJbnN0YW5jZUNvbG9yU2hhZGVyKHZzKSB7XG4gIGNvbnN0IHRhcmdldENvbG9yVnMgPSBlZGl0U2hhZGVyKFxuICAgIHZzLFxuICAgICdsaW5lIHRhcmdldCBjb2xvciB2cycsXG4gICAgJ2F0dHJpYnV0ZSB2ZWM0IGluc3RhbmNlQ29sb3JzOycsXG4gICAgJ2F0dHJpYnV0ZSB2ZWM0IGluc3RhbmNlQ29sb3JzOyBhdHRyaWJ1dGUgdmVjNCBpbnN0YW5jZVRhcmdldENvbG9yczsnXG4gICk7XG5cbiAgcmV0dXJuIGVkaXRTaGFkZXIoXG4gICAgdGFyZ2V0Q29sb3JWcyxcbiAgICAnbGluZSBjb2xvciB2cycsXG4gICAgJ3ZDb2xvciA9IHZlYzQoaW5zdGFuY2VDb2xvcnMucmdiLCBpbnN0YW5jZUNvbG9ycy5hICogb3BhY2l0eSk7JyxcbiAgICBgdmVjNCBjb2xvciA9IG1peChpbnN0YW5jZUNvbG9ycywgaW5zdGFuY2VUYXJnZXRDb2xvcnMsIHBvc2l0aW9ucy54KTtgICtcbiAgICAgIGB2Q29sb3IgPSB2ZWM0KGNvbG9yLnJnYiwgY29sb3IuYSAqIG9wYWNpdHkpO2BcbiAgKTtcbn1cblxuZnVuY3Rpb24gYWRkRWxldmF0aW9uU2NhbGUodnMpIHtcbiAgbGV0IGVsZXZhdGlvblZzID0gZWRpdFNoYWRlcihcbiAgICB2cyxcbiAgICAnbGluZSBlbGV2YXRpb24gc2NhbGUgMSB2cyAtIGluamVjdCBlbGV2YXRpb24gc2NhbGUnLFxuICAgICd1bmlmb3JtIGZsb2F0IHdpZHRoTWF4UGl4ZWxzOycsXG4gICAgYHVuaWZvcm0gZmxvYXQgd2lkdGhNYXhQaXhlbHM7XG4gICAgIHVuaWZvcm0gZmxvYXQgZWxldmF0aW9uU2NhbGU7YFxuICApO1xuXG4gIGVsZXZhdGlvblZzID0gZWRpdFNoYWRlcihcbiAgICBlbGV2YXRpb25WcyxcbiAgICAnbGluZSBlbGV2YXRpb24gc2NhbGUgMiB2cyAtIG11bHRpcGx5IGJ5IGVsZXZhdGlvbiBzY2FsZScsXG4gICAgYGdlb21ldHJ5LndvcmxkUG9zaXRpb24gPSBpbnN0YW5jZVNvdXJjZVBvc2l0aW9ucztcbiAgZ2VvbWV0cnkud29ybGRQb3NpdGlvbkFsdCA9IGluc3RhbmNlVGFyZ2V0UG9zaXRpb25zO2AsXG4gICAgYHZlYzMgc291cmNlX3dvcmxkID0gaW5zdGFuY2VTb3VyY2VQb3NpdGlvbnM7XG4gICAgIHZlYzMgdGFyZ2V0X3dvcmxkID0gaW5zdGFuY2VUYXJnZXRQb3NpdGlvbnM7XG4gICAgIHNvdXJjZV93b3JsZC56ICo9IGVsZXZhdGlvblNjYWxlO1xuICAgICB0YXJnZXRfd29ybGQueiAqPSBlbGV2YXRpb25TY2FsZTtcbiAgICAgXG4gICAgIGdlb21ldHJ5LndvcmxkUG9zaXRpb24gPSBzb3VyY2Vfd29ybGQ7XG4gICAgIGdlb21ldHJ5LndvcmxkUG9zaXRpb25BbHQgPSB0YXJnZXRfd29ybGQ7YFxuICApO1xuXG4gIGVsZXZhdGlvblZzID0gZWRpdFNoYWRlcihcbiAgICBlbGV2YXRpb25WcyxcbiAgICAnbGluZSBlbGV2YXRpb24gc2NhbGUgMyB2cycsXG4gICAgYHZlYzMgc291cmNlX3dvcmxkID0gaW5zdGFuY2VTb3VyY2VQb3NpdGlvbnM7XG4gIHZlYzMgdGFyZ2V0X3dvcmxkID0gaW5zdGFuY2VUYXJnZXRQb3NpdGlvbnM7YCxcbiAgICAnJ1xuICApO1xuXG4gIHJldHVybiBlbGV2YXRpb25Wcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW5oYW5jZWRMaW5lTGF5ZXIgZXh0ZW5kcyBMaW5lTGF5ZXI8XG4gIGFueSxcbiAgTGluZUxheWVyUHJvcHM8YW55PiAmIHtlbGV2YXRpb25TY2FsZTogbnVtYmVyOyBnZXRUYXJnZXRDb2xvcjogUkdCQUNvbG9yfVxuPiB7XG4gIGdldFNoYWRlcnMoKSB7XG4gICAgY29uc3Qgc2hhZGVycyA9IHN1cGVyLmdldFNoYWRlcnMoKTtcblxuICAgIGxldCB2cyA9IGFkZEluc3RhbmNlQ29sb3JTaGFkZXIoc2hhZGVycy52cyk7XG4gICAgdnMgPSBhZGRFbGV2YXRpb25TY2FsZSh2cyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uc2hhZGVycyxcbiAgICAgIHZzXG4gICAgfTtcbiAgfVxuXG4gIGRyYXcoe3VuaWZvcm1zfSkge1xuICAgIGNvbnN0IHtlbGV2YXRpb25TY2FsZX0gPSB0aGlzLnByb3BzO1xuICAgIHN1cGVyLmRyYXcoe3VuaWZvcm1zOiB7Li4udW5pZm9ybXMsIGVsZXZhdGlvblNjYWxlfX0pO1xuICB9XG5cbiAgaW5pdGlhbGl6ZVN0YXRlKCkge1xuICAgIHN1cGVyLmluaXRpYWxpemVTdGF0ZSh1bmRlZmluZWQpO1xuICAgIGNvbnN0IHthdHRyaWJ1dGVNYW5hZ2VyfSA9IHRoaXMuc3RhdGU7XG4gICAgYXR0cmlidXRlTWFuYWdlci5hZGRJbnN0YW5jZWQoe1xuICAgICAgaW5zdGFuY2VUYXJnZXRDb2xvcnM6IHtcbiAgICAgICAgc2l6ZTogdGhpcy5wcm9wcy5jb2xvckZvcm1hdD8ubGVuZ3RoLFxuICAgICAgICB0eXBlOiBHTC5VTlNJR05FRF9CWVRFLFxuICAgICAgICBub3JtYWxpemVkOiB0cnVlLFxuICAgICAgICB0cmFuc2l0aW9uOiB0cnVlLFxuICAgICAgICBhY2Nlc3NvcjogJ2dldFRhcmdldENvbG9yJyxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBbMCwgMCwgMCwgMjU1XVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbkVuaGFuY2VkTGluZUxheWVyLmxheWVyTmFtZSA9ICdFbmhhbmNlZExpbmVMYXllcic7XG5FbmhhbmNlZExpbmVMYXllci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG4iXX0=