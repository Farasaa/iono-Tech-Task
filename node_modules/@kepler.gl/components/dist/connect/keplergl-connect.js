"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = void 0;

var _reactRedux = require("react-redux");

var _withLocalSelector = _interopRequireDefault(require("./with-local-selector"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var defaultMapStateToProps = function defaultMapStateToProps(state, _, __) {
  return state;
};

var defaultMapDispatchToProps = function defaultMapDispatchToProps() {
  return function (dispatch, _, __) {
    return {
      dispatch: dispatch
    };
  };
};

var connect = function connect() {
  var mapStateToProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultMapStateToProps;
  var makeMapDispatchToProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMapDispatchToProps;
  var reduxMergeProps = arguments.length > 2 ? arguments[2] : undefined;
  var options = arguments.length > 3 ? arguments[3] : undefined;
  return function (BaseComponent) {
    var mapDispatchToProps = makeMapDispatchToProps();

    var reduxMapState = function reduxMapState(state, props) {
      return mapStateToProps(props.selector(state), props, state);
    };

    var reduxMapDispatch = function reduxMapDispatch(dispatch, props) {
      return mapDispatchToProps(props.dispatch, props, dispatch);
    };

    var ReduxComponent = (0, _reactRedux.connect)(reduxMapState, reduxMapDispatch, reduxMergeProps, options)(BaseComponent); // save selector to context so it can be accessed by its children

    return (0, _withLocalSelector["default"])(ReduxComponent);
  };
};

exports.connect = connect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25uZWN0L2tlcGxlcmdsLWNvbm5lY3QudHMiXSwibmFtZXMiOlsiZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyIsInN0YXRlIiwiXyIsIl9fIiwiZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyIsImRpc3BhdGNoIiwiY29ubmVjdCIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1ha2VNYXBEaXNwYXRjaFRvUHJvcHMiLCJyZWR1eE1lcmdlUHJvcHMiLCJvcHRpb25zIiwiQmFzZUNvbXBvbmVudCIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsInJlZHV4TWFwU3RhdGUiLCJwcm9wcyIsInNlbGVjdG9yIiwicmVkdXhNYXBEaXNwYXRjaCIsIlJlZHV4Q29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFJQTs7QUFDQTs7QUFMQTtBQUNBO0FBTUEsSUFBTUEsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QixDQUFDQyxLQUFELEVBQVFDLENBQVIsRUFBV0MsRUFBWDtBQUFBLFNBQWtCRixLQUFsQjtBQUFBLENBQS9COztBQUNBLElBQU1HLHlCQUF5QixHQUFHLFNBQTVCQSx5QkFBNEI7QUFBQSxTQUFNLFVBQUNDLFFBQUQsRUFBV0gsQ0FBWCxFQUFjQyxFQUFkO0FBQUEsV0FBc0I7QUFBQ0UsTUFBQUEsUUFBUSxFQUFSQTtBQUFELEtBQXRCO0FBQUEsR0FBTjtBQUFBLENBQWxDOztBQUVPLElBQU1DLE9BQU8sR0FBRyxTQUFWQSxPQUFVO0FBQUEsTUFDckJDLGVBRHFCLHVFQUNIUCxzQkFERztBQUFBLE1BRXJCUSxzQkFGcUIsdUVBRUlKLHlCQUZKO0FBQUEsTUFHckJLLGVBSHFCO0FBQUEsTUFJckJDLE9BSnFCO0FBQUEsU0FLbEIsVUFBQ0MsYUFBRCxFQUFzQjtBQUN6QixRQUFNQyxrQkFBa0IsR0FBR0osc0JBQXNCLEVBQWpEOztBQUNBLFFBQU1LLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ1osS0FBRCxFQUFRYSxLQUFSO0FBQUEsYUFBa0JQLGVBQWUsQ0FBQ08sS0FBSyxDQUFDQyxRQUFOLENBQWVkLEtBQWYsQ0FBRCxFQUF3QmEsS0FBeEIsRUFBK0JiLEtBQS9CLENBQWpDO0FBQUEsS0FBdEI7O0FBRUEsUUFBTWUsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDWCxRQUFELEVBQVdTLEtBQVg7QUFBQSxhQUFxQkYsa0JBQWtCLENBQUNFLEtBQUssQ0FBQ1QsUUFBUCxFQUFpQlMsS0FBakIsRUFBd0JULFFBQXhCLENBQXZDO0FBQUEsS0FBekI7O0FBRUEsUUFBTVksY0FBYyxHQUFHLHlCQUNyQkosYUFEcUIsRUFFckJHLGdCQUZxQixFQUdyQlAsZUFIcUIsRUFJckJDLE9BSnFCLEVBS3JCQyxhQUxxQixDQUF2QixDQU55QixDQWF6Qjs7QUFDQSxXQUFPLG1DQUFrQk0sY0FBbEIsQ0FBUDtBQUNELEdBcEJzQjtBQUFBLENBQWhCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtKU1hFbGVtZW50Q29uc3RydWN0b3J9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y29ubmVjdCBhcyByZWR1eENvbm5lY3QsIEdldFByb3BzLCBNYXRjaGluZ30gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHdpdGhMb2NhbFNlbGVjdG9yIGZyb20gJy4vd2l0aC1sb2NhbC1zZWxlY3Rvcic7XG5cbmNvbnN0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIF8sIF9fKSA9PiBzdGF0ZTtcbmNvbnN0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHMgPSAoKSA9PiAoZGlzcGF0Y2gsIF8sIF9fKSA9PiAoe2Rpc3BhdGNofSk7XG5cbmV4cG9ydCBjb25zdCBjb25uZWN0ID0gPFQgZXh0ZW5kcyBKU1hFbGVtZW50Q29uc3RydWN0b3I8TWF0Y2hpbmc8YW55LCBHZXRQcm9wczxUPj4+PihcbiAgbWFwU3RhdGVUb1Byb3BzID0gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFrZU1hcERpc3BhdGNoVG9Qcm9wcyA9IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gIHJlZHV4TWVyZ2VQcm9wcz8sXG4gIG9wdGlvbnM/XG4pID0+IChCYXNlQ29tcG9uZW50OiBUKSA9PiB7XG4gIGNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IG1ha2VNYXBEaXNwYXRjaFRvUHJvcHMoKTtcbiAgY29uc3QgcmVkdXhNYXBTdGF0ZSA9IChzdGF0ZSwgcHJvcHMpID0+IG1hcFN0YXRlVG9Qcm9wcyhwcm9wcy5zZWxlY3RvcihzdGF0ZSksIHByb3BzLCBzdGF0ZSk7XG5cbiAgY29uc3QgcmVkdXhNYXBEaXNwYXRjaCA9IChkaXNwYXRjaCwgcHJvcHMpID0+IG1hcERpc3BhdGNoVG9Qcm9wcyhwcm9wcy5kaXNwYXRjaCwgcHJvcHMsIGRpc3BhdGNoKTtcblxuICBjb25zdCBSZWR1eENvbXBvbmVudCA9IHJlZHV4Q29ubmVjdChcbiAgICByZWR1eE1hcFN0YXRlLFxuICAgIHJlZHV4TWFwRGlzcGF0Y2gsXG4gICAgcmVkdXhNZXJnZVByb3BzLFxuICAgIG9wdGlvbnNcbiAgKShCYXNlQ29tcG9uZW50KTtcblxuICAvLyBzYXZlIHNlbGVjdG9yIHRvIGNvbnRleHQgc28gaXQgY2FuIGJlIGFjY2Vzc2VkIGJ5IGl0cyBjaGlsZHJlblxuICByZXR1cm4gd2l0aExvY2FsU2VsZWN0b3IoUmVkdXhDb21wb25lbnQpO1xufTtcbiJdfQ==