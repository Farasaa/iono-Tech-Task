"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeDeckEffects = computeDeckEffects;
exports.reorderEffectOrder = reorderEffectOrder;
exports.validateEffectParameters = validateEffectParameters;
exports.fixEffectOrder = void 0;

var _sortable = require("@dnd-kit/sortable");

var _suncalc = _interopRequireDefault(require("suncalc"));

var _lodash = _interopRequireDefault(require("lodash.clonedeep"));

var _constants = require("@kepler.gl/constants");

var _utils = require("./utils");

var _dataUtils = require("./data-utils");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function computeDeckEffects(_ref) {
  var visState = _ref.visState,
      mapState = _ref.mapState;
  // TODO: 1) deck effects per deck context 2) preserved between draws
  return visState.effectOrder.map(function (effectId) {
    var effect = (0, _utils.findById)(effectId)(visState.effects);

    if (effect !== null && effect !== void 0 && effect.isEnabled && effect.deckEffect) {
      updateEffect({
        visState: visState,
        mapState: mapState,
        effect: effect
      });
      return effect.deckEffect;
    }

    return null;
  }).filter(function (effect) {
    return effect;
  });
}
/**
 * Always keep light & shadow effect at the top
 */


var fixEffectOrder = function fixEffectOrder(effects, effectOrder) {
  var lightShadowEffect = effects.find(function (effect) {
    return effect.type === _constants.LIGHT_AND_SHADOW_EFFECT.type;
  });

  if (lightShadowEffect) {
    var ind = effectOrder.indexOf(lightShadowEffect.id);

    if (ind > 0) {
      effectOrder.splice(ind, 1);
      effectOrder.unshift(lightShadowEffect.id);
    }
  }

  return effectOrder;
};

exports.fixEffectOrder = fixEffectOrder;

function reorderEffectOrder(effectOrder, originEffectId, destinationEffectId) {
  var activeIndex = effectOrder.indexOf(originEffectId);
  var overIndex = effectOrder.indexOf(destinationEffectId);
  return (0, _sortable.arrayMove)(effectOrder, activeIndex, overIndex);
}
/**
 * Check if the current time is daytime at the given location
 * @param {number} lat Latitude
 * @param {number} lon Longitude
 * @param {number} timestamp Milliseconds since the Unix Epoch
 * @returns boolean
 */


function isDaytime(lat, lon, timestamp) {
  var date = new Date(timestamp);

  var _SunCalc$getTimes = _suncalc["default"].getTimes(date, lat, lon),
      sunrise = _SunCalc$getTimes.sunrise,
      sunset = _SunCalc$getTimes.sunset;

  return date >= sunrise && date <= sunset;
}
/**
 * Update effect to match latest vis and map states
 */


function updateEffect(_ref2) {
  var visState = _ref2.visState,
      mapState = _ref2.mapState,
      effect = _ref2.effect;

  if (effect.type === _constants.LIGHT_AND_SHADOW_EFFECT.type) {
    var _effect$parameters = effect.parameters,
        timestamp = _effect$parameters.timestamp,
        timeMode = _effect$parameters.timeMode;
    var sunLight = effect.deckEffect.directionalLights[0]; // set timestamp for shadow

    if (timeMode === _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.current) {
      timestamp = Date.now();
      sunLight.timestamp = timestamp;
    } else if (timeMode === _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.animation) {
      var _visState$animationCo;

      timestamp = (_visState$animationCo = visState.animationConfig.currentTime) !== null && _visState$animationCo !== void 0 ? _visState$animationCo : 0;

      if (!timestamp) {
        var filter = visState.filters.find(function (filter) {
          return filter.type === _constants.FILTER_TYPES.timeRange && (filter.view === _constants.FILTER_VIEW_TYPES.enlarged || filter.syncedWithLayerTimeline);
        });

        if (filter) {
          var _filter$value$, _filter$value;

          timestamp = (_filter$value$ = (_filter$value = filter.value) === null || _filter$value === void 0 ? void 0 : _filter$value[0]) !== null && _filter$value$ !== void 0 ? _filter$value$ : 0;
        }
      }

      sunLight.timestamp = timestamp;
    } // output uniform shadow during nighttime


    if (isDaytime(mapState.latitude, mapState.longitude, timestamp)) {
      effect.deckEffect.outputUniformShadow = false;
      sunLight.intensity = effect.parameters.sunLightIntensity;
    } else {
      effect.deckEffect.outputUniformShadow = true;
      sunLight.intensity = 0;
    }
  }
}
/**
 * Validates parameters for an effect, clamps numbers to allowed ranges
 * or applies default values in case of wrong non-numeric values.
 * All unknown properties aren't modified.
 * @param parameters Parameters candidate for an effect.
 * @param effectDescription Description of an effect.
 * @returns
 */


function validateEffectParameters() {
  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var effectDescription = arguments.length > 1 ? arguments[1] : undefined;
  var result = (0, _lodash["default"])(parameters);
  effectDescription.forEach(function (description) {
    var defaultValue = description.defaultValue,
        name = description.name,
        type = description.type,
        min = description.min,
        max = description.max;
    if (!result.hasOwnProperty(name)) return;
    var property = result[name];

    if (type === 'color' || type === 'array') {
      if (!Array.isArray(defaultValue)) return;

      if (property.length !== (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.length)) {
        result[name] = defaultValue;
        return;
      }

      defaultValue.forEach(function (v, i) {
        var _defaultValue$i;

        var value = property[i];
        value = Number.isFinite(value) ? (0, _dataUtils.clamp)([min, max], value) : (_defaultValue$i = defaultValue[i]) !== null && _defaultValue$i !== void 0 ? _defaultValue$i : min;

        if (value !== undefined) {
          property[i] = value;
        }
      });
      return;
    }

    var value = Number.isFinite(property) ? (0, _dataUtils.clamp)([min, max], property) : defaultValue !== null && defaultValue !== void 0 ? defaultValue : min;

    if (value !== undefined) {
      result[name] = value;
    }
  });
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lZmZlY3QtdXRpbHMudHMiXSwibmFtZXMiOlsiY29tcHV0ZURlY2tFZmZlY3RzIiwidmlzU3RhdGUiLCJtYXBTdGF0ZSIsImVmZmVjdE9yZGVyIiwibWFwIiwiZWZmZWN0SWQiLCJlZmZlY3QiLCJlZmZlY3RzIiwiaXNFbmFibGVkIiwiZGVja0VmZmVjdCIsInVwZGF0ZUVmZmVjdCIsImZpbHRlciIsImZpeEVmZmVjdE9yZGVyIiwibGlnaHRTaGFkb3dFZmZlY3QiLCJmaW5kIiwidHlwZSIsIkxJR0hUX0FORF9TSEFET1dfRUZGRUNUIiwiaW5kIiwiaW5kZXhPZiIsImlkIiwic3BsaWNlIiwidW5zaGlmdCIsInJlb3JkZXJFZmZlY3RPcmRlciIsIm9yaWdpbkVmZmVjdElkIiwiZGVzdGluYXRpb25FZmZlY3RJZCIsImFjdGl2ZUluZGV4Iiwib3ZlckluZGV4IiwiaXNEYXl0aW1lIiwibGF0IiwibG9uIiwidGltZXN0YW1wIiwiZGF0ZSIsIkRhdGUiLCJTdW5DYWxjIiwiZ2V0VGltZXMiLCJzdW5yaXNlIiwic3Vuc2V0IiwicGFyYW1ldGVycyIsInRpbWVNb2RlIiwic3VuTGlnaHQiLCJkaXJlY3Rpb25hbExpZ2h0cyIsIkxJR0hUX0FORF9TSEFET1dfRUZGRUNUX1RJTUVfTU9ERVMiLCJjdXJyZW50Iiwibm93IiwiYW5pbWF0aW9uIiwiYW5pbWF0aW9uQ29uZmlnIiwiY3VycmVudFRpbWUiLCJmaWx0ZXJzIiwiRklMVEVSX1RZUEVTIiwidGltZVJhbmdlIiwidmlldyIsIkZJTFRFUl9WSUVXX1RZUEVTIiwiZW5sYXJnZWQiLCJzeW5jZWRXaXRoTGF5ZXJUaW1lbGluZSIsInZhbHVlIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJvdXRwdXRVbmlmb3JtU2hhZG93IiwiaW50ZW5zaXR5Iiwic3VuTGlnaHRJbnRlbnNpdHkiLCJ2YWxpZGF0ZUVmZmVjdFBhcmFtZXRlcnMiLCJlZmZlY3REZXNjcmlwdGlvbiIsInJlc3VsdCIsImZvckVhY2giLCJkZXNjcmlwdGlvbiIsImRlZmF1bHRWYWx1ZSIsIm5hbWUiLCJtaW4iLCJtYXgiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BlcnR5IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwidiIsImkiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBUUE7O0FBQ0E7O0FBbEJBO0FBQ0E7QUFtQk8sU0FBU0Esa0JBQVQsT0FNaUI7QUFBQSxNQUx0QkMsUUFLc0IsUUFMdEJBLFFBS3NCO0FBQUEsTUFKdEJDLFFBSXNCLFFBSnRCQSxRQUlzQjtBQUN0QjtBQUNBLFNBQU9ELFFBQVEsQ0FBQ0UsV0FBVCxDQUNKQyxHQURJLENBQ0EsVUFBQUMsUUFBUSxFQUFJO0FBQ2YsUUFBTUMsTUFBTSxHQUFHLHFCQUFTRCxRQUFULEVBQW1CSixRQUFRLENBQUNNLE9BQTVCLENBQWY7O0FBQ0EsUUFBSUQsTUFBTSxTQUFOLElBQUFBLE1BQU0sV0FBTixJQUFBQSxNQUFNLENBQUVFLFNBQVIsSUFBcUJGLE1BQU0sQ0FBQ0csVUFBaEMsRUFBNEM7QUFDMUNDLE1BQUFBLFlBQVksQ0FBQztBQUFDVCxRQUFBQSxRQUFRLEVBQVJBLFFBQUQ7QUFBV0MsUUFBQUEsUUFBUSxFQUFSQSxRQUFYO0FBQXFCSSxRQUFBQSxNQUFNLEVBQU5BO0FBQXJCLE9BQUQsQ0FBWjtBQUNBLGFBQU9BLE1BQU0sQ0FBQ0csVUFBZDtBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNELEdBUkksRUFTSkUsTUFUSSxDQVNHLFVBQUFMLE1BQU07QUFBQSxXQUFJQSxNQUFKO0FBQUEsR0FUVCxDQUFQO0FBVUQ7QUFFRDtBQUNBO0FBQ0E7OztBQUNPLElBQU1NLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0wsT0FBRCxFQUFvQkosV0FBcEIsRUFBd0Q7QUFDcEYsTUFBTVUsaUJBQWlCLEdBQUdOLE9BQU8sQ0FBQ08sSUFBUixDQUFhLFVBQUFSLE1BQU07QUFBQSxX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RSxHQUF4Rjs7QUFFQSxRQUFJYixLQUFLLEtBQUt3QixTQUFkLEVBQXlCO0FBQ3ZCaEIsTUFBQUEsTUFBTSxDQUFDSSxJQUFELENBQU4sR0FBZVosS0FBZjtBQUNEO0FBQ0YsR0EzQkQ7QUE0QkEsU0FBT1EsTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHthcnJheU1vdmV9IGZyb20gJ0BkbmQta2l0L3NvcnRhYmxlJztcbmltcG9ydCBTdW5DYWxjIGZyb20gJ3N1bmNhbGMnO1xuaW1wb3J0IGNsb25lRGVlcCBmcm9tICdsb2Rhc2guY2xvbmVkZWVwJztcblxuaW1wb3J0IHtQb3N0UHJvY2Vzc0VmZmVjdH0gZnJvbSAnQGRlY2suZ2wvY29yZS90eXBlZCc7XG5cbmltcG9ydCB7XG4gIExJR0hUX0FORF9TSEFET1dfRUZGRUNULFxuICBMSUdIVF9BTkRfU0hBRE9XX0VGRkVDVF9USU1FX01PREVTLFxuICBGSUxURVJfVFlQRVMsXG4gIEZJTFRFUl9WSUVXX1RZUEVTXG59IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7VmlzU3RhdGV9IGZyb20gJ0BrZXBsZXIuZ2wvc2NoZW1hcyc7XG5pbXBvcnQge01hcFN0YXRlLCBFZmZlY3QsIEVmZmVjdFByb3BzLCBFZmZlY3REZXNjcmlwdGlvbn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge2ZpbmRCeUlkfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7Y2xhbXB9IGZyb20gJy4vZGF0YS11dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlRGVja0VmZmVjdHMoe1xuICB2aXNTdGF0ZSxcbiAgbWFwU3RhdGVcbn06IHtcbiAgdmlzU3RhdGU6IFZpc1N0YXRlO1xuICBtYXBTdGF0ZTogTWFwU3RhdGU7XG59KTogUG9zdFByb2Nlc3NFZmZlY3RbXSB7XG4gIC8vIFRPRE86IDEpIGRlY2sgZWZmZWN0cyBwZXIgZGVjayBjb250ZXh0IDIpIHByZXNlcnZlZCBiZXR3ZWVuIGRyYXdzXG4gIHJldHVybiB2aXNTdGF0ZS5lZmZlY3RPcmRlclxuICAgIC5tYXAoZWZmZWN0SWQgPT4ge1xuICAgICAgY29uc3QgZWZmZWN0ID0gZmluZEJ5SWQoZWZmZWN0SWQpKHZpc1N0YXRlLmVmZmVjdHMpIGFzIEVmZmVjdCB8IHVuZGVmaW5lZDtcbiAgICAgIGlmIChlZmZlY3Q/LmlzRW5hYmxlZCAmJiBlZmZlY3QuZGVja0VmZmVjdCkge1xuICAgICAgICB1cGRhdGVFZmZlY3Qoe3Zpc1N0YXRlLCBtYXBTdGF0ZSwgZWZmZWN0fSk7XG4gICAgICAgIHJldHVybiBlZmZlY3QuZGVja0VmZmVjdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pXG4gICAgLmZpbHRlcihlZmZlY3QgPT4gZWZmZWN0KTtcbn1cblxuLyoqXG4gKiBBbHdheXMga2VlcCBsaWdodCAmIHNoYWRvdyBlZmZlY3QgYXQgdGhlIHRvcFxuICovXG5leHBvcnQgY29uc3QgZml4RWZmZWN0T3JkZXIgPSAoZWZmZWN0czogRWZmZWN0W10sIGVmZmVjdE9yZGVyOiBzdHJpbmdbXSk6IHN0cmluZ1tdID0+IHtcbiAgY29uc3QgbGlnaHRTaGFkb3dFZmZlY3QgPSBlZmZlY3RzLmZpbmQoZWZmZWN0ID0+IGVmZmVjdC50eXBlID09PSBMSUdIVF9BTkRfU0hBRE9XX0VGRkVDVC50eXBlKTtcbiAgaWYgKGxpZ2h0U2hhZG93RWZmZWN0KSB7XG4gICAgY29uc3QgaW5kID0gZWZmZWN0T3JkZXIuaW5kZXhPZihsaWdodFNoYWRvd0VmZmVjdC5pZCk7XG4gICAgaWYgKGluZCA+IDApIHtcbiAgICAgIGVmZmVjdE9yZGVyLnNwbGljZShpbmQsIDEpO1xuICAgICAgZWZmZWN0T3JkZXIudW5zaGlmdChsaWdodFNoYWRvd0VmZmVjdC5pZCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBlZmZlY3RPcmRlcjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZW9yZGVyRWZmZWN0T3JkZXIoXG4gIGVmZmVjdE9yZGVyOiBzdHJpbmdbXSxcbiAgb3JpZ2luRWZmZWN0SWQ6IHN0cmluZyxcbiAgZGVzdGluYXRpb25FZmZlY3RJZDogc3RyaW5nXG4pOiBzdHJpbmdbXSB7XG4gIGNvbnN0IGFjdGl2ZUluZGV4ID0gZWZmZWN0T3JkZXIuaW5kZXhPZihvcmlnaW5FZmZlY3RJZCk7XG4gIGNvbnN0IG92ZXJJbmRleCA9IGVmZmVjdE9yZGVyLmluZGV4T2YoZGVzdGluYXRpb25FZmZlY3RJZCk7XG4gIHJldHVybiBhcnJheU1vdmUoZWZmZWN0T3JkZXIsIGFjdGl2ZUluZGV4LCBvdmVySW5kZXgpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBjdXJyZW50IHRpbWUgaXMgZGF5dGltZSBhdCB0aGUgZ2l2ZW4gbG9jYXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBsYXQgTGF0aXR1ZGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb24gTG9uZ2l0dWRlXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wIE1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgVW5peCBFcG9jaFxuICogQHJldHVybnMgYm9vbGVhblxuICovXG5mdW5jdGlvbiBpc0RheXRpbWUobGF0LCBsb24sIHRpbWVzdGFtcCkge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcbiAgY29uc3Qge3N1bnJpc2UsIHN1bnNldH0gPSBTdW5DYWxjLmdldFRpbWVzKGRhdGUsIGxhdCwgbG9uKTtcbiAgcmV0dXJuIGRhdGUgPj0gc3VucmlzZSAmJiBkYXRlIDw9IHN1bnNldDtcbn1cblxuLyoqXG4gKiBVcGRhdGUgZWZmZWN0IHRvIG1hdGNoIGxhdGVzdCB2aXMgYW5kIG1hcCBzdGF0ZXNcbiAqL1xuZnVuY3Rpb24gdXBkYXRlRWZmZWN0KHt2aXNTdGF0ZSwgbWFwU3RhdGUsIGVmZmVjdH0pIHtcbiAgaWYgKGVmZmVjdC50eXBlID09PSBMSUdIVF9BTkRfU0hBRE9XX0VGRkVDVC50eXBlKSB7XG4gICAgbGV0IHt0aW1lc3RhbXAsIHRpbWVNb2RlfSA9IGVmZmVjdC5wYXJhbWV0ZXJzO1xuICAgIGNvbnN0IHN1bkxpZ2h0ID0gZWZmZWN0LmRlY2tFZmZlY3QuZGlyZWN0aW9uYWxMaWdodHNbMF07XG5cbiAgICAvLyBzZXQgdGltZXN0YW1wIGZvciBzaGFkb3dcbiAgICBpZiAodGltZU1vZGUgPT09IExJR0hUX0FORF9TSEFET1dfRUZGRUNUX1RJTUVfTU9ERVMuY3VycmVudCkge1xuICAgICAgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgIHN1bkxpZ2h0LnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICB9IGVsc2UgaWYgKHRpbWVNb2RlID09PSBMSUdIVF9BTkRfU0hBRE9XX0VGRkVDVF9USU1FX01PREVTLmFuaW1hdGlvbikge1xuICAgICAgdGltZXN0YW1wID0gdmlzU3RhdGUuYW5pbWF0aW9uQ29uZmlnLmN1cnJlbnRUaW1lID8/IDA7XG4gICAgICBpZiAoIXRpbWVzdGFtcCkge1xuICAgICAgICBjb25zdCBmaWx0ZXIgPSB2aXNTdGF0ZS5maWx0ZXJzLmZpbmQoXG4gICAgICAgICAgZmlsdGVyID0+XG4gICAgICAgICAgICBmaWx0ZXIudHlwZSA9PT0gRklMVEVSX1RZUEVTLnRpbWVSYW5nZSAmJlxuICAgICAgICAgICAgKGZpbHRlci52aWV3ID09PSBGSUxURVJfVklFV19UWVBFUy5lbmxhcmdlZCB8fCBmaWx0ZXIuc3luY2VkV2l0aExheWVyVGltZWxpbmUpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgICB0aW1lc3RhbXAgPSBmaWx0ZXIudmFsdWU/LlswXSA/PyAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdW5MaWdodC50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgfVxuXG4gICAgLy8gb3V0cHV0IHVuaWZvcm0gc2hhZG93IGR1cmluZyBuaWdodHRpbWVcbiAgICBpZiAoaXNEYXl0aW1lKG1hcFN0YXRlLmxhdGl0dWRlLCBtYXBTdGF0ZS5sb25naXR1ZGUsIHRpbWVzdGFtcCkpIHtcbiAgICAgIGVmZmVjdC5kZWNrRWZmZWN0Lm91dHB1dFVuaWZvcm1TaGFkb3cgPSBmYWxzZTtcbiAgICAgIHN1bkxpZ2h0LmludGVuc2l0eSA9IGVmZmVjdC5wYXJhbWV0ZXJzLnN1bkxpZ2h0SW50ZW5zaXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICBlZmZlY3QuZGVja0VmZmVjdC5vdXRwdXRVbmlmb3JtU2hhZG93ID0gdHJ1ZTtcbiAgICAgIHN1bkxpZ2h0LmludGVuc2l0eSA9IDA7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHBhcmFtZXRlcnMgZm9yIGFuIGVmZmVjdCwgY2xhbXBzIG51bWJlcnMgdG8gYWxsb3dlZCByYW5nZXNcbiAqIG9yIGFwcGxpZXMgZGVmYXVsdCB2YWx1ZXMgaW4gY2FzZSBvZiB3cm9uZyBub24tbnVtZXJpYyB2YWx1ZXMuXG4gKiBBbGwgdW5rbm93biBwcm9wZXJ0aWVzIGFyZW4ndCBtb2RpZmllZC5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJzIFBhcmFtZXRlcnMgY2FuZGlkYXRlIGZvciBhbiBlZmZlY3QuXG4gKiBAcGFyYW0gZWZmZWN0RGVzY3JpcHRpb24gRGVzY3JpcHRpb24gb2YgYW4gZWZmZWN0LlxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRWZmZWN0UGFyYW1ldGVycyhcbiAgcGFyYW1ldGVyczogRWZmZWN0UHJvcHNbJ3BhcmFtZXRlcnMnXSA9IHt9LFxuICBlZmZlY3REZXNjcmlwdGlvbjogRWZmZWN0RGVzY3JpcHRpb25bJ3BhcmFtZXRlcnMnXVxuKTogRWZmZWN0UHJvcHNbJ3BhcmFtZXRlcnMnXSB7XG4gIGNvbnN0IHJlc3VsdCA9IGNsb25lRGVlcChwYXJhbWV0ZXJzKTtcbiAgZWZmZWN0RGVzY3JpcHRpb24uZm9yRWFjaChkZXNjcmlwdGlvbiA9PiB7XG4gICAgY29uc3Qge2RlZmF1bHRWYWx1ZSwgbmFtZSwgdHlwZSwgbWluLCBtYXh9ID0gZGVzY3JpcHRpb247XG5cbiAgICBpZiAoIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgcmV0dXJuO1xuICAgIGNvbnN0IHByb3BlcnR5ID0gcmVzdWx0W25hbWVdO1xuXG4gICAgaWYgKHR5cGUgPT09ICdjb2xvcicgfHwgdHlwZSA9PT0gJ2FycmF5Jykge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRlZmF1bHRWYWx1ZSkpIHJldHVybjtcbiAgICAgIGlmIChwcm9wZXJ0eS5sZW5ndGggIT09IGRlZmF1bHRWYWx1ZT8ubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtuYW1lXSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGVmYXVsdFZhbHVlLmZvckVhY2goKHYsIGkpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gcHJvcGVydHlbaV07XG4gICAgICAgIHZhbHVlID0gTnVtYmVyLmlzRmluaXRlKHZhbHVlKSA/IGNsYW1wKFttaW4sIG1heF0sIHZhbHVlKSA6IGRlZmF1bHRWYWx1ZVtpXSA/PyBtaW47XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcHJvcGVydHlbaV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBOdW1iZXIuaXNGaW5pdGUocHJvcGVydHkpID8gY2xhbXAoW21pbiwgbWF4XSwgcHJvcGVydHkpIDogZGVmYXVsdFZhbHVlID8/IG1pbjtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHRbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuIl19