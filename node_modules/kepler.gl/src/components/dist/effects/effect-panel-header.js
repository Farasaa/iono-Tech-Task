"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EffectPanelHeaderActionSectionFactory = EffectPanelHeaderActionSectionFactory;
exports["default"] = exports.defaultProps = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("@kepler.gl/constants");

var _panelHeaderAction = _interopRequireDefault(require("../side-panel/panel-header-action"));

var _icons = require("../common/icons");

var _styledComponents2 = require("../common/styled-components");

var _defaultEffectIcons, _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;

var defaultProps = {
  isDragNDropEnabled: true
};
exports.defaultProps = defaultProps;
var defaultActionIcons = {
  remove: _icons.Trash,
  visible: _icons.EyeSeen,
  hidden: _icons.EyeUnseen,
  enableConfig: _icons.ArrowDown,
  disableConfig: _icons.ArrowUp
};
var defaultEffectIcons = (_defaultEffectIcons = {}, (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.LIGHT_AND_SHADOW_EFFECT.type, _icons.LightAndShadowEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.ink.type, _icons.InkEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.brightnessContrast.type, _icons.BrightnessContrastEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.hueSaturation.type, _icons.HueSaturationEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.vibrance.type, _icons.VibranceEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.sepia.type, _icons.SepiaEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.dotScreen.type, _icons.DotScreenEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.colorHalftone.type, _icons.ColorHalftoneEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.noise.type, _icons.NoiseEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.triangleBlur.type, _icons.TriangleBlurEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.zoomBlur.type, _icons.ZoomBlurEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.tiltShift.type, _icons.TiltShiftEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.edgeWork.type, _icons.EdgeWorkEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.vignette.type, _icons.VignetteEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.magnify.type, _icons.MagnifyEffectIcon), (0, _defineProperty2["default"])(_defaultEffectIcons, _constants.POSTPROCESSING_EFFECTS.hexagonalPixelate.type, _icons.HexagonalPixelateEffectIcon), _defaultEffectIcons);
var StyledEffectPanelHeader = (0, _styledComponents["default"])(_styledComponents2.StyledPanelHeader)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  height: ", "px;\n  position: relative;\n  align-items: stretch;\n\n  .effect__drag-handle {\n    margin-left: -5px;\n    color: ", ";\n  }\n\n  .effect__drag-handle__placeholder {\n    height: 20px;\n    padding: 0px;\n    margin: 10px 10px 10px 5px;\n  }\n\n  :hover {\n    cursor: pointer;\n    background-color: ", ";\n    .effect__drag-handle {\n      opacity: 1;\n    }\n  }\n\n  border-left: 3px solid ", ";\n"])), function (props) {
  return props.theme.effectPanelHeaderHeight;
}, function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.panelBackgroundHover;
}, function (props) {
  return props.theme.panelBackgroundHover;
});

var HeaderActionSection = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  position: absolute;\n  height: 100%;\n  align-items: stretch;\n  right: 10px;\n  :hover {\n    .effect-panel__header__actions__hidden {\n      opacity: 1;\n      background-color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.panelBackgroundHover;
}); // Hiden actions only show up on hover


var StyledPanelHeaderHiddenActions = _styledComponents["default"].div.attrs({
  className: 'effect-panel__header__actions__hidden'
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  opacity: 0;\n  display: flex;\n  align-items: center;\n  transition: opacity 0.4s ease, background-color 0.4s ease;\n  background-color: ", ";\n\n  :hover {\n    opacity: 1;\n  }\n"])), function (props) {
  return props.isConfigActive ? props.theme.panelBackgroundHover : props.theme.panelBackground;
});

var StyledDragHandle = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  opacity: 0;\n  z-index: 1000;\n  :hover {\n    cursor: move;\n    opacity: 1;\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.textColorHl;
});

var DragHandle = function DragHandle(_ref) {
  var className = _ref.className,
      listeners = _ref.listeners,
      children = _ref.children;
  return /*#__PURE__*/_react["default"].createElement(StyledDragHandle, (0, _extends2["default"])({
    className: className
  }, listeners), children);
};

EffectPanelHeaderActionSectionFactory.deps = [_panelHeaderAction["default"]];

function EffectPanelHeaderActionSectionFactory(PanelHeaderAction) {
  var EffectPanelHeaderActionSection = function EffectPanelHeaderActionSection(props) {
    var effectId = props.effectId,
        isEnabled = props.isEnabled,
        isConfigActive = props.isConfigActive,
        onToggleEnabled = props.onToggleEnabled,
        onRemoveEffect = props.onRemoveEffect,
        onToggleEnableConfig = props.onToggleEnableConfig,
        actionItems = props.actionItems,
        _props$actionIcons = props.actionIcons,
        actionIcons = _props$actionIcons === void 0 ? defaultActionIcons : _props$actionIcons;
    var effectActionItems = (0, _react.useMemo)(function () {
      return actionItems !== null && actionItems !== void 0 ? actionItems : [{
        key: 'remove-effect',
        isHidden: true,
        tooltip: 'tooltip.removeEffect',
        tooltipType: 'error',
        onClick: onRemoveEffect,
        icon: actionIcons.remove
      }, {
        key: 'visibility-toggle',
        tooltip: isEnabled ? 'tooltip.disableEffect' : 'tooltip.enabledEffect',
        onClick: onToggleEnabled,
        icon: isEnabled ? actionIcons.visible : actionIcons.hidden
      }, {
        key: 'enable-config',
        classNames: {
          'is-open': isConfigActive
        },
        tooltip: 'tooltip.effectSettings',
        onClick: onToggleEnableConfig,
        icon: actionIcons.enableConfig
      }];
    }, [actionItems, isEnabled, onRemoveEffect, onToggleEnabled, actionIcons]);
    return /*#__PURE__*/_react["default"].createElement(HeaderActionSection, {
      className: "effect-panel__header__actions"
    }, /*#__PURE__*/_react["default"].createElement(StyledPanelHeaderHiddenActions, {
      isConfigActive: isConfigActive
    }, effectActionItems.filter(function (item) {
      return Boolean(item.isHidden);
    }).map(function (item, i) {
      return /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
        key: item.key,
        className: "effect__".concat(item.key),
        testId: "".concat(item.key, "-action"),
        id: effectId,
        tooltip: item.tooltip,
        onClick: item.onClick,
        tooltipType: item.tooltipType,
        IconComponent: item.icon
      });
    })), effectActionItems.filter(function (item) {
      return !item.isHidden;
    }).map(function (item, i) {
      return /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
        key: item.key,
        className: (0, _classnames["default"])("effect__".concat(item.key), item.classNames),
        testId: "".concat(item.key, "-action"),
        id: effectId,
        tooltip: item.tooltip,
        onClick: item.onClick,
        tooltipType: item.tooltipType,
        IconComponent: item.icon
      });
    }));
  };

  return EffectPanelHeaderActionSection;
}

var StyledEffectTitleSection = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-left: 8px;\n  flex-grow: 1;\n  align-items: center;\n  display: flex;\n  color: ", ";\n"])), function (props) {
  return props.theme.textColor;
});

var IconPlaceholder = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 20px;\n  height: 20px;\n"])));

var EffectIconWrapper = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  height: 18px;\n  margin: auto;\n  color: ", ";\n"])), function (props) {
  return props.theme.textColor;
});

EffectPanelHeaderFactory.deps = [EffectPanelHeaderActionSectionFactory];

function EffectPanelHeaderFactory(EffectPanelHeaderActionSection) {
  var EffectPanelHeader = function EffectPanelHeader(props) {
    var isConfigActive = props.isConfigActive,
        isDragNDropEnabled = props.isDragNDropEnabled,
        type = props.type,
        onToggleEnableConfig = props.onToggleEnableConfig,
        listeners = props.listeners,
        _props$showSortHandle = props.showSortHandle,
        showSortHandle = _props$showSortHandle === void 0 ? true : _props$showSortHandle;
    var label = (0, _react.useMemo)(function () {
      var description = _constants.EFFECT_DESCRIPTIONS.find(function (_description) {
        return _description.type === type;
      });

      return (description === null || description === void 0 ? void 0 : description.name) || 'Effect';
    }, [type]);
    var EffectIcon = defaultEffectIcons[type];
    return /*#__PURE__*/_react["default"].createElement(StyledEffectPanelHeader, {
      className: (0, _classnames["default"])('effect-panel__header', {
        'sort--handle': !isConfigActive
      }),
      active: isConfigActive,
      onClick: onToggleEnableConfig
    }, isDragNDropEnabled ? /*#__PURE__*/_react["default"].createElement(DragHandle, {
      className: "effect__drag-handle",
      listeners: listeners
    }, showSortHandle ? /*#__PURE__*/_react["default"].createElement(_icons.VertDots, {
      height: "20px"
    }) : /*#__PURE__*/_react["default"].createElement(IconPlaceholder, null)) : /*#__PURE__*/_react["default"].createElement("div", {
      className: "effect__drag-handle__placeholder"
    }), /*#__PURE__*/_react["default"].createElement(EffectIconWrapper, null, EffectIcon ? /*#__PURE__*/_react["default"].createElement(EffectIcon, {
      height: "18px"
    }) : null), /*#__PURE__*/_react["default"].createElement(StyledEffectTitleSection, null, label), /*#__PURE__*/_react["default"].createElement(EffectPanelHeaderActionSection, props));
  };

  EffectPanelHeader.defaultProps = defaultProps;
  return EffectPanelHeader;
}

var _default = EffectPanelHeaderFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,