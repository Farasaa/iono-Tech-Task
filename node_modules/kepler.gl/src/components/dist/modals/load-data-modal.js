"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadDataModalFactory = LoadDataModalFactory;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodash = _interopRequireDefault(require("lodash.get"));

var _reactIntl = require("react-intl");

var _fileUpload = _interopRequireDefault(require("../common/file-uploader/file-upload"));

var _loadStorageMap = _interopRequireDefault(require("./load-storage-map"));

var _modalTabs = _interopRequireDefault(require("./modal-tabs"));

var _loadingDialog = _interopRequireDefault(require("./loading-dialog"));

var _constants = require("@kepler.gl/constants");

var _templateObject;

/** @typedef {import('./load-data-modal').LoadDataModalProps} LoadDataModalProps */
var StyledLoadDataModal = _styledComponents["default"].div.attrs({
  className: 'load-data-modal'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: ", ";\n  min-height: 440px;\n  display: flex;\n  flex-direction: column;\n"])), function (props) {
  return props.theme.modalPadding;
});

var noop = function noop() {};

var getDefaultMethod = function getDefaultMethod() {
  var methods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return Array.isArray(methods) ? (0, _lodash["default"])(methods, [0]) : null;
};

LoadDataModalFactory.deps = [_modalTabs["default"], _fileUpload["default"], _loadStorageMap["default"]];

function LoadDataModalFactory(ModalTabs, FileUpload, LoadStorageMap) {
  /** @type {React.FunctionComponent<LoadDataModalProps>} */
  var LoadDataModal = function LoadDataModal(props) {
    var intl = (0, _reactIntl.useIntl)();
    var loadingMethods = props.loadingMethods,
        isCloudMapLoading = props.isCloudMapLoading;

    var _useState = (0, _react.useState)(getDefaultMethod(loadingMethods)),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        currentMethod = _useState2[0],
        toggleMethod = _useState2[1];

    var ElementType = currentMethod === null || currentMethod === void 0 ? void 0 : currentMethod.elementType;
    return /*#__PURE__*/_react["default"].createElement(StyledLoadDataModal, null, /*#__PURE__*/_react["default"].createElement(ModalTabs, {
      currentMethod: currentMethod === null || currentMethod === void 0 ? void 0 : currentMethod.id,
      loadingMethods: loadingMethods,
      toggleMethod: toggleMethod
    }), isCloudMapLoading ? /*#__PURE__*/_react["default"].createElement(_loadingDialog["default"], {
      size: 64
    }) : ElementType && /*#__PURE__*/_react["default"].createElement(ElementType, (0, _extends2["default"])({
      key: currentMethod === null || currentMethod === void 0 ? void 0 : currentMethod.id,
      intl: intl
    }, props)));
  };

  LoadDataModal.defaultProps = {
    onFileUpload: noop,
    fileLoading: false,
    loadingMethods: [{
      id: _constants.LOADING_METHODS.upload,
      label: 'modal.loadData.upload',
      elementType: FileUpload
    }, {
      id: _constants.LOADING_METHODS.storage,
      label: 'modal.loadData.storage',
      elementType: LoadStorageMap
    }]
  };
  return LoadDataModal;
}

var _default = LoadDataModalFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RhbHMvbG9hZC1kYXRhLW1vZGFsLnRzeCJdLCJuYW1lcyI6WyJTdHlsZWRMb2FkRGF0YU1vZGFsIiwic3R5bGVkIiwiZGl2IiwiYXR0cnMiLCJjbGFzc05hbWUiLCJwcm9wcyIsInRoZW1lIiwibW9kYWxQYWRkaW5nIiwibm9vcCIsImdldERlZmF1bHRNZXRob2QiLCJtZXRob2RzIiwiQXJyYXkiLCJpc0FycmF5IiwiTG9hZERhdGFNb2RhbEZhY3RvcnkiLCJkZXBzIiwiTW9kYWxUYWJzRmFjdG9yeSIsIkZpbGVVcGxvYWRGYWN0b3J5IiwiTG9hZFN0b3JhZ2VNYXBGYWN0b3J5IiwiTW9kYWxUYWJzIiwiRmlsZVVwbG9hZCIsIkxvYWRTdG9yYWdlTWFwIiwiTG9hZERhdGFNb2RhbCIsImludGwiLCJsb2FkaW5nTWV0aG9kcyIsImlzQ2xvdWRNYXBMb2FkaW5nIiwiY3VycmVudE1ldGhvZCIsInRvZ2dsZU1ldGhvZCIsIkVsZW1lbnRUeXBlIiwiZWxlbWVudFR5cGUiLCJpZCIsImRlZmF1bHRQcm9wcyIsIm9uRmlsZVVwbG9hZCIsImZpbGVMb2FkaW5nIiwiTE9BRElOR19NRVRIT0RTIiwidXBsb2FkIiwibGFiZWwiLCJzdG9yYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQUdBO0FBRUEsSUFBTUEsbUJBQW1CLEdBQUdDLDZCQUFPQyxHQUFQLENBQVdDLEtBQVgsQ0FBaUI7QUFDM0NDLEVBQUFBLFNBQVMsRUFBRTtBQURnQyxDQUFqQixDQUFILDhLQUdaLFVBQUFDLEtBQUs7QUFBQSxTQUFJQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUMsWUFBaEI7QUFBQSxDQUhPLENBQXpCOztBQVNBLElBQU1DLElBQUksR0FBRyxTQUFQQSxJQUFPLEdBQU0sQ0FBRSxDQUFyQjs7QUFDQSxJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CO0FBQUEsTUFBS0MsT0FBTCx1RUFBb0IsRUFBcEI7QUFBQSxTQUN2QkMsS0FBSyxDQUFDQyxPQUFOLENBQWNGLE9BQWQsSUFBeUIsd0JBQUlBLE9BQUosRUFBYSxDQUFDLENBQUQsQ0FBYixDQUF6QixHQUE2QyxJQUR0QjtBQUFBLENBQXpCOztBQTRCQUcsb0JBQW9CLENBQUNDLElBQXJCLEdBQTRCLENBQUNDLHFCQUFELEVBQW1CQyxzQkFBbkIsRUFBc0NDLDBCQUF0QyxDQUE1Qjs7QUFFTyxTQUFTSixvQkFBVCxDQUNMSyxTQURLLEVBRUxDLFVBRkssRUFHTEMsY0FISyxFQUlMO0FBQ0E7QUFDQSxNQUFNQyxhQUEyQyxHQUFHLFNBQTlDQSxhQUE4QyxDQUFBaEIsS0FBSyxFQUFJO0FBQzNELFFBQU1pQixJQUFJLEdBQUcseUJBQWI7QUFEMkQsUUFFcERDLGNBRm9ELEdBRWZsQixLQUZlLENBRXBEa0IsY0FGb0Q7QUFBQSxRQUVwQ0MsaUJBRm9DLEdBRWZuQixLQUZlLENBRXBDbUIsaUJBRm9DOztBQUFBLG9CQUdyQixxQkFBU2YsZ0JBQWdCLENBQUNjLGNBQUQsQ0FBekIsQ0FIcUI7QUFBQTtBQUFBLFFBR3BERSxhQUhvRDtBQUFBLFFBR3JDQyxZQUhxQzs7QUFLM0QsUUFBTUMsV0FBVyxHQUFHRixhQUFILGFBQUdBLGFBQUgsdUJBQUdBLGFBQWEsQ0FBRUcsV0FBbkM7QUFFQSx3QkFDRSxnQ0FBQyxtQkFBRCxxQkFDRSxnQ0FBQyxTQUFEO0FBQ0UsTUFBQSxhQUFhLEVBQUVILGFBQUYsYUFBRUEsYUFBRix1QkFBRUEsYUFBYSxDQUFFSSxFQURoQztBQUVFLE1BQUEsY0FBYyxFQUFFTixjQUZsQjtBQUdFLE1BQUEsWUFBWSxFQUFFRztBQUhoQixNQURGLEVBTUdGLGlCQUFpQixnQkFDaEIsZ0NBQUMseUJBQUQ7QUFBZSxNQUFBLElBQUksRUFBRTtBQUFyQixNQURnQixHQUdoQkcsV0FBVyxpQkFBSSxnQ0FBQyxXQUFEO0FBQWEsTUFBQSxHQUFHLEVBQUVGLGFBQUYsYUFBRUEsYUFBRix1QkFBRUEsYUFBYSxDQUFFSSxFQUFqQztBQUFxQyxNQUFBLElBQUksRUFBRVA7QUFBM0MsT0FBcURqQixLQUFyRCxFQVRuQixDQURGO0FBY0QsR0FyQkQ7O0FBdUJBZ0IsRUFBQUEsYUFBYSxDQUFDUyxZQUFkLEdBQTZCO0FBQzNCQyxJQUFBQSxZQUFZLEVBQUV2QixJQURhO0FBRTNCd0IsSUFBQUEsV0FBVyxFQUFFLEtBRmM7QUFHM0JULElBQUFBLGNBQWMsRUFBRSxDQUNkO0FBQ0VNLE1BQUFBLEVBQUUsRUFBRUksMkJBQWdCQyxNQUR0QjtBQUVFQyxNQUFBQSxLQUFLLEVBQUUsdUJBRlQ7QUFHRVAsTUFBQUEsV0FBVyxFQUFFVDtBQUhmLEtBRGMsRUFNZDtBQUNFVSxNQUFBQSxFQUFFLEVBQUVJLDJCQUFnQkcsT0FEdEI7QUFFRUQsTUFBQUEsS0FBSyxFQUFFLHdCQUZUO0FBR0VQLE1BQUFBLFdBQVcsRUFBRVI7QUFIZixLQU5jO0FBSFcsR0FBN0I7QUFpQkEsU0FBT0MsYUFBUDtBQUNEOztlQUVjUixvQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBnZXQgZnJvbSAnbG9kYXNoLmdldCc7XG5pbXBvcnQge0ludGxTaGFwZSwgdXNlSW50bH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmltcG9ydCBGaWxlVXBsb2FkRmFjdG9yeSBmcm9tICcuLi9jb21tb24vZmlsZS11cGxvYWRlci9maWxlLXVwbG9hZCc7XG5pbXBvcnQgTG9hZFN0b3JhZ2VNYXBGYWN0b3J5IGZyb20gJy4vbG9hZC1zdG9yYWdlLW1hcCc7XG5pbXBvcnQgTW9kYWxUYWJzRmFjdG9yeSBmcm9tICcuL21vZGFsLXRhYnMnO1xuaW1wb3J0IExvYWRpbmdEaWFsb2cgZnJvbSAnLi9sb2FkaW5nLWRpYWxvZyc7XG5cbmltcG9ydCB7TE9BRElOR19NRVRIT0RTfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge0ZpbGVMb2FkaW5nLCBGaWxlTG9hZGluZ1Byb2dyZXNzLCBMb2FkRmlsZXN9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9sb2FkLWRhdGEtbW9kYWwnKS5Mb2FkRGF0YU1vZGFsUHJvcHN9IExvYWREYXRhTW9kYWxQcm9wcyAqL1xuXG5jb25zdCBTdHlsZWRMb2FkRGF0YU1vZGFsID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2xvYWQtZGF0YS1tb2RhbCdcbn0pYFxuICBwYWRkaW5nOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLm1vZGFsUGFkZGluZ307XG4gIG1pbi1oZWlnaHQ6IDQ0MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuYDtcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuY29uc3QgZ2V0RGVmYXVsdE1ldGhvZCA9IDxULD4obWV0aG9kczogVFtdID0gW10pID0+XG4gIEFycmF5LmlzQXJyYXkobWV0aG9kcykgPyBnZXQobWV0aG9kcywgWzBdKSA6IG51bGw7XG5leHBvcnQgaW50ZXJmYWNlIExvYWRpbmdNZXRob2Qge1xuICBpZDogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xuICBlbGVtZW50VHlwZTogUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+O1xuICB0YWJFbGVtZW50VHlwZT86IFJlYWN0LkNvbXBvbmVudFR5cGU8e29uQ2xpY2s6IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyOyBpbnRsOiBJbnRsU2hhcGV9Pjtcbn1cblxudHlwZSBMb2FkRGF0YU1vZGFsUHJvcHMgPSB7XG4gIC8vIGNhbGwgYmFja3NcbiAgb25GaWxlVXBsb2FkOiAoZmlsZXM6IEZpbGVbXSkgPT4gdm9pZDtcbiAgb25Mb2FkQ2xvdWRNYXA6IChwcm92aWRlcjogYW55LCB2aXM6IGFueSkgPT4gdm9pZDtcbiAgZmlsZUxvYWRpbmc6IEZpbGVMb2FkaW5nIHwgZmFsc2U7XG4gIGxvYWRpbmdNZXRob2RzPzogTG9hZGluZ01ldGhvZFtdO1xuICAvKiogQSBsaXN0IG9mIG5hbWVzIG9mIHN1cHBvcnRlZCBmb3JtYXRzIHN1aXRhYmxlIHRvIHByZXNlbnQgdG8gdXNlciAqL1xuICBmaWxlRm9ybWF0TmFtZXM6IHN0cmluZ1tdO1xuICAvKiogQSBsaXN0IG9mIHR5cGljYWxseSAzIGxldHRlciBleHRlbnNpb25zICh3aXRob3V0ICcuJykgZm9yIGZpbGUgbWF0Y2hpbmcgKi9cbiAgZmlsZUV4dGVuc2lvbnM6IHN0cmluZ1tdO1xuICBpc0Nsb3VkTWFwTG9hZGluZzogYm9vbGVhbjtcbiAgLyoqIFNldCB0byB0cnVlIGlmIGFwcCB3YW50cyB0byBkbyBpdHMgb3duIGZpbGUgZmlsdGVyaW5nICovXG4gIGRpc2FibGVFeHRlbnNpb25GaWx0ZXI/OiBib29sZWFuO1xuICBvbkNsb3NlPzogKC4uLmFyZ3M6IGFueSkgPT4gYW55O1xuXG4gIGxvYWRGaWxlczogTG9hZEZpbGVzO1xuICBmaWxlTG9hZGluZ1Byb2dyZXNzOiBGaWxlTG9hZGluZ1Byb2dyZXNzO1xufTtcblxuTG9hZERhdGFNb2RhbEZhY3RvcnkuZGVwcyA9IFtNb2RhbFRhYnNGYWN0b3J5LCBGaWxlVXBsb2FkRmFjdG9yeSwgTG9hZFN0b3JhZ2VNYXBGYWN0b3J5XTtcblxuZXhwb3J0IGZ1bmN0aW9uIExvYWREYXRhTW9kYWxGYWN0b3J5KFxuICBNb2RhbFRhYnM6IFJldHVyblR5cGU8dHlwZW9mIE1vZGFsVGFic0ZhY3Rvcnk+LFxuICBGaWxlVXBsb2FkOiBSZXR1cm5UeXBlPHR5cGVvZiBGaWxlVXBsb2FkRmFjdG9yeT4sXG4gIExvYWRTdG9yYWdlTWFwOiBSZXR1cm5UeXBlPHR5cGVvZiBMb2FkU3RvcmFnZU1hcEZhY3Rvcnk+XG4pIHtcbiAgLyoqIEB0eXBlIHtSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxMb2FkRGF0YU1vZGFsUHJvcHM+fSAqL1xuICBjb25zdCBMb2FkRGF0YU1vZGFsOiBSZWFjdC5GQzxMb2FkRGF0YU1vZGFsUHJvcHM+ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG4gICAgY29uc3Qge2xvYWRpbmdNZXRob2RzLCBpc0Nsb3VkTWFwTG9hZGluZ30gPSBwcm9wcztcbiAgICBjb25zdCBbY3VycmVudE1ldGhvZCwgdG9nZ2xlTWV0aG9kXSA9IHVzZVN0YXRlKGdldERlZmF1bHRNZXRob2QobG9hZGluZ01ldGhvZHMpKTtcblxuICAgIGNvbnN0IEVsZW1lbnRUeXBlID0gY3VycmVudE1ldGhvZD8uZWxlbWVudFR5cGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlZExvYWREYXRhTW9kYWw+XG4gICAgICAgIDxNb2RhbFRhYnNcbiAgICAgICAgICBjdXJyZW50TWV0aG9kPXtjdXJyZW50TWV0aG9kPy5pZH1cbiAgICAgICAgICBsb2FkaW5nTWV0aG9kcz17bG9hZGluZ01ldGhvZHN9XG4gICAgICAgICAgdG9nZ2xlTWV0aG9kPXt0b2dnbGVNZXRob2R9XG4gICAgICAgIC8+XG4gICAgICAgIHtpc0Nsb3VkTWFwTG9hZGluZyA/IChcbiAgICAgICAgICA8TG9hZGluZ0RpYWxvZyBzaXplPXs2NH0gLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICBFbGVtZW50VHlwZSAmJiA8RWxlbWVudFR5cGUga2V5PXtjdXJyZW50TWV0aG9kPy5pZH0gaW50bD17aW50bH0gey4uLnByb3BzfSAvPlxuICAgICAgICApfVxuICAgICAgPC9TdHlsZWRMb2FkRGF0YU1vZGFsPlxuICAgICk7XG4gIH07XG5cbiAgTG9hZERhdGFNb2RhbC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgb25GaWxlVXBsb2FkOiBub29wLFxuICAgIGZpbGVMb2FkaW5nOiBmYWxzZSxcbiAgICBsb2FkaW5nTWV0aG9kczogW1xuICAgICAge1xuICAgICAgICBpZDogTE9BRElOR19NRVRIT0RTLnVwbG9hZCxcbiAgICAgICAgbGFiZWw6ICdtb2RhbC5sb2FkRGF0YS51cGxvYWQnLFxuICAgICAgICBlbGVtZW50VHlwZTogRmlsZVVwbG9hZFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6IExPQURJTkdfTUVUSE9EUy5zdG9yYWdlLFxuICAgICAgICBsYWJlbDogJ21vZGFsLmxvYWREYXRhLnN0b3JhZ2UnLFxuICAgICAgICBlbGVtZW50VHlwZTogTG9hZFN0b3JhZ2VNYXBcbiAgICAgIH1cbiAgICBdXG4gIH07XG5cbiAgcmV0dXJuIExvYWREYXRhTW9kYWw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvYWREYXRhTW9kYWxGYWN0b3J5O1xuIl19