import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { point } from '@turf/helpers';
import transformTranslate from '@turf/transform-translate';
export function parseSetCameraType(strCameraType, viewState) {
  var modifiedViewState = _objectSpread({}, viewState);

  var match = strCameraType.match(/\b(?!to)\b\S+\w/g);
  var turfPoint = point([modifiedViewState.longitude, modifiedViewState.latitude]);

  if (match[0] === 'Orbit') {
    modifiedViewState.bearing = parseInt(match[1], 10);
  }

  var setChecker = new Set(['East', 'South', 'West', 'North']);

  if (setChecker.has(match[0])) {
    if (match[0] === 'East') {
      var translatedPoly = transformTranslate(turfPoint, 10, 270);
      modifiedViewState.longitude = translatedPoly.geometry.coordinates[0];
    } else if (match[0] === 'South') {
      var _translatedPoly = transformTranslate(turfPoint, 10, 0);

      modifiedViewState.latitude = _translatedPoly.geometry.coordinates[1];
    } else if (match[0] === 'West') {
      var _translatedPoly2 = transformTranslate(turfPoint, 10, 90);

      modifiedViewState.longitude = _translatedPoly2.geometry.coordinates[0];
    } else if (match[0] === 'North') {
      var _translatedPoly3 = transformTranslate(turfPoint, 10, 180);

      modifiedViewState.latitude = _translatedPoly3.geometry.coordinates[1];
    }
  }

  if (match[0] === 'Zoom') {
    if (match[1] === 'In') {
      modifiedViewState.zoom = modifiedViewState.zoom + 3;
    } else if (match[1] === 'Out') {
      modifiedViewState.zoom = modifiedViewState.zoom - 3;
    }
  }

  return modifiedViewState;
}
export function msConversion(durationMs) {
  var milliseconds = parseInt(durationMs % 1000, 10);
  var seconds = parseInt(durationMs / 1000 % 60, 10);
  var minutes = parseInt(durationMs / (1000 * 60) % 60, 10);
  minutes = minutes < 10 ? "0".concat(minutes) : minutes;
  seconds = seconds < 10 ? "0".concat(seconds) : seconds;
  return "".concat(minutes, ":").concat(seconds, ".").concat(milliseconds);
}
export function estimateFileSize(frameRate, resolution, durationMs, mediaType) {
  if (mediaType === 'gif') {
    var seconds = parseInt(durationMs / 1000, 10);
    return "".concat(parseInt(resolution[0] * resolution[1] * 6 / (8 * 1024 * 1024) * (frameRate * seconds) * 0.8, 10), " MB");
  }

  return 'Size estimation unavailable';
}
//# sourceMappingURL=utils.js.map