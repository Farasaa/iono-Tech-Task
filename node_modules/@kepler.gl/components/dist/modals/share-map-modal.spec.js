"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _useCloudListProvider = require("../hooks/use-cloud-list-provider");

var _componentJestUtils = require("test/helpers/component-jest-utils");

var _shareMapModal = _interopRequireDefault(require("./share-map-modal"));

var _constants = require("@kepler.gl/constants");

var _react2 = require("@testing-library/react");

var _styledComponents = require("styled-components");

var _reactIntl = require("react-intl");

var _styles = require("@kepler.gl/styles");

var _localization = require("@kepler.gl/localization");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

jest.mock('../hooks/use-cloud-list-provider', function () {
  return {
    useCloudListProvider: jest.fn().mockImplementation(function () {
      return {
        provider: null,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    })
  };
});
var ShareMapUrlModal = (0, _shareMapModal["default"])();
var DEFAULT_PROPS = {
  isProviderLoading: false,
  onExport: jest.fn(),
  providerError: null,
  successInfo: undefined,
  onUpdateImageSetting: jest.fn(),
  cleanupExportImage: jest.fn()
};
describe('ShareMapModal', function () {
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('renders only list of providers', function () {
    var _renderWithTheme = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(ShareMapUrlModal, DEFAULT_PROPS)),
        getByText = _renderWithTheme.getByText,
        queryByTestId = _renderWithTheme.queryByTestId;

    expect(getByText('modal.shareMap.title')).toBeInTheDocument();
    expect(queryByTestId(_constants.dataTestIds.providerShareMap)).toBeNull();
  });
  test('renders list of provider and sharing section', function () {
    var mapProvider = {
      name: 'test provider',
      icon: jest.fn(),
      getManagementUrl: jest.fn().mockImplementation(function () {
        return 'provider.url';
      }),
      listMaps: jest.fn().mockResolvedValue([]),
      hasSharingUrl: jest.fn().mockImplementation(function () {
        return true;
      })
    };

    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: mapProvider,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });

    var _renderWithTheme2 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(ShareMapUrlModal, DEFAULT_PROPS)),
        getByText = _renderWithTheme2.getByText,
        getByTestId = _renderWithTheme2.getByTestId;

    expect(getByText('modal.shareMap.title')).toBeInTheDocument();
    expect(getByTestId(_constants.dataTestIds.providerShareMap)).toBeInTheDocument();
  });
  test('renders loading when isLoading is set to true', function () {
    var mapProvider = {
      name: 'test provider',
      icon: jest.fn(),
      getManagementUrl: jest.fn().mockImplementation(function () {
        return 'provider.url';
      }),
      listMaps: jest.fn().mockResolvedValue([]),
      hasSharingUrl: jest.fn().mockImplementation(function () {
        return true;
      })
    };

    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: mapProvider,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });

    var providerLoadingProps = _objectSpread(_objectSpread({}, DEFAULT_PROPS), {}, {
      isProviderLoading: true
    });

    var _renderWithTheme3 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(ShareMapUrlModal, providerLoadingProps)),
        getByText = _renderWithTheme3.getByText;

    expect(getByText('modal.statusPanel.mapUploading')).toBeInTheDocument();
  });
  test('calls onExport when provider is set correctly', function () {
    var mapProvider = {
      name: 'test provider',
      icon: jest.fn(),
      getManagementUrl: jest.fn().mockImplementation(function () {
        return 'provider.url';
      }),
      listMaps: jest.fn().mockResolvedValue([]),
      hasSharingUrl: jest.fn().mockImplementation(function () {
        return true;
      })
    };

    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: mapProvider,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });

    (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(ShareMapUrlModal, DEFAULT_PROPS));
    expect(DEFAULT_PROPS.onExport).toHaveBeenCalled();
  });
  test('calls onExport after provider was updated', function () {
    var _renderWithTheme4 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(ShareMapUrlModal, DEFAULT_PROPS)),
        rerender = _renderWithTheme4.rerender;

    var mapProvider = {
      name: 'test provider',
      icon: jest.fn(),
      getManagementUrl: jest.fn().mockImplementation(function () {
        return 'provider.url';
      }),
      listMaps: jest.fn().mockResolvedValue([]),
      hasSharingUrl: jest.fn().mockImplementation(function () {
        return true;
      })
    };

    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: mapProvider,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });

    (0, _react2.act)(function () {
      rerender( /*#__PURE__*/_react["default"].createElement(_styledComponents.ThemeProvider, {
        theme: _styles.theme
      }, /*#__PURE__*/_react["default"].createElement(_reactIntl.IntlProvider, {
        locale: "en",
        messages: _localization.messages
      }, /*#__PURE__*/_react["default"].createElement(ShareMapUrlModal, DEFAULT_PROPS))));
    });
    expect(DEFAULT_PROPS.onExport).toHaveBeenCalled();
  });
  it('displays share URL when provided', function () {
    var shareUrl = 'http://example.com';

    var _renderWithTheme5 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(ShareMapUrlModal, (0, _extends2["default"])({}, DEFAULT_PROPS, {
      successInfo: {
        shareUrl: shareUrl
      }
    }))),
        getByText = _renderWithTheme5.getByText;

    expect(getByText('Share Url')).toBeInTheDocument();
  });
  it('renders errors', function () {
    var _renderWithTheme6 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(ShareMapUrlModal, (0, _extends2["default"])({}, DEFAULT_PROPS, {
      providerError: new Error('timeout')
    }))),
        getByText = _renderWithTheme6.getByText;

    expect(getByText('modal.statusPanel.error')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,