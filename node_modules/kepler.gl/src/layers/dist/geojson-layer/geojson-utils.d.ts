import { Feature, BBox } from 'geojson';
import { BinaryFeatureCollection } from '@loaders.gl/schema';
import { DataContainerInterface } from '@kepler.gl/utils';
import { GeojsonLayerMetaProps } from '../layer-utils';
export declare type GetFeature = (d: any) => Feature;
export declare type GeojsonDataMaps = Array<Feature | BinaryFeatureCollection | null>;
export declare enum FeatureTypes {
    Point = "Point",
    MultiPoint = "MultiPoint",
    LineString = "LineString",
    MultiLineString = "MultiLineString",
    Polygon = "Polygon",
    MultiPolygon = "MultiPolygon"
}
export declare function parseGeoJsonRawFeature(rawFeature: unknown): Feature | null;
export declare function getGeojsonLayerMeta({ dataContainer, getFeature }: {
    dataContainer: DataContainerInterface;
    getFeature: GetFeature;
}): GeojsonLayerMetaProps;
/**
 * Parse raw data to GeoJson feature
 * @param dataContainer
 * @param getFeature
 * @returns {{}}
 */
export declare function getGeojsonDataMaps(dataContainer: any, getFeature: GetFeature): GeojsonDataMaps;
/**
 * Parse geojson from string
 * @param {String} geoString
 * @returns {null | Object} geojson object or null if failed
 */
export declare function parseGeometryFromString(geoString: string): Feature | null;
export declare function getGeojsonBounds(features?: GeojsonDataMaps): BBox | null;
export declare const featureToDeckGlGeoType: {
    Point: string;
    MultiPoint: string;
    LineString: string;
    MultiLineString: string;
    Polygon: string;
    MultiPolygon: string;
};
export declare type DeckGlGeoTypes = {
    point: boolean;
    line: boolean;
    polygon: boolean;
};
/**
 * Parse geojson from string
 * @param {Array<Object>} allFeatures
 * @returns {Object} mapping of feature type existence
 */
export declare function getGeojsonFeatureTypes(allFeatures: GeojsonDataMaps): DeckGlGeoTypes;
