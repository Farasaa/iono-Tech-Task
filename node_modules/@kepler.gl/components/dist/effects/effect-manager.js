"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactIntl = require("react-intl");

var _actions = require("@kepler.gl/actions");

var _constants = require("@kepler.gl/constants");

var _injector = require("../injector");

var _sidePanelTitle = _interopRequireDefault(require("./side-panel-title"));

var _effectList = _interopRequireDefault(require("./effect-list"));

var _effectTypeSelector = _interopRequireDefault(require("./effect-type-selector"));

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var StyledEffectPanelContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  pointer-events: none !important; /* prevent padding from blocking input */\n  flex-grow: 1;\n  justify-content: space-between;\n  overflow: hidden;\n\n  & > * {\n    /* all children should allow input */\n    pointer-events: all;\n  }\n"]))); // top right position absolute


var StyledEffectPanel = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  top: 0;\n  background-color: ", ";\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  overflow: hidden;\n"])), function (props) {
  return props.theme.sidePanelBg;
});

var StyledEffectPanelHeader = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  padding: ", ";\n  border-bottom: 1px solid ", ";\n  min-width: ", "px;\n"])), function (_ref) {
  var theme = _ref.theme;
  return "".concat(theme.effectPanelPaddingTop, "px ").concat(theme.effectPanelPaddingSide, "px 4px ").concat(theme.effectPanelPaddingSide, "px}");
}, function (props) {
  return props.theme.borderColor;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.effectPanelWidth;
});

var StyledEffectPanelContent = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  ", ";\n  padding: ", ";\n  overflow: overlay;\n  display: flex;\n  flex-direction: column;\n"])), function (props) {
  return props.theme.sidePanelScrollBar;
}, function (props) {
  return props.extended ? '32px' : '10px 0px 10px 0px';
});

EffectManagerFactory.deps = [_effectList["default"], _sidePanelTitle["default"], _effectTypeSelector["default"]];

function EffectManagerFactory(EffectList, SidePanelTitle, EffectTypeSelector) {
  var EffectManager = function EffectManager(props) {
    var intl = props.intl,
        visStateActions = props.visStateActions,
        effects = props.effects,
        effectOrder = props.effectOrder,
        children = props.children;

    var _useState = (0, _react.useState)(false),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        typeSelectorOpened = _useState2[0],
        setTypeSelectorOpened = _useState2[1]; // Prevent shadow effect from being added multiple times


    var effectOptions = (0, _react.useMemo)(function () {
      var hasShadow = effects.some(function (effect) {
        return effect.type === _constants.LIGHT_AND_SHADOW_EFFECT.type;
      });
      return _constants.EFFECT_DESCRIPTIONS.map(function (desc) {
        return _objectSpread(_objectSpread({}, desc), {}, {
          disabled: Boolean(hasShadow && desc.type === _constants.LIGHT_AND_SHADOW_EFFECT.type)
        });
      });
    }, [effects]);
    var onAddEffect = (0, _react.useCallback)(function (type) {
      visStateActions.addEffect({
        type: type
      });
    }, []);
    var onTypeSelectOpen = (0, _react.useCallback)(function () {
      setTypeSelectorOpened(true);
    }, []);
    var onTypeSelectClose = (0, _react.useCallback)(function () {
      setTypeSelectorOpened(false);
    }, []);
    return /*#__PURE__*/_react["default"].createElement(StyledEffectPanelContainer, {
      className: "effect-manager"
    }, /*#__PURE__*/_react["default"].createElement(StyledEffectPanel, null, /*#__PURE__*/_react["default"].createElement(StyledEffectPanelHeader, null, /*#__PURE__*/_react["default"].createElement(SidePanelTitle, {
      className: "effect-manager-title",
      title: intl.formatMessage({
        id: 'effectManager.effects'
      })
    }, /*#__PURE__*/_react["default"].createElement(EffectTypeSelector, {
      options: effectOptions,
      onSelect: onAddEffect,
      onOpen: onTypeSelectOpen,
      onBlur: onTypeSelectClose
    }))), /*#__PURE__*/_react["default"].createElement(StyledEffectPanelContent, {
      extended: typeSelectorOpened && effects.length === 0
    }, /*#__PURE__*/_react["default"].createElement(EffectList, {
      effects: effects,
      effectOrder: effectOrder,
      visStateActions: visStateActions,
      isSortable: true
    }))), children);
  };

  return (0, _injector.withState)([], function (state) {
    var visState = state.demo.keplerGl.map.visState;
    return {
      effects: visState.effects,
      effectOrder: visState.effectOrder
    };
  }, {
    visStateActions: {
      addEffect: _actions.addEffect,
      updateEffect: _actions.updateEffect,
      removeEffect: _actions.removeEffect,
      reorderEffect: _actions.reorderEffect
    }
  })((0, _reactIntl.injectIntl)(EffectManager));
}

var _default = EffectManagerFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,