"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _localization = require("@kepler.gl/localization");

var _utils = require("@kepler.gl/utils");

var _columnSelector = _interopRequireDefault(require("./column-selector"));

var _styledComponents2 = require("../../common/styled-components");

var _templateObject;

var TopRow = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n"])));
/**
 * only provide suggested field pairs if there is a match,
 * otherwise the user can select a suggested field pair that will create invalid columns and a hard crash
 */


function getValidFieldPairsSuggestionsForColumn(enhancedFieldPairs, columnPairs, columnKey) {
  if (enhancedFieldPairs && columnPairs !== null && columnPairs !== void 0 && columnPairs[columnKey]) {
    var columnPair = columnPairs[columnKey];
    var matchingFieldPairs = enhancedFieldPairs.filter(function (_ref) {
      var pair = _ref.pair;
      return (0, _utils.toArray)(columnPair.fieldPairKey).some(function (fieldPairKey) {
        return pair.hasOwnProperty(fieldPairKey);
      });
    });
    return matchingFieldPairs.length > 0 ? matchingFieldPairs : null;
  } else {
    return null;
  }
}

LayerColumnConfigFactory.deps = [_columnSelector["default"]];

function LayerColumnConfigFactory(ColumnSelector) {
  var LayerColumnConfig = function LayerColumnConfig(_ref2) {
    var columnPairs = _ref2.columnPairs,
        fieldPairs = _ref2.fieldPairs,
        columns = _ref2.columns,
        columnLabels = _ref2.columnLabels,
        fields = _ref2.fields,
        updateLayerConfig = _ref2.updateLayerConfig,
        assignColumn = _ref2.assignColumn,
        assignColumnPairs = _ref2.assignColumnPairs;
    var enhancedFieldPairs = (0, _react.useMemo)(function () {
      return columnPairs && fieldPairs ? fieldPairs.map(function (fp) {
        return {
          name: fp.defaultName,
          type: 'point',
          pair: fp.pair
        };
      }) : null;
    }, [columnPairs, fieldPairs]);
    var onUpdateColumn = (0, _react.useCallback)(function (key, value) {
      var assignedColumns = value && value.pair && columnPairs ? assignColumnPairs(key, value.pair) : assignColumn(key, value);
      updateLayerConfig({
        columns: assignedColumns
      });
    }, [updateLayerConfig, columnPairs, assignColumnPairs, assignColumn]);

    if (!Object.keys(columns).length) {
      // don't render if columns is empty
      return /*#__PURE__*/_react["default"].createElement("div", null);
    }

    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: "layer-config__column"
    }, /*#__PURE__*/_react["default"].createElement(TopRow, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'columns.title'
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "layer.required"
    }))), Object.keys(columns).map(function (key) {
      return /*#__PURE__*/_react["default"].createElement(ColumnSelector, {
        column: columns[key],
        columns: columns,
        label: columnLabels && columnLabels[key] || key,
        key: key,
        allFields: fields,
        fieldPairs: getValidFieldPairsSuggestionsForColumn(enhancedFieldPairs, columnPairs, key),
        onSelect: function onSelect(val) {
          return onUpdateColumn(key, val);
        }
      });
    }))));
  };

  return LayerColumnConfig;
}

var _default = LayerColumnConfigFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,