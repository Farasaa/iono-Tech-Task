"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTickFormat = getTickFormat;
exports.getXAxis = getXAxis;
exports.updateAxis = updateAxis;
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Scale = require("d3-scale");

var _d3Selection = require("d3-selection");

var _d3Axis = require("d3-axis");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("@kepler.gl/utils");

var _templateObject;

var MIN_TICK_WIDTH_LARGE = 80;
var MIN_TICK_WIDTH_SMALL = 50;
var HEIGHT = 30;

var TimeSliderContainer = _styledComponents["default"].svg(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  overflow: visible;\n  margin-top: 6px;\n\n  .axis text {\n    font-size: ", ";\n    fill: ", ";\n  }\n\n  .axis line,\n  .axis path {\n    fill: none;\n    stroke: ", ";\n    shape-rendering: crispEdges;\n    stroke-width: 2;\n  }\n\n  .axis .domain {\n    display: none;\n  }\n\n  .value {\n    fill: ", ";\n    font-size: ", ";\n\n    &.start {\n      text-anchor: start;\n    }\n\n    &.end {\n      text-anchor: end;\n    }\n  }\n"])), function (props) {
  return props.theme.axisFontSize;
}, function (props) {
  return props.theme.axisFontColor;
}, function (props) {
  return props.theme.sliderBarBgd;
}, function (props) {
  return props.theme.axisFontColor;
}, function (props) {
  return props.theme.axisFontSize;
});

var TICK_FORMATS = {
  millisecond: '.SSS',
  second: ':ss',
  minute: 'HH:mm',
  hour: 'HH A',
  day: 'ddd DD',
  week: 'MMM DD',
  month: 'MMM',
  year: 'YYYY'
}; // timezone sensitive tick formatter based on moment
// adapted based on d3 time scale tick format https://github.com/d3/d3-scale/blob/master/src/time.js#L59

function getTickFormat(timezone) {
  // date is js date object
  var toMoment = timezone ? function (date) {
    return (0, _momentTimezone["default"])(date).tz(timezone);
  } : _momentTimezone["default"];
  var formatter = (0, _utils.datetimeFormatter)(timezone);
  return function (date) {
    return (toMoment(date).startOf('second') < date ? formatter(TICK_FORMATS.millisecond) : toMoment(date).startOf('minute') < date ? formatter(TICK_FORMATS.second) : toMoment(date).startOf('hour') < date ? formatter(TICK_FORMATS.minute) : toMoment(date).startOf('day') < date ? formatter(TICK_FORMATS.hour) : toMoment(date).startOf('month') < date ? toMoment(date).startOf('isoWeek') < date ? formatter(TICK_FORMATS.day) : formatter(TICK_FORMATS.week) : toMoment(date).startOf('year') < date ? formatter(TICK_FORMATS.month) : formatter(TICK_FORMATS.year))(date);
  };
} // create a helper function so we can test it


function getXAxis(domain, width, isEnlarged, timezone) {
  if (!Array.isArray(domain) || !domain.every(Number.isFinite)) {
    return null;
  }

  var scale = (0, _d3Scale.scaleUtc)().domain(domain).range([0, width]);

  if (!scale) {
    return null;
  }

  var ticks = Math.floor(width / (isEnlarged ? MIN_TICK_WIDTH_LARGE : MIN_TICK_WIDTH_SMALL));
  var tickFormat = timezone ? getTickFormat(timezone) : null;
  var xAxis = (0, _d3Axis.axisBottom)(scale).ticks(ticks).tickSize(0).tickPadding(12);

  if (tickFormat) {
    xAxis.tickFormat(tickFormat);
  }

  return xAxis;
}

function updateAxis(xAxisRef, xAxis) {
  if (!xAxis) {
    return;
  }

  (0, _d3Selection.select)(xAxisRef.current).call(xAxis);
}

function TimeSliderMarkerFactory() {
  var TimeSliderMarker = function TimeSliderMarker(_ref) {
    var width = _ref.width,
        domain = _ref.domain,
        _ref$isEnlarged = _ref.isEnlarged,
        isEnlarged = _ref$isEnlarged === void 0 ? true : _ref$isEnlarged,
        _ref$height = _ref.height,
        height = _ref$height === void 0 ? HEIGHT : _ref$height,
        timezone = _ref.timezone;
    var xAxisRef = (0, _react.useRef)(null);
    var xAxis = (0, _react.useMemo)(function () {
      return getXAxis(domain, width, isEnlarged, timezone);
    }, [domain, width, isEnlarged, timezone]);
    (0, _react.useEffect)(function () {
      updateAxis(xAxisRef, xAxis);
    }, [xAxisRef, xAxis]);
    return /*#__PURE__*/_react["default"].createElement(TimeSliderContainer, {
      className: "time-slider-marker",
      width: width,
      height: height
    }, /*#__PURE__*/_react["default"].createElement("g", {
      className: "x axis",
      ref: xAxisRef,
      transform: "translate(0, 0)"
    }));
  };

  TimeSliderMarker.propTypes = {
    domain: _propTypes["default"].arrayOf(_propTypes["default"].any).isRequired,
    width: _propTypes["default"].number.isRequired
  };
  return /*#__PURE__*/_react["default"].memo(TimeSliderMarker);
}

var _default = TimeSliderMarkerFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vdGltZS1zbGlkZXItbWFya2VyLnRzeCJdLCJuYW1lcyI6WyJNSU5fVElDS19XSURUSF9MQVJHRSIsIk1JTl9USUNLX1dJRFRIX1NNQUxMIiwiSEVJR0hUIiwiVGltZVNsaWRlckNvbnRhaW5lciIsInN0eWxlZCIsInN2ZyIsInByb3BzIiwidGhlbWUiLCJheGlzRm9udFNpemUiLCJheGlzRm9udENvbG9yIiwic2xpZGVyQmFyQmdkIiwiVElDS19GT1JNQVRTIiwibWlsbGlzZWNvbmQiLCJzZWNvbmQiLCJtaW51dGUiLCJob3VyIiwiZGF5Iiwid2VlayIsIm1vbnRoIiwieWVhciIsImdldFRpY2tGb3JtYXQiLCJ0aW1lem9uZSIsInRvTW9tZW50IiwiZGF0ZSIsInR6IiwibW9tZW50IiwiZm9ybWF0dGVyIiwic3RhcnRPZiIsImdldFhBeGlzIiwiZG9tYWluIiwid2lkdGgiLCJpc0VubGFyZ2VkIiwiQXJyYXkiLCJpc0FycmF5IiwiZXZlcnkiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsInNjYWxlIiwicmFuZ2UiLCJ0aWNrcyIsIk1hdGgiLCJmbG9vciIsInRpY2tGb3JtYXQiLCJ4QXhpcyIsInRpY2tTaXplIiwidGlja1BhZGRpbmciLCJ1cGRhdGVBeGlzIiwieEF4aXNSZWYiLCJjdXJyZW50IiwiY2FsbCIsIlRpbWVTbGlkZXJNYXJrZXJGYWN0b3J5IiwiVGltZVNsaWRlck1hcmtlciIsImhlaWdodCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFycmF5T2YiLCJhbnkiLCJpc1JlcXVpcmVkIiwibnVtYmVyIiwiUmVhY3QiLCJtZW1vIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxvQkFBb0IsR0FBRyxFQUE3QjtBQUNBLElBQU1DLG9CQUFvQixHQUFHLEVBQTdCO0FBQ0EsSUFBTUMsTUFBTSxHQUFHLEVBQWY7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QjtBQUFBLFFBRjNCQSxNQUUyQiw0QkFGbEJsRCxNQUVrQjtBQUFBLFFBRDNCbUIsUUFDMkIsUUFEM0JBLFFBQzJCO0FBQzNCLFFBQU0wQixRQUFRLEdBQUcsbUJBQU8sSUFBUCxDQUFqQjtBQUNBLFFBQU1KLEtBQUssR0FBRyxvQkFBUTtBQUFBLGFBQU1mLFFBQVEsQ0FBQ0MsTUFBRCxFQUFTQyxLQUFULEVBQWdCQyxVQUFoQixFQUE0QlYsUUFBNUIsQ0FBZDtBQUFBLEtBQVIsRUFBNkQsQ0FDekVRLE1BRHlFLEVBRXpFQyxLQUZ5RSxFQUd6RUMsVUFIeUUsRUFJekVWLFFBSnlFLENBQTdELENBQWQ7QUFNQSwwQkFBVSxZQUFNO0FBQ2R5QixNQUFBQSxVQUFVLENBQUNDLFFBQUQsRUFBV0osS0FBWCxDQUFWO0FBQ0QsS0FGRCxFQUVHLENBQUNJLFFBQUQsRUFBV0osS0FBWCxDQUZIO0FBR0Esd0JBQ0UsZ0NBQUMsbUJBQUQ7QUFBcUIsTUFBQSxTQUFTLEVBQUMsb0JBQS9CO0FBQW9ELE1BQUEsS0FBSyxFQUFFYixLQUEzRDtBQUFrRSxNQUFBLE1BQU0sRUFBRXNCO0FBQTFFLG9CQUNFO0FBQUcsTUFBQSxTQUFTLEVBQUMsUUFBYjtBQUFzQixNQUFBLEdBQUcsRUFBRUwsUUFBM0I7QUFBcUMsTUFBQSxTQUFTLEVBQUM7QUFBL0MsTUFERixDQURGO0FBS0QsR0F0QkQ7O0FBd0JBSSxFQUFBQSxnQkFBZ0IsQ0FBQ0UsU0FBakIsR0FBNkI7QUFDM0J4QixJQUFBQSxNQUFNLEVBQUV5QixzQkFBVUMsT0FBVixDQUFrQkQsc0JBQVVFLEdBQTVCLEVBQWlDQyxVQURkO0FBRTNCM0IsSUFBQUEsS0FBSyxFQUFFd0Isc0JBQVVJLE1BQVYsQ0FBaUJEO0FBRkcsR0FBN0I7QUFLQSxzQkFBT0Usa0JBQU1DLElBQU4sQ0FBV1QsZ0JBQVgsQ0FBUDtBQUNEOztlQUVjRCx1QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZiwgdXNlRWZmZWN0LCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudC10aW1lem9uZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtOdW1iZXJWYWx1ZSwgc2NhbGVVdGN9IGZyb20gJ2QzLXNjYWxlJztcbmltcG9ydCB7c2VsZWN0fSBmcm9tICdkMy1zZWxlY3Rpb24nO1xuaW1wb3J0IHtheGlzQm90dG9tfSBmcm9tICdkMy1heGlzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtkYXRldGltZUZvcm1hdHRlcn0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5cbmNvbnN0IE1JTl9USUNLX1dJRFRIX0xBUkdFID0gODA7XG5jb25zdCBNSU5fVElDS19XSURUSF9TTUFMTCA9IDUwO1xuY29uc3QgSEVJR0hUID0gMzA7XG5cbmNvbnN0IFRpbWVTbGlkZXJDb250YWluZXIgPSBzdHlsZWQuc3ZnYFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xuICBtYXJnaW4tdG9wOiA2cHg7XG5cbiAgLmF4aXMgdGV4dCB7XG4gICAgZm9udC1zaXplOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmF4aXNGb250U2l6ZX07XG4gICAgZmlsbDogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5heGlzRm9udENvbG9yfTtcbiAgfVxuXG4gIC5heGlzIGxpbmUsXG4gIC5heGlzIHBhdGgge1xuICAgIGZpbGw6IG5vbmU7XG4gICAgc3Ryb2tlOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnNsaWRlckJhckJnZH07XG4gICAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcEVkZ2VzO1xuICAgIHN0cm9rZS13aWR0aDogMjtcbiAgfVxuXG4gIC5heGlzIC5kb21haW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cblxuICAudmFsdWUge1xuICAgIGZpbGw6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuYXhpc0ZvbnRDb2xvcn07XG4gICAgZm9udC1zaXplOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmF4aXNGb250U2l6ZX07XG5cbiAgICAmLnN0YXJ0IHtcbiAgICAgIHRleHQtYW5jaG9yOiBzdGFydDtcbiAgICB9XG5cbiAgICAmLmVuZCB7XG4gICAgICB0ZXh0LWFuY2hvcjogZW5kO1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgVElDS19GT1JNQVRTID0ge1xuICBtaWxsaXNlY29uZDogJy5TU1MnLFxuICBzZWNvbmQ6ICc6c3MnLFxuICBtaW51dGU6ICdISDptbScsXG4gIGhvdXI6ICdISCBBJyxcbiAgZGF5OiAnZGRkIEREJyxcbiAgd2VlazogJ01NTSBERCcsXG4gIG1vbnRoOiAnTU1NJyxcbiAgeWVhcjogJ1lZWVknXG59O1xuXG4vLyB0aW1lem9uZSBzZW5zaXRpdmUgdGljayBmb3JtYXR0ZXIgYmFzZWQgb24gbW9tZW50XG4vLyBhZGFwdGVkIGJhc2VkIG9uIGQzIHRpbWUgc2NhbGUgdGljayBmb3JtYXQgaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLXNjYWxlL2Jsb2IvbWFzdGVyL3NyYy90aW1lLmpzI0w1OVxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpY2tGb3JtYXQodGltZXpvbmU6IHN0cmluZykge1xuICAvLyBkYXRlIGlzIGpzIGRhdGUgb2JqZWN0XG4gIGNvbnN0IHRvTW9tZW50ID0gdGltZXpvbmUgPyBkYXRlID0+IG1vbWVudChkYXRlKS50eih0aW1lem9uZSkgOiBtb21lbnQ7XG4gIGNvbnN0IGZvcm1hdHRlciA9IGRhdGV0aW1lRm9ybWF0dGVyKHRpbWV6b25lKTtcblxuICByZXR1cm4gZGF0ZSA9PlxuICAgICh0b01vbWVudChkYXRlKS5zdGFydE9mKCdzZWNvbmQnKSA8IGRhdGVcbiAgICAgID8gZm9ybWF0dGVyKFRJQ0tfRk9STUFUUy5taWxsaXNlY29uZClcbiAgICAgIDogdG9Nb21lbnQoZGF0ZSkuc3RhcnRPZignbWludXRlJykgPCBkYXRlXG4gICAgICA/IGZvcm1hdHRlcihUSUNLX0ZPUk1BVFMuc2Vjb25kKVxuICAgICAgOiB0b01vbWVudChkYXRlKS5zdGFydE9mKCdob3VyJykgPCBkYXRlXG4gICAgICA/IGZvcm1hdHRlcihUSUNLX0ZPUk1BVFMubWludXRlKVxuICAgICAgOiB0b01vbWVudChkYXRlKS5zdGFydE9mKCdkYXknKSA8IGRhdGVcbiAgICAgID8gZm9ybWF0dGVyKFRJQ0tfRk9STUFUUy5ob3VyKVxuICAgICAgOiB0b01vbWVudChkYXRlKS5zdGFydE9mKCdtb250aCcpIDwgZGF0ZVxuICAgICAgPyB0b01vbWVudChkYXRlKS5zdGFydE9mKCdpc29XZWVrJykgPCBkYXRlXG4gICAgICAgID8gZm9ybWF0dGVyKFRJQ0tfRk9STUFUUy5kYXkpXG4gICAgICAgIDogZm9ybWF0dGVyKFRJQ0tfRk9STUFUUy53ZWVrKVxuICAgICAgOiB0b01vbWVudChkYXRlKS5zdGFydE9mKCd5ZWFyJykgPCBkYXRlXG4gICAgICA/IGZvcm1hdHRlcihUSUNLX0ZPUk1BVFMubW9udGgpXG4gICAgICA6IGZvcm1hdHRlcihUSUNLX0ZPUk1BVFMueWVhcikpKGRhdGUpO1xufVxuXG4vLyBjcmVhdGUgYSBoZWxwZXIgZnVuY3Rpb24gc28gd2UgY2FuIHRlc3QgaXRcbmV4cG9ydCBmdW5jdGlvbiBnZXRYQXhpcyhcbiAgZG9tYWluOiBEYXRlW10gfCBOdW1iZXJWYWx1ZVtdLFxuICB3aWR0aDogbnVtYmVyLFxuICBpc0VubGFyZ2VkOiBib29sZWFuLFxuICB0aW1lem9uZTogc3RyaW5nXG4pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGRvbWFpbikgfHwgIWRvbWFpbi5ldmVyeShOdW1iZXIuaXNGaW5pdGUpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3Qgc2NhbGUgPSBzY2FsZVV0YygpXG4gICAgLmRvbWFpbihkb21haW4pXG4gICAgLnJhbmdlKFswLCB3aWR0aF0pO1xuICBpZiAoIXNjYWxlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCB0aWNrcyA9IE1hdGguZmxvb3Iod2lkdGggLyAoaXNFbmxhcmdlZCA/IE1JTl9USUNLX1dJRFRIX0xBUkdFIDogTUlOX1RJQ0tfV0lEVEhfU01BTEwpKTtcbiAgY29uc3QgdGlja0Zvcm1hdCA9IHRpbWV6b25lID8gZ2V0VGlja0Zvcm1hdCh0aW1lem9uZSkgOiBudWxsO1xuICBjb25zdCB4QXhpcyA9IGF4aXNCb3R0b20oc2NhbGUpXG4gICAgLnRpY2tzKHRpY2tzKVxuICAgIC50aWNrU2l6ZSgwKVxuICAgIC50aWNrUGFkZGluZygxMik7XG4gIGlmICh0aWNrRm9ybWF0KSB7XG4gICAgeEF4aXMudGlja0Zvcm1hdCh0aWNrRm9ybWF0KTtcbiAgfVxuXG4gIHJldHVybiB4QXhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUF4aXMoeEF4aXNSZWYsIHhBeGlzKSB7XG4gIGlmICgheEF4aXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzZWxlY3QoeEF4aXNSZWYuY3VycmVudCkuY2FsbCh4QXhpcyk7XG59XG5cbmludGVyZmFjZSBUaW1lU2xpZGVyTWFya2VyUHJvcHMge1xuICB3aWR0aDogbnVtYmVyO1xuICBkb21haW46IERhdGVbXSB8IE51bWJlclZhbHVlW107XG4gIGlzRW5sYXJnZWQ/OiBib29sZWFuO1xuICBoZWlnaHQ/OiBudW1iZXI7XG4gIHRpbWV6b25lOiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIFRpbWVTbGlkZXJNYXJrZXJGYWN0b3J5KCkge1xuICBjb25zdCBUaW1lU2xpZGVyTWFya2VyID0gKHtcbiAgICB3aWR0aCxcbiAgICBkb21haW4sXG4gICAgaXNFbmxhcmdlZCA9IHRydWUsXG4gICAgaGVpZ2h0ID0gSEVJR0hULFxuICAgIHRpbWV6b25lXG4gIH06IFRpbWVTbGlkZXJNYXJrZXJQcm9wcykgPT4ge1xuICAgIGNvbnN0IHhBeGlzUmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IHhBeGlzID0gdXNlTWVtbygoKSA9PiBnZXRYQXhpcyhkb21haW4sIHdpZHRoLCBpc0VubGFyZ2VkLCB0aW1lem9uZSksIFtcbiAgICAgIGRvbWFpbixcbiAgICAgIHdpZHRoLFxuICAgICAgaXNFbmxhcmdlZCxcbiAgICAgIHRpbWV6b25lXG4gICAgXSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIHVwZGF0ZUF4aXMoeEF4aXNSZWYsIHhBeGlzKTtcbiAgICB9LCBbeEF4aXNSZWYsIHhBeGlzXSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUaW1lU2xpZGVyQ29udGFpbmVyIGNsYXNzTmFtZT1cInRpbWUtc2xpZGVyLW1hcmtlclwiIHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9PlxuICAgICAgICA8ZyBjbGFzc05hbWU9XCJ4IGF4aXNcIiByZWY9e3hBeGlzUmVmfSB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwgMClcIiAvPlxuICAgICAgPC9UaW1lU2xpZGVyQ29udGFpbmVyPlxuICAgICk7XG4gIH07XG5cbiAgVGltZVNsaWRlck1hcmtlci5wcm9wVHlwZXMgPSB7XG4gICAgZG9tYWluOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuYW55KS5pc1JlcXVpcmVkLFxuICAgIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfTtcblxuICByZXR1cm4gUmVhY3QubWVtbyhUaW1lU2xpZGVyTWFya2VyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGltZVNsaWRlck1hcmtlckZhY3Rvcnk7XG4iXX0=