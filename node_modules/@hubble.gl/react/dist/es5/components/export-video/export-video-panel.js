"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _constants = require("./constants");

var _exportVideoPanelSettings = _interopRequireDefault(require("./export-video-panel-settings"));

var _exportVideoPanelPreview = require("./export-video-panel-preview");

var _exportVideoPanelFooter = _interopRequireDefault(require("./export-video-panel-footer"));

var _injectKepler = require("../inject-kepler");

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  width: ", "px;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 0 ", "px;\n  display: grid;\n  grid-template-columns: ", "px ", "px;\n  grid-template-rows: auto;\n  grid-column-gap: ", "px;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  font-size: 20px;\n  font-weight: 400;\n  line-height: ", ";\n  padding: 0 ", "px 16px ", "px;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: flex-end;\n  padding: ", "px ", "px 0 ", "px;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var PanelCloseInner = _styledComponents["default"].div(_templateObject(), _constants.DEFAULT_PADDING, _constants.DEFAULT_PADDING, _constants.DEFAULT_PADDING);

var PanelClose = function PanelClose(_ref) {
  var handleClose = _ref.handleClose;
  return _react["default"].createElement(_injectKepler.WithKeplerUI, null, function (_ref2) {
    var IconButton = _ref2.IconButton,
        Icons = _ref2.Icons;
    return _react["default"].createElement(PanelCloseInner, {
      className: "export-video-panel__close"
    }, _react["default"].createElement(IconButton, {
      className: "export-video-panel__button",
      link: true,
      onClick: handleClose
    }, _react["default"].createElement(Icons.Delete, {
      height: _constants.DEFAULT_ICON_BUTTON_HEIGHT
    })));
  });
};

var StyledTitle = _styledComponents["default"].div(_templateObject2(), function (props) {
  return props.theme.titleTextColor;
}, function (props) {
  return props.theme.lineHeight;
}, _constants.DEFAULT_PADDING, _constants.DEFAULT_PADDING);

var PanelBodyInner = _styledComponents["default"].div(_templateObject3(), _constants.DEFAULT_PADDING, function (props) {
  return props.exportVideoWidth;
}, _constants.DEFAULT_SETTINGS_WIDTH, _constants.DEFAULT_ROW_GAP);

var PanelBody = function PanelBody(_ref3) {
  var exportVideoWidth = _ref3.exportVideoWidth,
      mapData = _ref3.mapData,
      adapter = _ref3.adapter,
      setViewState = _ref3.setViewState,
      setMediaType = _ref3.setMediaType,
      setCameraPreset = _ref3.setCameraPreset,
      setFileName = _ref3.setFileName,
      setResolution = _ref3.setResolution,
      settingsData = _ref3.settingsData,
      durationMs = _ref3.durationMs,
      frameRate = _ref3.frameRate,
      resolution = _ref3.resolution,
      mediaType = _ref3.mediaType,
      viewState = _ref3.viewState,
      setDuration = _ref3.setDuration;
  return _react["default"].createElement(PanelBodyInner, {
    className: "export-video-panel__body",
    exportVideoWidth: exportVideoWidth
  }, _react["default"].createElement(_exportVideoPanelPreview.ExportVideoPanelPreview, {
    mapData: mapData,
    adapter: adapter,
    setViewState: setViewState,
    exportVideoWidth: exportVideoWidth,
    resolution: resolution,
    viewState: viewState
  }), _react["default"].createElement(_exportVideoPanelSettings["default"], {
    setMediaType: setMediaType,
    setCameraPreset: setCameraPreset,
    setFileName: setFileName,
    setResolution: setResolution,
    settingsData: settingsData,
    durationMs: durationMs,
    frameRate: frameRate,
    resolution: resolution,
    mediaType: mediaType,
    setDuration: setDuration
  }));
};

var Panel = _styledComponents["default"].div(_templateObject4(), function (props) {
  return props.exportVideoWidth + 2 * _constants.DEFAULT_PADDING + _constants.DEFAULT_ROW_GAP + _constants.DEFAULT_SETTINGS_WIDTH;
});

var ExportVideoPanel = function ExportVideoPanel(_ref4) {
  var exportVideoWidth = _ref4.exportVideoWidth,
      handleClose = _ref4.handleClose,
      header = _ref4.header,
      mapData = _ref4.mapData,
      setViewState = _ref4.setViewState,
      settingsData = _ref4.settingsData,
      setMediaType = _ref4.setMediaType,
      setCameraPreset = _ref4.setCameraPreset,
      setFileName = _ref4.setFileName,
      setResolution = _ref4.setResolution,
      adapter = _ref4.adapter,
      handlePreviewVideo = _ref4.handlePreviewVideo,
      handleRenderVideo = _ref4.handleRenderVideo,
      durationMs = _ref4.durationMs,
      frameRate = _ref4.frameRate,
      resolution = _ref4.resolution,
      mediaType = _ref4.mediaType,
      viewState = _ref4.viewState,
      setDuration = _ref4.setDuration;
  return _react["default"].createElement(Panel, {
    exportVideoWidth: exportVideoWidth,
    className: "export-video-panel"
  }, header !== false ? _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(PanelClose, {
    handleClose: handleClose
  }), _react["default"].createElement(StyledTitle, {
    className: "export-video-panel__title"
  }, "Export Video")) : null, _react["default"].createElement(PanelBody, {
    exportVideoWidth: exportVideoWidth,
    mapData: mapData,
    adapter: adapter,
    setMediaType: setMediaType,
    setCameraPreset: setCameraPreset,
    setFileName: setFileName,
    setResolution: setResolution,
    settingsData: settingsData,
    setViewState: setViewState,
    durationMs: durationMs,
    frameRate: frameRate,
    resolution: resolution,
    mediaType: mediaType,
    viewState: viewState,
    setDuration: setDuration
  }), _react["default"].createElement(_exportVideoPanelFooter["default"], {
    handleClose: handleClose,
    handlePreviewVideo: handlePreviewVideo,
    handleRenderVideo: handleRenderVideo
  }));
};

var _default = (0, _styledComponents.withTheme)(ExportVideoPanel);

exports["default"] = _default;
//# sourceMappingURL=export-video-panel.js.map