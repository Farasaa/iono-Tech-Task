import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  position: relative;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { Component, createRef } from 'react';
import Modal from 'react-modal';
import styled, { ThemeProvider } from 'styled-components';
import { createSelector } from 'reselect';
import { SIDEPANEL_WIDTH } from './constants';
var ModalContainer = styled.div(_templateObject());

var ExportVideoModal = function (_Component) {
  _inherits(ExportVideoModal, _Component);

  var _super = _createSuper(ExportVideoModal);

  function ExportVideoModal() {
    var _this;

    _classCallCheck(this, ExportVideoModal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "root", createRef());

    _defineProperty(_assertThisInitialized(_this), "settingsPosSelector", createSelector(_this.showSettingsSelector, function (showSettings) {
      var theme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _this$props = _this.props,
          defaultSettingsPos = _this$props.defaultSettingsPos,
          bottomBuffer = _this$props.bottomBuffer,
          settingsHeight = _this$props.settingsHeight;
      if (showSettings === false || !_this.root || !_this.root.current) return defaultSettingsPos;
      var _theme$sidePanelInner = theme.sidePanelInnerPadding,
          sidePanelInnerPadding = _theme$sidePanelInner === void 0 ? 16 : _theme$sidePanelInner,
          _theme$sidePanel = theme.sidePanel,
          sidePanel = _theme$sidePanel === void 0 ? {} : _theme$sidePanel,
          _theme$sidePanelScrol = theme.sidePanelScrollBarWidth,
          sidePanelScrollBarWidth = _theme$sidePanelScrol === void 0 ? 10 : _theme$sidePanelScrol;
      var sidePanelLeft = (sidePanel.margin || {}).left || 20;
      var offsetX = sidePanelInnerPadding + sidePanelLeft + sidePanelScrollBarWidth;

      var bounding = _this.root.current.getBoundingClientRect();

      var x = bounding.x,
          y = bounding.y,
          width = bounding.width;
      var top = y + settingsHeight <= window.innerHeight - bottomBuffer ? y : window.innerHeight - bottomBuffer - settingsHeight;
      return {
        top: "".concat(top, "px"),
        left: "".concat(x + width + offsetX, "px")
      };
    }));

    _defineProperty(_assertThisInitialized(_this), "modalStylesSelector", createSelector(_this.themeSelector, _this.settingsPosSelector, function (theme, settingsPos) {
      return {
        content: {
          top: 'auto',
          left: 'auto',
          right: "calc(50% - ".concat(SIDEPANEL_WIDTH / 2, "px)"),
          bottom: '50%',
          transform: 'translate(50%, 50%)',
          padding: '0px 0px 0px 0px',
          border: 0,
          backgroundColor: theme.sidePanelBg,
          borderRadius: theme.panelBorderRadius || '2px'
        },
        overlay: {
          backgroundColor: 'rgba(0, 0, 0, .5)',
          zIndex: _this.props.theme && _this.props.theme.modalOverLayZ || 1000
        }
      };
    }));

    return _this;
  }

  _createClass(ExportVideoModal, [{
    key: "showSettingsSelector",
    value: function showSettingsSelector(props) {
      return props.showSettings;
    }
  }, {
    key: "themeSelector",
    value: function themeSelector(props) {
      return props.theme;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          isOpen = _this$props2.isOpen,
          theme = _this$props2.theme,
          children = _this$props2.children;
      var modalStyles = this.modalStylesSelector(this.props);
      return React.createElement(ThemeProvider, {
        theme: theme
      }, React.createElement(ModalContainer, {
        className: "export-video-modal",
        ref: this.root
      }, this.root.current ? React.createElement(Modal, {
        isOpen: isOpen,
        style: modalStyles,
        ariaHideApp: false,
        parentSelector: function parentSelector() {
          return _this2.root.current || {
            removeChild: function removeChild() {},
            appendChild: function appendChild() {}
          };
        }
      }, children) : null));
    }
  }]);

  return ExportVideoModal;
}(Component);

_defineProperty(ExportVideoModal, "defaultProps", {
  defaultSettingsPos: {
    top: '320px',
    left: '320px'
  },
  bottomBuffer: 212
});

export default ExportVideoModal;
//# sourceMappingURL=export-video-modal.js.map