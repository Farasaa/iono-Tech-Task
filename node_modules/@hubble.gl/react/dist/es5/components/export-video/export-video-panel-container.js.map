{"version":3,"sources":["../../../../src/components/export-video/export-video-panel-container.js"],"names":["ENCODERS","gif","GifEncoder","webm","WebMEncoder","jpeg","JPEGSequenceEncoder","png","PNGSequenceEncoder","ExportVideoPanelContainer","props","setMediaType","bind","setCameraPreset","setFileName","setResolution","setViewState","getCameraKeyframes","getDeckScene","onPreviewVideo","onRenderVideo","setDuration","initialState","mapState","mapData","glContext","state","mediaType","cameraPreset","fileName","resolution","durationMs","viewState","adapter","DeckAdapter","DEFAULT_FILENAME","getFileName","getCanvasSize","width","height","framerate","quality","sampleInterval","filename","prevCamera","undefined","longitude","latitude","zoom","pitch","bearing","CameraKeyframes","timings","keyframes","easings","easing","easeInOut","animationLoop","camera","currentCamera","timeline","attachAnimation","DeckScene","lengthMs","update","onSettingsChange","setState","setStateAndNotify","vs","encoderSettings","getEncoderSettings","onStop","forceUpdate","render","PreviewEncoder","Encoder","getEncoder","scene","exportVideoWidth","handleClose","header","settingsData","Component","defaultProps"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {Component} from 'react';\nimport {easing} from 'popmotion';\nimport {\n  DeckAdapter,\n  DeckScene,\n  CameraKeyframes,\n  WebMEncoder,\n  JPEGSequenceEncoder,\n  PNGSequenceEncoder,\n  PreviewEncoder,\n  GifEncoder\n} from '@hubble.gl/core';\n\nimport ExportVideoPanel from './export-video-panel';\nimport {parseSetCameraType} from './utils';\nimport {DEFAULT_FILENAME, getResolutionSetting} from './constants';\n\n// import {DEFAULT_TIME_FORMAT} from 'kepler.gl';\n// import moment from 'moment';\n\n// function setFileNameDeckAdapter(name) {\n//   encoderSettings.filename = `${name} ${moment()\n//     .format(DEFAULT_TIME_FORMAT)\n//     .toString()}`;\n// }\n\nconst ENCODERS = {\n  gif: GifEncoder,\n  webm: WebMEncoder,\n  jpeg: JPEGSequenceEncoder,\n  png: PNGSequenceEncoder\n};\n\nexport class ExportVideoPanelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setMediaType = this.setMediaType.bind(this);\n    this.setCameraPreset = this.setCameraPreset.bind(this);\n    this.setFileName = this.setFileName.bind(this);\n    this.setResolution = this.setResolution.bind(this);\n    this.setViewState = this.setViewState.bind(this);\n    this.getCameraKeyframes = this.getCameraKeyframes.bind(this);\n    this.getDeckScene = this.getDeckScene.bind(this);\n    this.onPreviewVideo = this.onPreviewVideo.bind(this);\n    this.onRenderVideo = this.onRenderVideo.bind(this);\n    this.setDuration = this.setDuration.bind(this);\n    this.setViewState = this.setViewState.bind(this);\n\n    const {\n      initialState,\n      mapData: {mapState},\n      glContext\n    } = props;\n\n    this.state = {\n      mediaType: 'gif',\n      cameraPreset: 'Orbit (90º)',\n      fileName: '',\n      resolution: '1280x720',\n      durationMs: 1000, // TODO change to 5000 later. 1000 for dev testing\n      viewState: mapState,\n      adapter: new DeckAdapter(this.getDeckScene, glContext),\n      ...(initialState || {})\n    };\n  }\n\n  getFileName() {\n    const {fileName} = this.state;\n    if (fileName === '') return DEFAULT_FILENAME;\n    return fileName;\n  }\n\n  getCanvasSize() {\n    const {resolution} = this.state;\n    return getResolutionSetting(resolution);\n  }\n\n  getEncoderSettings() {\n    const fileName = this.getFileName();\n    const {width, height} = this.getCanvasSize();\n\n    return {\n      framerate: 30,\n      webm: {\n        quality: 0.8\n      },\n      jpeg: {\n        quality: 0.8\n      },\n      gif: {\n        sampleInterval: 1000,\n        width,\n        height\n      },\n      filename: fileName\n    };\n  }\n\n  getEncoder() {\n    const {mediaType} = this.state;\n    return ENCODERS[mediaType];\n  }\n\n  getCameraKeyframes(prevCamera = undefined) {\n    const {viewState, cameraPreset, durationMs} = this.state;\n    const {longitude, latitude, zoom, pitch, bearing} = viewState;\n\n    return new CameraKeyframes({\n      timings: [0, durationMs],\n      keyframes: [\n        {\n          longitude,\n          latitude,\n          zoom,\n          pitch,\n          bearing\n        },\n        parseSetCameraType(cameraPreset, viewState)\n      ],\n      easings: [easing.easeInOut]\n    });\n  }\n\n  getDeckScene(animationLoop) {\n    // PSEUDO BRAINSTORM\n    // only runs once and permanently sets things like canvas resolution + duration\n    const {durationMs} = this.state;\n    const {width, height} = this.getCanvasSize();\n\n    const keyframes = {\n      camera: this.getCameraKeyframes()\n    };\n    const currentCamera = animationLoop.timeline.attachAnimation(keyframes.camera);\n\n    // TODO this scales canvas resolution but is only set once. Figure out how to update\n    // TODO this needs to update durationMs\n    return new DeckScene({\n      animationLoop,\n      keyframes,\n      lengthMs: durationMs,\n      width,\n      height,\n      currentCamera\n    });\n  }\n\n  setStateAndNotify(update) {\n    const {\n      props: {onSettingsChange},\n      state\n    } = this;\n    this.setState({...state, ...update});\n\n    if (onSettingsChange) {\n      const {mediaType, cameraPreset, fileName, resolution, durationMs} = state;\n      onSettingsChange({\n        mediaType,\n        cameraPreset,\n        fileName,\n        resolution,\n        durationMs,\n        ...update\n      });\n    }\n  }\n\n  setMediaType(mediaType) {\n    this.setStateAndNotify({mediaType});\n  }\n\n  setCameraPreset(cameraPreset) {\n    this.setStateAndNotify({cameraPreset});\n  }\n\n  setFileName(fileName) {\n    this.setStateAndNotify({fileName});\n  }\n\n  setResolution(resolution) {\n    this.setStateAndNotify({resolution});\n  }\n\n  setViewState(vs) {\n    this.setState({viewState: vs.viewState});\n  }\n\n  onPreviewVideo() {\n    const {adapter} = this.state;\n    const encoderSettings = this.getEncoderSettings();\n    const onStop = () => {\n      this.forceUpdate();\n    };\n    adapter.render(PreviewEncoder, encoderSettings, onStop, this.getCameraKeyframes);\n  }\n\n  onRenderVideo() {\n    const {adapter} = this.state;\n    const Encoder = this.getEncoder();\n    const encoderSettings = this.getEncoderSettings();\n    const onStop = () => {};\n\n    adapter.render(Encoder, encoderSettings, onStop, this.getCameraKeyframes);\n  }\n\n  setDuration(durationMs) {\n    const {adapter} = this.state;\n    adapter.scene.lengthMs = durationMs;\n    // function passed down to Slider class in ExportVideoPanelSettings\n    this.setStateAndNotify({durationMs});\n  }\n\n  render() {\n    const {exportVideoWidth, handleClose, mapData, header} = this.props;\n    const {\n      adapter,\n      durationMs,\n      mediaType,\n      cameraPreset,\n      fileName,\n      resolution,\n      viewState\n    } = this.state;\n\n    const settingsData = {mediaType, cameraPreset, fileName, resolution};\n\n    const encoderSettings = this.getEncoderSettings();\n    const {width, height} = this.getCanvasSize();\n\n    return (\n      <ExportVideoPanel\n        // UI Props\n        exportVideoWidth={exportVideoWidth}\n        handleClose={handleClose}\n        header={header}\n        // Map Props\n        mapData={mapData}\n        viewState={viewState}\n        setViewState={this.setViewState}\n        // Settings Props\n        settingsData={settingsData}\n        setMediaType={this.setMediaType}\n        setCameraPreset={this.setCameraPreset}\n        setFileName={this.setFileName}\n        setResolution={this.setResolution}\n        // Hubble Props\n        adapter={adapter}\n        handlePreviewVideo={this.onPreviewVideo}\n        handleRenderVideo={this.onRenderVideo}\n        durationMs={durationMs}\n        setDuration={this.setDuration}\n        frameRate={encoderSettings.framerate}\n        resolution={[width, height]}\n        mediaType={mediaType}\n      />\n    );\n  }\n}\n\nExportVideoPanelContainer.defaultProps = {\n  exportVideoWidth: 540,\n  header: true,\n  glContext: undefined\n};\n"],"file":"export-video-panel-container.js"}