"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNewDatasetColor = getNewDatasetColor;
exports.createNewDataEntry = createNewDataEntry;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _lodash = _interopRequireDefault(require("lodash.uniq"));

var _keplerTable2 = _interopRequireDefault(require("./kepler-table"));

var _utils = require("@kepler.gl/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// apply a color for each dataset
// to use as label colors
var datasetColors = ['#8F2FBF', '#005CFF', '#C06C84', '#F8B195', '#547A82', '#3EACA8', '#A2D4AB'].map(_utils.hexToRgb);
/** @type {typeof import('./dataset-utils').getNewDatasetColor} */

function getNewDatasetColor(datasets) {
  var presetColors = datasetColors.map(String);
  var usedColors = (0, _lodash["default"])(Object.values(datasets).map(function (d) {
    return String(d.color);
  })).filter(function (c) {
    return presetColors.includes(c);
  });

  if (usedColors.length === presetColors.length) {
    // if we already depleted the pool of color
    return _utils.datasetColorMaker.next().value;
  }

  var color = _utils.datasetColorMaker.next().value;

  while (usedColors.includes(String(color))) {
    color = _utils.datasetColorMaker.next().value;
  }

  return color;
}
/**
 * Take datasets payload from addDataToMap, create datasets entry save to visState
 */


function createNewDataEntry(_ref) {
  var info = _ref.info,
      data = _ref.data,
      opts = (0, _objectWithoutProperties2["default"])(_ref, ["info", "data"]);
  var datasets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var validatedData = (0, _utils.validateInputData)(data);

  if (!validatedData) {
    return {};
  } // check if dataset already exists, and update it when loading data by batches incrementally


  if (info && info.id && datasets[info.id]) {
    // get keplerTable from datasets
    var _keplerTable = datasets[info.id]; // update the data in keplerTable

    _keplerTable.update(validatedData);

    return (0, _defineProperty2["default"])({}, _keplerTable.id, _keplerTable);
  }

  info = info || {};
  var color = info.color || getNewDatasetColor(datasets);
  var keplerTable = new _keplerTable2["default"](_objectSpread({
    info: info,
    data: validatedData,
    color: color
  }, opts));
  return (0, _defineProperty2["default"])({}, keplerTable.id, keplerTable);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhc2V0LXV0aWxzLnRzIl0sIm5hbWVzIjpbImRhdGFzZXRDb2xvcnMiLCJtYXAiLCJoZXhUb1JnYiIsImdldE5ld0RhdGFzZXRDb2xvciIsImRhdGFzZXRzIiwicHJlc2V0Q29sb3JzIiwiU3RyaW5nIiwidXNlZENvbG9ycyIsIk9iamVjdCIsInZhbHVlcyIsImQiLCJjb2xvciIsImZpbHRlciIsImMiLCJpbmNsdWRlcyIsImxlbmd0aCIsImRhdGFzZXRDb2xvck1ha2VyIiwibmV4dCIsInZhbHVlIiwiY3JlYXRlTmV3RGF0YUVudHJ5IiwiaW5mbyIsImRhdGEiLCJvcHRzIiwidmFsaWRhdGVkRGF0YSIsImlkIiwia2VwbGVyVGFibGUiLCJ1cGRhdGUiLCJLZXBsZXJUYWJsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFHQTs7Ozs7O0FBRUE7QUFDQTtBQUNBLElBQU1BLGFBQWEsR0FBRyxDQUNwQixTQURvQixFQUVwQixTQUZvQixFQUdwQixTQUhvQixFQUlwQixTQUpvQixFQUtwQixTQUxvQixFQU1wQixTQU5vQixFQU9wQixTQVBvQixFQVFwQkMsR0FSb0IsQ0FRaEJDLGVBUmdCLENBQXRCO0FBVUE7O0FBQ08sU0FBU0Msa0JBQVQsQ0FBNEJDLFFBQTVCLEVBQTBEO0FBQy9ELE1BQU1DLFlBQVksR0FBR0wsYUFBYSxDQUFDQyxHQUFkLENBQWtCSyxNQUFsQixDQUFyQjtBQUNBLE1BQU1DLFVBQVUsR0FBRyx3QkFBS0MsTUFBTSxDQUFDQyxNQUFQLENBQWNMLFFBQWQsRUFBd0JILEdBQXhCLENBQTRCLFVBQUFTLENBQUM7QUFBQSxXQUFJSixNQUFNLENBQUNJLENBQUMsQ0FBQ0MsS0FBSCxDQUFWO0FBQUEsR0FBN0IsQ0FBTCxFQUF3REMsTUFBeEQsQ0FBK0QsVUFBQUMsQ0FBQztBQUFBLFdBQ2pGUixZQUFZLENBQUNTLFFBQWIsQ0FBc0JELENBQXRCLENBRGlGO0FBQUEsR0FBaEUsQ0FBbkI7O0FBSUEsTUFBSU4sVUFBVSxDQUFDUSxNQUFYLEtBQXNCVixZQUFZLENBQUNVLE1BQXZDLEVBQStDO0FBQzdDO0FBQ0EsV0FBT0MseUJBQWtCQyxJQUFsQixHQUF5QkMsS0FBaEM7QUFDRDs7QUFFRCxNQUFJUCxLQUFLLEdBQUdLLHlCQUFrQkMsSUFBbEIsR0FBeUJDLEtBQXJDOztBQUNBLFNBQU9YLFVBQVUsQ0FBQ08sUUFBWCxDQUFvQlIsTUFBTSxDQUFDSyxLQUFELENBQTFCLENBQVAsRUFBMkM7QUFDekNBLElBQUFBLEtBQUssR0FBR0sseUJBQWtCQyxJQUFsQixHQUF5QkMsS0FBakM7QUFDRDs7QUFFRCxTQUFPUCxLQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7OztBQUNPLFNBQVNRLGtCQUFULE9BR0s7QUFBQSxNQUZUQyxJQUVTLFFBRlRBLElBRVM7QUFBQSxNQUZIQyxJQUVHLFFBRkhBLElBRUc7QUFBQSxNQUZNQyxJQUVOO0FBQUEsTUFEVmxCLFFBQ1UsdUVBRFcsRUFDWDtBQUNWLE1BQU1tQixhQUFhLEdBQUcsOEJBQWtCRixJQUFsQixDQUF0Qjs7QUFDQSxNQUFJLENBQUNFLGFBQUwsRUFBb0I7QUFDbEIsV0FBTyxFQUFQO0FBQ0QsR0FKUyxDQU1WOzs7QUFDQSxNQUFJSCxJQUFJLElBQUlBLElBQUksQ0FBQ0ksRUFBYixJQUFtQnBCLFFBQVEsQ0FBQ2dCLElBQUksQ0FBQ0ksRUFBTixDQUEvQixFQUEwQztBQUN4QztBQUNBLFFBQU1DLFlBQVcsR0FBR3JCLFFBQVEsQ0FBQ2dCLElBQUksQ0FBQ0ksRUFBTixDQUE1QixDQUZ3QyxDQUd4Qzs7QUFDQUMsSUFBQUEsWUFBVyxDQUFDQyxNQUFaLENBQW1CSCxhQUFuQjs7QUFDQSxnREFDR0UsWUFBVyxDQUFDRCxFQURmLEVBQ29CQyxZQURwQjtBQUdEOztBQUVETCxFQUFBQSxJQUFJLEdBQUdBLElBQUksSUFBSSxFQUFmO0FBQ0EsTUFBTVQsS0FBSyxHQUFHUyxJQUFJLENBQUNULEtBQUwsSUFBY1Isa0JBQWtCLENBQUNDLFFBQUQsQ0FBOUM7QUFFQSxNQUFNcUIsV0FBVyxHQUFHLElBQUlFLHdCQUFKO0FBQWlCUCxJQUFBQSxJQUFJLEVBQUpBLElBQWpCO0FBQXVCQyxJQUFBQSxJQUFJLEVBQUVFLGFBQTdCO0FBQTRDWixJQUFBQSxLQUFLLEVBQUxBO0FBQTVDLEtBQXNEVyxJQUF0RCxFQUFwQjtBQUNBLDhDQUNHRyxXQUFXLENBQUNELEVBRGYsRUFDb0JDLFdBRHBCO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgdW5pcSBmcm9tICdsb2Rhc2gudW5pcSc7XG5pbXBvcnQgS2VwbGVyVGFibGUsIHtEYXRhc2V0c30gZnJvbSAnLi9rZXBsZXItdGFibGUnO1xuaW1wb3J0IHtQcm90b0RhdGFzZXQsIFJHQkNvbG9yfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuaW1wb3J0IHtoZXhUb1JnYiwgdmFsaWRhdGVJbnB1dERhdGEsIGRhdGFzZXRDb2xvck1ha2VyfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcblxuLy8gYXBwbHkgYSBjb2xvciBmb3IgZWFjaCBkYXRhc2V0XG4vLyB0byB1c2UgYXMgbGFiZWwgY29sb3JzXG5jb25zdCBkYXRhc2V0Q29sb3JzID0gW1xuICAnIzhGMkZCRicsXG4gICcjMDA1Q0ZGJyxcbiAgJyNDMDZDODQnLFxuICAnI0Y4QjE5NScsXG4gICcjNTQ3QTgyJyxcbiAgJyMzRUFDQTgnLFxuICAnI0EyRDRBQidcbl0ubWFwKGhleFRvUmdiKTtcblxuLyoqIEB0eXBlIHt0eXBlb2YgaW1wb3J0KCcuL2RhdGFzZXQtdXRpbHMnKS5nZXROZXdEYXRhc2V0Q29sb3J9ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV3RGF0YXNldENvbG9yKGRhdGFzZXRzOiBEYXRhc2V0cyk6IFJHQkNvbG9yIHtcbiAgY29uc3QgcHJlc2V0Q29sb3JzID0gZGF0YXNldENvbG9ycy5tYXAoU3RyaW5nKTtcbiAgY29uc3QgdXNlZENvbG9ycyA9IHVuaXEoT2JqZWN0LnZhbHVlcyhkYXRhc2V0cykubWFwKGQgPT4gU3RyaW5nKGQuY29sb3IpKSkuZmlsdGVyKGMgPT5cbiAgICBwcmVzZXRDb2xvcnMuaW5jbHVkZXMoYylcbiAgKTtcblxuICBpZiAodXNlZENvbG9ycy5sZW5ndGggPT09IHByZXNldENvbG9ycy5sZW5ndGgpIHtcbiAgICAvLyBpZiB3ZSBhbHJlYWR5IGRlcGxldGVkIHRoZSBwb29sIG9mIGNvbG9yXG4gICAgcmV0dXJuIGRhdGFzZXRDb2xvck1ha2VyLm5leHQoKS52YWx1ZTtcbiAgfVxuXG4gIGxldCBjb2xvciA9IGRhdGFzZXRDb2xvck1ha2VyLm5leHQoKS52YWx1ZTtcbiAgd2hpbGUgKHVzZWRDb2xvcnMuaW5jbHVkZXMoU3RyaW5nKGNvbG9yKSkpIHtcbiAgICBjb2xvciA9IGRhdGFzZXRDb2xvck1ha2VyLm5leHQoKS52YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBjb2xvcjtcbn1cblxuLyoqXG4gKiBUYWtlIGRhdGFzZXRzIHBheWxvYWQgZnJvbSBhZGREYXRhVG9NYXAsIGNyZWF0ZSBkYXRhc2V0cyBlbnRyeSBzYXZlIHRvIHZpc1N0YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXdEYXRhRW50cnkoXG4gIHtpbmZvLCBkYXRhLCAuLi5vcHRzfTogUHJvdG9EYXRhc2V0LFxuICBkYXRhc2V0czogRGF0YXNldHMgPSB7fVxuKTogRGF0YXNldHMge1xuICBjb25zdCB2YWxpZGF0ZWREYXRhID0gdmFsaWRhdGVJbnB1dERhdGEoZGF0YSk7XG4gIGlmICghdmFsaWRhdGVkRGF0YSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIGRhdGFzZXQgYWxyZWFkeSBleGlzdHMsIGFuZCB1cGRhdGUgaXQgd2hlbiBsb2FkaW5nIGRhdGEgYnkgYmF0Y2hlcyBpbmNyZW1lbnRhbGx5XG4gIGlmIChpbmZvICYmIGluZm8uaWQgJiYgZGF0YXNldHNbaW5mby5pZF0pIHtcbiAgICAvLyBnZXQga2VwbGVyVGFibGUgZnJvbSBkYXRhc2V0c1xuICAgIGNvbnN0IGtlcGxlclRhYmxlID0gZGF0YXNldHNbaW5mby5pZF07XG4gICAgLy8gdXBkYXRlIHRoZSBkYXRhIGluIGtlcGxlclRhYmxlXG4gICAga2VwbGVyVGFibGUudXBkYXRlKHZhbGlkYXRlZERhdGEpO1xuICAgIHJldHVybiB7XG4gICAgICBba2VwbGVyVGFibGUuaWRdOiBrZXBsZXJUYWJsZVxuICAgIH07XG4gIH1cblxuICBpbmZvID0gaW5mbyB8fCB7fTtcbiAgY29uc3QgY29sb3IgPSBpbmZvLmNvbG9yIHx8IGdldE5ld0RhdGFzZXRDb2xvcihkYXRhc2V0cyk7XG5cbiAgY29uc3Qga2VwbGVyVGFibGUgPSBuZXcgS2VwbGVyVGFibGUoe2luZm8sIGRhdGE6IHZhbGlkYXRlZERhdGEsIGNvbG9yLCAuLi5vcHRzfSk7XG4gIHJldHVybiB7XG4gICAgW2tlcGxlclRhYmxlLmlkXToga2VwbGVyVGFibGVcbiAgfTtcbn1cbiJdfQ==