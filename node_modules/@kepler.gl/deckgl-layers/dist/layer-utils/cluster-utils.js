"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGeoJSON = getGeoJSON;
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _supercluster = _interopRequireDefault(require("supercluster"));

var _lodash = _interopRequireDefault(require("lodash.memoize"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function getGeoJSON(data, getPosition, filterData) {
  var raw = typeof filterData === 'function' ? data.filter(filterData) : data;
  return raw.map(function (d) {
    return {
      type: 'Point',
      properties: {
        data: d,
        points: [d],
        point_count: 1,
        point_count_abbreviated: '1'
      },
      geometry: {
        coordinates: getPosition(d)
      }
    };
  }).filter(function (d) {
    return d.geometry.coordinates.every(Number.isFinite);
  });
}

var clusterResolver = function clusterResolver(_ref) {
  var clusterRadius = _ref.clusterRadius;
  return "".concat(clusterRadius);
};

var getClusterer = function getClusterer(_ref2) {
  var clusterRadius = _ref2.clusterRadius,
      geoJSON = _ref2.geoJSON;
  return new _supercluster["default"]({
    maxZoom: 20,
    radius: clusterRadius,
    reduce: function reduce(accumulated, props) {
      accumulated.points = [].concat((0, _toConsumableArray2["default"])(accumulated.points), (0, _toConsumableArray2["default"])(props.points));
    },
    map: function map(props) {
      return {
        points: [props.data]
      };
    }
  }).load(geoJSON);
};

var ClusterBuilder = /*#__PURE__*/function () {
  function ClusterBuilder() {
    (0, _classCallCheck2["default"])(this, ClusterBuilder);
    (0, _defineProperty2["default"])(this, "clusterer", void 0);
    this.clusterer = (0, _lodash["default"])(getClusterer, clusterResolver);
  }

  (0, _createClass2["default"])(ClusterBuilder, [{
    key: "clustersAtZoom",
    value: function clustersAtZoom(_ref3) {
      var bbox = _ref3.bbox,
          clusterRadius = _ref3.clusterRadius,
          geoJSON = _ref3.geoJSON,
          zoom = _ref3.zoom;
      var clusterer = this.clusterer({
        clusterRadius: clusterRadius,
        geoJSON: geoJSON
      }); // map clusters to formatted bins to be passed to deck.gl bin-sorter

      var clusters = clusterer.getClusters(bbox, zoom).map(function (c, i) {
        return {
          points: c.properties.points,
          position: c.geometry.coordinates,
          index: i
        };
      });
      return clusters;
    }
  }, {
    key: "clearClustererCache",
    value: function clearClustererCache() {
      var _this$clusterer$cache, _this$clusterer$cache2;

      (_this$clusterer$cache = (_this$clusterer$cache2 = this.clusterer.cache).clear) === null || _this$clusterer$cache === void 0 ? void 0 : _this$clusterer$cache.call(_this$clusterer$cache2);
    }
  }]);
  return ClusterBuilder;
}();

exports["default"] = ClusterBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYXllci11dGlscy9jbHVzdGVyLXV0aWxzLnRzIl0sIm5hbWVzIjpbImdldEdlb0pTT04iLCJkYXRhIiwiZ2V0UG9zaXRpb24iLCJmaWx0ZXJEYXRhIiwicmF3IiwiZmlsdGVyIiwibWFwIiwiZCIsInR5cGUiLCJwcm9wZXJ0aWVzIiwicG9pbnRzIiwicG9pbnRfY291bnQiLCJwb2ludF9jb3VudF9hYmJyZXZpYXRlZCIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJldmVyeSIsIk51bWJlciIsImlzRmluaXRlIiwiY2x1c3RlclJlc29sdmVyIiwiY2x1c3RlclJhZGl1cyIsImdldENsdXN0ZXJlciIsImdlb0pTT04iLCJTdXBlcmNsdXN0ZXIiLCJtYXhab29tIiwicmFkaXVzIiwicmVkdWNlIiwiYWNjdW11bGF0ZWQiLCJwcm9wcyIsImxvYWQiLCJDbHVzdGVyQnVpbGRlciIsImNsdXN0ZXJlciIsImJib3giLCJ6b29tIiwiY2x1c3RlcnMiLCJnZXRDbHVzdGVycyIsImMiLCJpIiwicG9zaXRpb24iLCJpbmRleCIsImNhY2hlIiwiY2xlYXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUpBO0FBQ0E7QUFPTyxTQUFTQSxVQUFULENBQW9CQyxJQUFwQixFQUEwQkMsV0FBMUIsRUFBdUNDLFVBQXZDLEVBQW1EO0FBQ3hELE1BQU1DLEdBQUcsR0FBRyxPQUFPRCxVQUFQLEtBQXNCLFVBQXRCLEdBQW1DRixJQUFJLENBQUNJLE1BQUwsQ0FBWUYsVUFBWixDQUFuQyxHQUE2REYsSUFBekU7QUFFQSxTQUFPRyxHQUFHLENBQ1BFLEdBREksQ0FDQSxVQUFBQyxDQUFDO0FBQUEsV0FBSztBQUNUQyxNQUFBQSxJQUFJLEVBQUUsT0FERztBQUVUQyxNQUFBQSxVQUFVLEVBQUU7QUFDVlIsUUFBQUEsSUFBSSxFQUFFTSxDQURJO0FBRVZHLFFBQUFBLE1BQU0sRUFBRSxDQUFDSCxDQUFELENBRkU7QUFHVkksUUFBQUEsV0FBVyxFQUFFLENBSEg7QUFJVkMsUUFBQUEsdUJBQXVCLEVBQUU7QUFKZixPQUZIO0FBUVRDLE1BQUFBLFFBQVEsRUFBRTtBQUNSQyxRQUFBQSxXQUFXLEVBQUVaLFdBQVcsQ0FBQ0ssQ0FBRDtBQURoQjtBQVJELEtBQUw7QUFBQSxHQURELEVBYUpGLE1BYkksQ0FhRyxVQUFBRSxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDTSxRQUFGLENBQVdDLFdBQVgsQ0FBdUJDLEtBQXZCLENBQTZCQyxNQUFNLENBQUNDLFFBQXBDLENBQUo7QUFBQSxHQWJKLENBQVA7QUFjRDs7QUFFRCxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCO0FBQUEsTUFBRUMsYUFBRixRQUFFQSxhQUFGO0FBQUEsbUJBQWlEQSxhQUFqRDtBQUFBLENBQXhCOztBQUVBLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlO0FBQUEsTUFBRUQsYUFBRixTQUFFQSxhQUFGO0FBQUEsTUFBaUJFLE9BQWpCLFNBQWlCQSxPQUFqQjtBQUFBLFNBQ25CLElBQUlDLHdCQUFKLENBQWlCO0FBQ2ZDLElBQUFBLE9BQU8sRUFBRSxFQURNO0FBRWZDLElBQUFBLE1BQU0sRUFBRUwsYUFGTztBQUdmTSxJQUFBQSxNQUFNLEVBQUUsZ0JBQUNDLFdBQUQsRUFBY0MsS0FBZCxFQUF3QjtBQUM5QkQsTUFBQUEsV0FBVyxDQUFDaEIsTUFBWixpREFBeUJnQixXQUFXLENBQUNoQixNQUFyQyx1Q0FBZ0RpQixLQUFLLENBQUNqQixNQUF0RDtBQUNELEtBTGM7QUFNZkosSUFBQUEsR0FBRyxFQUFFLGFBQUFxQixLQUFLO0FBQUEsYUFBSztBQUFDakIsUUFBQUEsTUFBTSxFQUFFLENBQUNpQixLQUFLLENBQUMxQixJQUFQO0FBQVQsT0FBTDtBQUFBO0FBTkssR0FBakIsRUFPRzJCLElBUEgsQ0FPUVAsT0FQUixDQURtQjtBQUFBLENBQXJCOztJQVVxQlEsYztBQUluQiw0QkFBYztBQUFBO0FBQUE7QUFDWixTQUFLQyxTQUFMLEdBQWlCLHdCQUFRVixZQUFSLEVBQXNCRixlQUF0QixDQUFqQjtBQUNEOzs7O1dBRUQsK0JBY0k7QUFBQSxVQWJGYSxJQWFFLFNBYkZBLElBYUU7QUFBQSxVQVpGWixhQVlFLFNBWkZBLGFBWUU7QUFBQSxVQVhGRSxPQVdFLFNBWEZBLE9BV0U7QUFBQSxVQVZGVyxJQVVFLFNBVkZBLElBVUU7QUFDRixVQUFNRixTQUFTLEdBQUcsS0FBS0EsU0FBTCxDQUFlO0FBQUNYLFFBQUFBLGFBQWEsRUFBYkEsYUFBRDtBQUFnQkUsUUFBQUEsT0FBTyxFQUFQQTtBQUFoQixPQUFmLENBQWxCLENBREUsQ0FHRjs7QUFDQSxVQUFNWSxRQUFRLEdBQUdILFNBQVMsQ0FBQ0ksV0FBVixDQUFzQkgsSUFBdEIsRUFBNEJDLElBQTVCLEVBQWtDMUIsR0FBbEMsQ0FBc0MsVUFBQzZCLENBQUQsRUFBSUMsQ0FBSjtBQUFBLGVBQVc7QUFDaEUxQixVQUFBQSxNQUFNLEVBQUV5QixDQUFDLENBQUMxQixVQUFGLENBQWFDLE1BRDJDO0FBRWhFMkIsVUFBQUEsUUFBUSxFQUFFRixDQUFDLENBQUN0QixRQUFGLENBQVdDLFdBRjJDO0FBR2hFd0IsVUFBQUEsS0FBSyxFQUFFRjtBQUh5RCxTQUFYO0FBQUEsT0FBdEMsQ0FBakI7QUFNQSxhQUFPSCxRQUFQO0FBQ0Q7OztXQUVELCtCQUFzQjtBQUFBOztBQUNwQiw4REFBS0gsU0FBTCxDQUFlUyxLQUFmLEVBQXFCQyxLQUFyQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFN1cGVyY2x1c3RlciBmcm9tICdzdXBlcmNsdXN0ZXInO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnbG9kYXNoLm1lbW9pemUnO1xuaW1wb3J0IHtNZW1vaXplZEZ1bmN0aW9ufSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtCQm94LCBQb3NpdGlvbn0gZnJvbSAnZ2VvanNvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHZW9KU09OKGRhdGEsIGdldFBvc2l0aW9uLCBmaWx0ZXJEYXRhKSB7XG4gIGNvbnN0IHJhdyA9IHR5cGVvZiBmaWx0ZXJEYXRhID09PSAnZnVuY3Rpb24nID8gZGF0YS5maWx0ZXIoZmlsdGVyRGF0YSkgOiBkYXRhO1xuXG4gIHJldHVybiByYXdcbiAgICAubWFwKGQgPT4gKHtcbiAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGRhdGE6IGQsXG4gICAgICAgIHBvaW50czogW2RdLFxuICAgICAgICBwb2ludF9jb3VudDogMSxcbiAgICAgICAgcG9pbnRfY291bnRfYWJicmV2aWF0ZWQ6ICcxJ1xuICAgICAgfSxcbiAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgIGNvb3JkaW5hdGVzOiBnZXRQb3NpdGlvbihkKVxuICAgICAgfVxuICAgIH0pKVxuICAgIC5maWx0ZXIoZCA9PiBkLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmV2ZXJ5KE51bWJlci5pc0Zpbml0ZSkpO1xufVxuXG5jb25zdCBjbHVzdGVyUmVzb2x2ZXIgPSAoe2NsdXN0ZXJSYWRpdXN9OiB7Y2x1c3RlclJhZGl1czogbnVtYmVyfSkgPT4gYCR7Y2x1c3RlclJhZGl1c31gO1xuXG5jb25zdCBnZXRDbHVzdGVyZXIgPSAoe2NsdXN0ZXJSYWRpdXMsIGdlb0pTT059OiB7Y2x1c3RlclJhZGl1czogbnVtYmVyOyBnZW9KU09OfSkgPT5cbiAgbmV3IFN1cGVyY2x1c3Rlcih7XG4gICAgbWF4Wm9vbTogMjAsXG4gICAgcmFkaXVzOiBjbHVzdGVyUmFkaXVzLFxuICAgIHJlZHVjZTogKGFjY3VtdWxhdGVkLCBwcm9wcykgPT4ge1xuICAgICAgYWNjdW11bGF0ZWQucG9pbnRzID0gWy4uLmFjY3VtdWxhdGVkLnBvaW50cywgLi4ucHJvcHMucG9pbnRzXTtcbiAgICB9LFxuICAgIG1hcDogcHJvcHMgPT4gKHtwb2ludHM6IFtwcm9wcy5kYXRhXX0pXG4gIH0pLmxvYWQoZ2VvSlNPTik7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsdXN0ZXJCdWlsZGVyIHtcbiAgY2x1c3RlcmVyOiAoKHtjbHVzdGVyUmFkaXVzLCBnZW9KU09OfToge2NsdXN0ZXJSYWRpdXM6IG51bWJlcjsgZ2VvSlNPTn0pID0+IFN1cGVyY2x1c3RlcikgJlxuICAgIE1lbW9pemVkRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jbHVzdGVyZXIgPSBtZW1vaXplKGdldENsdXN0ZXJlciwgY2x1c3RlclJlc29sdmVyKTtcbiAgfVxuXG4gIGNsdXN0ZXJzQXRab29tKHtcbiAgICBiYm94LFxuICAgIGNsdXN0ZXJSYWRpdXMsXG4gICAgZ2VvSlNPTixcbiAgICB6b29tXG4gIH06IHtcbiAgICBiYm94OiBCQm94O1xuICAgIGNsdXN0ZXJSYWRpdXM6IG51bWJlcjtcbiAgICBnZW9KU09OO1xuICAgIHpvb206IG51bWJlcjtcbiAgfSk6IHtcbiAgICBwb2ludHM6IGFueTtcbiAgICBwb3NpdGlvbjogUG9zaXRpb247XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgfVtdIHtcbiAgICBjb25zdCBjbHVzdGVyZXIgPSB0aGlzLmNsdXN0ZXJlcih7Y2x1c3RlclJhZGl1cywgZ2VvSlNPTn0pO1xuXG4gICAgLy8gbWFwIGNsdXN0ZXJzIHRvIGZvcm1hdHRlZCBiaW5zIHRvIGJlIHBhc3NlZCB0byBkZWNrLmdsIGJpbi1zb3J0ZXJcbiAgICBjb25zdCBjbHVzdGVycyA9IGNsdXN0ZXJlci5nZXRDbHVzdGVycyhiYm94LCB6b29tKS5tYXAoKGMsIGkpID0+ICh7XG4gICAgICBwb2ludHM6IGMucHJvcGVydGllcy5wb2ludHMsXG4gICAgICBwb3NpdGlvbjogYy5nZW9tZXRyeS5jb29yZGluYXRlcyxcbiAgICAgIGluZGV4OiBpXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIGNsdXN0ZXJzO1xuICB9XG5cbiAgY2xlYXJDbHVzdGVyZXJDYWNoZSgpIHtcbiAgICB0aGlzLmNsdXN0ZXJlci5jYWNoZS5jbGVhcj8uKCk7XG4gIH1cbn1cbiJdfQ==