"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateBounds = validateBounds;
exports.getCenterAndZoomFromBounds = getCenterAndZoomFromBounds;
exports.normalizeEvent = normalizeEvent;
exports.MAPBOX_TILE_SIZE = void 0;

var _geoViewport = _interopRequireDefault(require("@mapbox/geo-viewport"));

var _console = _interopRequireDefault(require("global/console"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var MAPBOX_TILE_SIZE = 512;
exports.MAPBOX_TILE_SIZE = MAPBOX_TILE_SIZE;

function isLat(num) {
  return Number.isFinite(num) && num <= 90 && num >= -90;
}

function isLng(num) {
  return Number.isFinite(num) && num <= 180 && num >= -180;
}
/**
 * bounds should be [minLng, minLat, maxLng, maxLat]
 * @param {*} bounds
 */


function validateBounds(bounds) {
  // array: [ -180, -85.05112877980659, 180, 85.0511287798066 ]
  // validate bounds
  if (Array.isArray(bounds) && bounds.length === 4 && [bounds[0], bounds[2]].every(isLng) && [bounds[1], bounds[3]].every(isLat)) {
    return bounds;
  }

  return null;
}

function getCenterAndZoomFromBounds(bounds, _ref) {
  var width = _ref.width,
      height = _ref.height;
  var validBounds = validateBounds(bounds);

  if (!validBounds) {
    _console["default"].warn('invalid map bounds provided');

    return null;
  } // viewport(bounds, dimensions, minzoom, maxzoom, tileSize, allowFloat)


  var _geoViewport$viewport = _geoViewport["default"].viewport(bounds, [width, height], undefined, undefined, MAPBOX_TILE_SIZE),
      zoom = _geoViewport$viewport.zoom; // center being calculated by geo-vieweport.viewport has a complex logic that
  // projects and then unprojects the coordinates to determine the center
  // Calculating a simple average instead as that is the expected behavior in most of cases


  var center = [(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2];
  return {
    zoom: zoom,
    center: center
  };
}
/**
 * Add extra info about screen space position and world position to the event.
 * @param {*} event Event to normalize.
 * @param {*} viewport Current viewport.
 * @returns Normalized event with extra information.
 */


function normalizeEvent(event, viewport) {
  var _event$target;

  var bounds = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.getBoundingClientRect();

  if (!bounds) {
    return event;
  }

  var x = event.clientX - bounds.left;
  var y = event.clientY - bounds.top;

  if (!Number.isFinite(x) || !Number.isFinite(y)) {
    return event;
  }

  event.point = [x, y];
  var location = viewport.unproject(event.point, {
    targetZ: 0
  });
  event.lngLat = [location[0], location[1]];
  return event;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9qZWN0aW9uLXV0aWxzLnRzIl0sIm5hbWVzIjpbIk1BUEJPWF9USUxFX1NJWkUiLCJpc0xhdCIsIm51bSIsIk51bWJlciIsImlzRmluaXRlIiwiaXNMbmciLCJ2YWxpZGF0ZUJvdW5kcyIsImJvdW5kcyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImV2ZXJ5IiwiZ2V0Q2VudGVyQW5kWm9vbUZyb21Cb3VuZHMiLCJ3aWR0aCIsImhlaWdodCIsInZhbGlkQm91bmRzIiwiQ29uc29sZSIsIndhcm4iLCJnZW9WaWV3cG9ydCIsInZpZXdwb3J0IiwidW5kZWZpbmVkIiwiem9vbSIsImNlbnRlciIsIm5vcm1hbGl6ZUV2ZW50IiwiZXZlbnQiLCJ0YXJnZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ4IiwiY2xpZW50WCIsImxlZnQiLCJ5IiwiY2xpZW50WSIsInRvcCIsInBvaW50IiwibG9jYXRpb24iLCJ1bnByb2plY3QiLCJ0YXJnZXRaIiwibG5nTGF0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFHQTs7QUFHQTs7QUFOQTtBQUNBO0FBT08sSUFBTUEsZ0JBQWdCLEdBQUcsR0FBekI7OztBQUVQLFNBQVNDLEtBQVQsQ0FBZUMsR0FBZixFQUFvQjtBQUNsQixTQUFPQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JGLEdBQWhCLEtBQXdCQSxHQUFHLElBQUksRUFBL0IsSUFBcUNBLEdBQUcsSUFBSSxDQUFDLEVBQXBEO0FBQ0Q7O0FBQ0QsU0FBU0csS0FBVCxDQUFlSCxHQUFmLEVBQW9CO0FBQ2xCLFNBQU9DLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkYsR0FBaEIsS0FBd0JBLEdBQUcsSUFBSSxHQUEvQixJQUFzQ0EsR0FBRyxJQUFJLENBQUMsR0FBckQ7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTSSxjQUFULENBQXdCQyxNQUF4QixFQUFnQztBQUNyQztBQUNBO0FBQ0EsTUFDRUMsS0FBSyxDQUFDQyxPQUFOLENBQWNGLE1BQWQsS0FDQUEsTUFBTSxDQUFDRyxNQUFQLEtBQWtCLENBRGxCLElBRUEsQ0FBQ0gsTUFBTSxDQUFDLENBQUQsQ0FBUCxFQUFZQSxNQUFNLENBQUMsQ0FBRCxDQUFsQixFQUF1QkksS0FBdkIsQ0FBNkJOLEtBQTdCLENBRkEsSUFHQSxDQUFDRSxNQUFNLENBQUMsQ0FBRCxDQUFQLEVBQVlBLE1BQU0sQ0FBQyxDQUFELENBQWxCLEVBQXVCSSxLQUF2QixDQUE2QlYsS0FBN0IsQ0FKRixFQUtFO0FBQ0EsV0FBT00sTUFBUDtBQUNEOztBQUNELFNBQU8sSUFBUDtBQUNEOztBQUVNLFNBQVNLLDBCQUFULENBQW9DTCxNQUFwQyxRQUE2RDtBQUFBLE1BQWhCTSxLQUFnQixRQUFoQkEsS0FBZ0I7QUFBQSxNQUFUQyxNQUFTLFFBQVRBLE1BQVM7QUFDbEUsTUFBTUMsV0FBVyxHQUFHVCxjQUFjLENBQUNDLE1BQUQsQ0FBbEM7O0FBQ0EsTUFBSSxDQUFDUSxXQUFMLEVBQWtCO0FBQ2hCQyx3QkFBUUMsSUFBUixDQUFhLDZCQUFiOztBQUNBLFdBQU8sSUFBUDtBQUNELEdBTGlFLENBT2xFOzs7QUFQa0UsOEJBUW5EQyx3QkFBWUMsUUFBWixDQUNiWixNQURhLEVBRWIsQ0FBQ00sS0FBRCxFQUFRQyxNQUFSLENBRmEsRUFHYk0sU0FIYSxFQUliQSxTQUphLEVBS2JwQixnQkFMYSxDQVJtRDtBQUFBLE1BUTNEcUIsSUFSMkQseUJBUTNEQSxJQVIyRCxFQWVsRTtBQUNBO0FBQ0E7OztBQUNBLE1BQU1DLE1BQU0sR0FBRyxDQUFDLENBQUNmLE1BQU0sQ0FBQyxDQUFELENBQU4sR0FBWUEsTUFBTSxDQUFDLENBQUQsQ0FBbkIsSUFBMEIsQ0FBM0IsRUFBOEIsQ0FBQ0EsTUFBTSxDQUFDLENBQUQsQ0FBTixHQUFZQSxNQUFNLENBQUMsQ0FBRCxDQUFuQixJQUEwQixDQUF4RCxDQUFmO0FBRUEsU0FBTztBQUFDYyxJQUFBQSxJQUFJLEVBQUpBLElBQUQ7QUFBT0MsSUFBQUEsTUFBTSxFQUFOQTtBQUFQLEdBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0MsY0FBVCxDQUF3QkMsS0FBeEIsRUFBb0NMLFFBQXBDLEVBQW1FO0FBQUE7O0FBQ3hFLE1BQUlaLE1BQU0sb0JBQUdpQixLQUFLLENBQUNDLE1BQVQsa0RBQUcsY0FBY0MscUJBQWQsRUFBYjs7QUFDQSxNQUFJLENBQUNuQixNQUFMLEVBQWE7QUFDWCxXQUFPaUIsS0FBUDtBQUNEOztBQUVELE1BQUlHLENBQUMsR0FBR0gsS0FBSyxDQUFDSSxPQUFOLEdBQWdCckIsTUFBTSxDQUFDc0IsSUFBL0I7QUFDQSxNQUFJQyxDQUFDLEdBQUdOLEtBQUssQ0FBQ08sT0FBTixHQUFnQnhCLE1BQU0sQ0FBQ3lCLEdBQS9COztBQUNBLE1BQUksQ0FBQzdCLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQnVCLENBQWhCLENBQUQsSUFBdUIsQ0FBQ3hCLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQjBCLENBQWhCLENBQTVCLEVBQWdEO0FBQzlDLFdBQU9OLEtBQVA7QUFDRDs7QUFFREEsRUFBQUEsS0FBSyxDQUFDUyxLQUFOLEdBQWMsQ0FBQ04sQ0FBRCxFQUFJRyxDQUFKLENBQWQ7QUFDQSxNQUFNSSxRQUFRLEdBQUdmLFFBQVEsQ0FBQ2dCLFNBQVQsQ0FBbUJYLEtBQUssQ0FBQ1MsS0FBekIsRUFBZ0M7QUFBQ0csSUFBQUEsT0FBTyxFQUFFO0FBQVYsR0FBaEMsQ0FBakI7QUFDQVosRUFBQUEsS0FBSyxDQUFDYSxNQUFOLEdBQWUsQ0FBQ0gsUUFBUSxDQUFDLENBQUQsQ0FBVCxFQUFjQSxRQUFRLENBQUMsQ0FBRCxDQUF0QixDQUFmO0FBRUEsU0FBT1YsS0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IGdlb1ZpZXdwb3J0IGZyb20gJ0BtYXBib3gvZ2VvLXZpZXdwb3J0JztcblxuaW1wb3J0IFdlYk1lcmNhdG9yVmlld3BvcnQgZnJvbSAndmlld3BvcnQtbWVyY2F0b3ItcHJvamVjdCc7XG5pbXBvcnQgQ29uc29sZSBmcm9tICdnbG9iYWwvY29uc29sZSc7XG5cbmV4cG9ydCBjb25zdCBNQVBCT1hfVElMRV9TSVpFID0gNTEyO1xuXG5mdW5jdGlvbiBpc0xhdChudW0pIHtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZShudW0pICYmIG51bSA8PSA5MCAmJiBudW0gPj0gLTkwO1xufVxuZnVuY3Rpb24gaXNMbmcobnVtKSB7XG4gIHJldHVybiBOdW1iZXIuaXNGaW5pdGUobnVtKSAmJiBudW0gPD0gMTgwICYmIG51bSA+PSAtMTgwO1xufVxuXG4vKipcbiAqIGJvdW5kcyBzaG91bGQgYmUgW21pbkxuZywgbWluTGF0LCBtYXhMbmcsIG1heExhdF1cbiAqIEBwYXJhbSB7Kn0gYm91bmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUJvdW5kcyhib3VuZHMpIHtcbiAgLy8gYXJyYXk6IFsgLTE4MCwgLTg1LjA1MTEyODc3OTgwNjU5LCAxODAsIDg1LjA1MTEyODc3OTgwNjYgXVxuICAvLyB2YWxpZGF0ZSBib3VuZHNcbiAgaWYgKFxuICAgIEFycmF5LmlzQXJyYXkoYm91bmRzKSAmJlxuICAgIGJvdW5kcy5sZW5ndGggPT09IDQgJiZcbiAgICBbYm91bmRzWzBdLCBib3VuZHNbMl1dLmV2ZXJ5KGlzTG5nKSAmJlxuICAgIFtib3VuZHNbMV0sIGJvdW5kc1szXV0uZXZlcnkoaXNMYXQpXG4gICkge1xuICAgIHJldHVybiBib3VuZHM7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDZW50ZXJBbmRab29tRnJvbUJvdW5kcyhib3VuZHMsIHt3aWR0aCwgaGVpZ2h0fSkge1xuICBjb25zdCB2YWxpZEJvdW5kcyA9IHZhbGlkYXRlQm91bmRzKGJvdW5kcyk7XG4gIGlmICghdmFsaWRCb3VuZHMpIHtcbiAgICBDb25zb2xlLndhcm4oJ2ludmFsaWQgbWFwIGJvdW5kcyBwcm92aWRlZCcpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gdmlld3BvcnQoYm91bmRzLCBkaW1lbnNpb25zLCBtaW56b29tLCBtYXh6b29tLCB0aWxlU2l6ZSwgYWxsb3dGbG9hdClcbiAgY29uc3Qge3pvb219ID0gZ2VvVmlld3BvcnQudmlld3BvcnQoXG4gICAgYm91bmRzLFxuICAgIFt3aWR0aCwgaGVpZ2h0XSxcbiAgICB1bmRlZmluZWQsXG4gICAgdW5kZWZpbmVkLFxuICAgIE1BUEJPWF9USUxFX1NJWkVcbiAgKTtcbiAgLy8gY2VudGVyIGJlaW5nIGNhbGN1bGF0ZWQgYnkgZ2VvLXZpZXdlcG9ydC52aWV3cG9ydCBoYXMgYSBjb21wbGV4IGxvZ2ljIHRoYXRcbiAgLy8gcHJvamVjdHMgYW5kIHRoZW4gdW5wcm9qZWN0cyB0aGUgY29vcmRpbmF0ZXMgdG8gZGV0ZXJtaW5lIHRoZSBjZW50ZXJcbiAgLy8gQ2FsY3VsYXRpbmcgYSBzaW1wbGUgYXZlcmFnZSBpbnN0ZWFkIGFzIHRoYXQgaXMgdGhlIGV4cGVjdGVkIGJlaGF2aW9yIGluIG1vc3Qgb2YgY2FzZXNcbiAgY29uc3QgY2VudGVyID0gWyhib3VuZHNbMF0gKyBib3VuZHNbMl0pIC8gMiwgKGJvdW5kc1sxXSArIGJvdW5kc1szXSkgLyAyXTtcblxuICByZXR1cm4ge3pvb20sIGNlbnRlcn07XG59XG5cbi8qKlxuICogQWRkIGV4dHJhIGluZm8gYWJvdXQgc2NyZWVuIHNwYWNlIHBvc2l0aW9uIGFuZCB3b3JsZCBwb3NpdGlvbiB0byB0aGUgZXZlbnQuXG4gKiBAcGFyYW0geyp9IGV2ZW50IEV2ZW50IHRvIG5vcm1hbGl6ZS5cbiAqIEBwYXJhbSB7Kn0gdmlld3BvcnQgQ3VycmVudCB2aWV3cG9ydC5cbiAqIEByZXR1cm5zIE5vcm1hbGl6ZWQgZXZlbnQgd2l0aCBleHRyYSBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50KGV2ZW50OiBhbnksIHZpZXdwb3J0OiBXZWJNZXJjYXRvclZpZXdwb3J0KSB7XG4gIHZhciBib3VuZHMgPSBldmVudC50YXJnZXQ/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBpZiAoIWJvdW5kcykge1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuXG4gIHZhciB4ID0gZXZlbnQuY2xpZW50WCAtIGJvdW5kcy5sZWZ0O1xuICB2YXIgeSA9IGV2ZW50LmNsaWVudFkgLSBib3VuZHMudG9wO1xuICBpZiAoIU51bWJlci5pc0Zpbml0ZSh4KSB8fCAhTnVtYmVyLmlzRmluaXRlKHkpKSB7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbiAgZXZlbnQucG9pbnQgPSBbeCwgeV07XG4gIGNvbnN0IGxvY2F0aW9uID0gdmlld3BvcnQudW5wcm9qZWN0KGV2ZW50LnBvaW50LCB7dGFyZ2V0WjogMH0pO1xuICBldmVudC5sbmdMYXQgPSBbbG9jYXRpb25bMF0sIGxvY2F0aW9uWzFdXTtcblxuICByZXR1cm4gZXZlbnQ7XG59XG4iXX0=