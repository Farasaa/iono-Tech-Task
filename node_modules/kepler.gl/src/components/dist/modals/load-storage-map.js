"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _cloudHeader = require("./cloud-components/cloud-header");

var _cloudMaps = require("./cloud-components/cloud-maps");

var _useCloudListProvider2 = require("../hooks/use-cloud-list-provider");

var _providerSelect = require("./cloud-components/provider-select");

var _flexContainer = require("../common/flex-container");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function LoadStorageMapFactory() {
  var LoadStorageMap = function LoadStorageMap(_ref) {
    var onLoadCloudMap = _ref.onLoadCloudMap;

    var _useCloudListProvider = (0, _useCloudListProvider2.useCloudListProvider)(),
        currentProvider = _useCloudListProvider.provider,
        setProvider = _useCloudListProvider.setProvider,
        cloudProviders = _useCloudListProvider.cloudProviders;

    var _useState = (0, _react.useState)(false),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        isLoading = _useState2[0],
        setIsLoading = _useState2[1];

    var _useState3 = (0, _react.useState)(null),
        _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
        maps = _useState4[0],
        setMaps = _useState4[1];

    var _useState5 = (0, _react.useState)(null),
        _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
        error = _useState6[0],
        setError = _useState6[1];

    var setProviderInfo = (0, _react.useCallback)(function (provider) {
      setMaps(null);
      setError(null);

      if (provider) {
        setIsLoading(true);
        provider.listMaps().then(setMaps)["catch"](setError)["finally"](function () {
          return setIsLoading(false);
        });
      } else {
        setIsLoading(false);
      }
    }, []);
    (0, _react.useEffect)(function () {
      setProviderInfo(currentProvider);
    }, [currentProvider]);
    var onSelectMap = (0, _react.useCallback)(function (provider, map) {
      onLoadCloudMap({
        loadParams: map.loadParams,
        provider: provider
      });
    }, []);
    return /*#__PURE__*/_react["default"].createElement(_flexContainer.FlexColContainer, null, !currentProvider ? /*#__PURE__*/_react["default"].createElement(_providerSelect.ProviderSelect, {
      cloudProviders: cloudProviders
    }) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_cloudHeader.CloudHeader, {
      provider: currentProvider,
      onBack: function onBack() {
        return setProvider(null);
      }
    }), /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
      isLoading: isLoading,
      onSelectMap: onSelectMap,
      provider: currentProvider,
      error: error,
      maps: maps
    })));
  };

  return LoadStorageMap;
}

var _default = LoadStorageMapFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RhbHMvbG9hZC1zdG9yYWdlLW1hcC50c3giXSwibmFtZXMiOlsiTG9hZFN0b3JhZ2VNYXBGYWN0b3J5IiwiTG9hZFN0b3JhZ2VNYXAiLCJvbkxvYWRDbG91ZE1hcCIsImN1cnJlbnRQcm92aWRlciIsInByb3ZpZGVyIiwic2V0UHJvdmlkZXIiLCJjbG91ZFByb3ZpZGVycyIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsIm1hcHMiLCJzZXRNYXBzIiwiZXJyb3IiLCJzZXRFcnJvciIsInNldFByb3ZpZGVySW5mbyIsImxpc3RNYXBzIiwidGhlbiIsIm9uU2VsZWN0TWFwIiwibWFwIiwibG9hZFBhcmFtcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQVJBO0FBQ0E7QUFVQSxTQUFTQSxxQkFBVCxHQUFpQztBQUMvQixNQUFNQyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLE9BQXNCO0FBQUEsUUFBcEJDLGNBQW9CLFFBQXBCQSxjQUFvQjs7QUFBQSxnQ0FDc0Isa0RBRHRCO0FBQUEsUUFDMUJDLGVBRDBCLHlCQUNwQ0MsUUFEb0M7QUFBQSxRQUNUQyxXQURTLHlCQUNUQSxXQURTO0FBQUEsUUFDSUMsY0FESix5QkFDSUEsY0FESjs7QUFBQSxvQkFFVCxxQkFBUyxLQUFULENBRlM7QUFBQTtBQUFBLFFBRXBDQyxTQUZvQztBQUFBLFFBRXpCQyxZQUZ5Qjs7QUFBQSxxQkFHbkIscUJBQStCLElBQS9CLENBSG1CO0FBQUE7QUFBQSxRQUdwQ0MsSUFIb0M7QUFBQSxRQUc5QkMsT0FIOEI7O0FBQUEscUJBSWpCLHFCQUFTLElBQVQsQ0FKaUI7QUFBQTtBQUFBLFFBSXBDQyxLQUpvQztBQUFBLFFBSTdCQyxRQUo2Qjs7QUFNM0MsUUFBTUMsZUFBZSxHQUFHLHdCQUFZLFVBQUNULFFBQUQsRUFBK0I7QUFDakVNLE1BQUFBLE9BQU8sQ0FBQyxJQUFELENBQVA7QUFDQUUsTUFBQUEsUUFBUSxDQUFDLElBQUQsQ0FBUjs7QUFDQSxVQUFJUixRQUFKLEVBQWM7QUFDWkksUUFBQUEsWUFBWSxDQUFDLElBQUQsQ0FBWjtBQUNBSixRQUFBQSxRQUFRLENBQ0xVLFFBREgsR0FFR0MsSUFGSCxDQUVRTCxPQUZSLFdBR1NFLFFBSFQsYUFJVztBQUFBLGlCQUFNSixZQUFZLENBQUMsS0FBRCxDQUFsQjtBQUFBLFNBSlg7QUFLRCxPQVBELE1BT087QUFDTEEsUUFBQUEsWUFBWSxDQUFDLEtBQUQsQ0FBWjtBQUNEO0FBQ0YsS0FidUIsRUFhckIsRUFicUIsQ0FBeEI7QUFlQSwwQkFBVSxZQUFNO0FBQ2RLLE1BQUFBLGVBQWUsQ0FBQ1YsZUFBRCxDQUFmO0FBQ0QsS0FGRCxFQUVHLENBQUNBLGVBQUQsQ0FGSDtBQUlBLFFBQU1hLFdBQVcsR0FBRyx3QkFBWSxVQUFDWixRQUFELEVBQVdhLEdBQVgsRUFBbUI7QUFDakRmLE1BQUFBLGNBQWMsQ0FBQztBQUNiZ0IsUUFBQUEsVUFBVSxFQUFFRCxHQUFHLENBQUNDLFVBREg7QUFFYmQsUUFBQUEsUUFBUSxFQUFSQTtBQUZhLE9BQUQsQ0FBZDtBQUlELEtBTG1CLEVBS2pCLEVBTGlCLENBQXBCO0FBT0Esd0JBQ0UsZ0NBQUMsK0JBQUQsUUFDRyxDQUFDRCxlQUFELGdCQUNDLGdDQUFDLDhCQUFEO0FBQWdCLE1BQUEsY0FBYyxFQUFFRztBQUFoQyxNQURELGdCQUdDLCtFQUNFLGdDQUFDLHdCQUFEO0FBQWEsTUFBQSxRQUFRLEVBQUVILGVBQXZCO0FBQXdDLE1BQUEsTUFBTSxFQUFFO0FBQUEsZUFBTUUsV0FBVyxDQUFDLElBQUQsQ0FBakI7QUFBQTtBQUFoRCxNQURGLGVBRUUsZ0NBQUMsb0JBQUQ7QUFDRSxNQUFBLFNBQVMsRUFBRUUsU0FEYjtBQUVFLE1BQUEsV0FBVyxFQUFFUyxXQUZmO0FBR0UsTUFBQSxRQUFRLEVBQUViLGVBSFo7QUFJRSxNQUFBLEtBQUssRUFBRVEsS0FKVDtBQUtFLE1BQUEsSUFBSSxFQUFFRjtBQUxSLE1BRkYsQ0FKSixDQURGO0FBa0JELEdBbEREOztBQW9EQSxTQUFPUixjQUFQO0FBQ0Q7O2VBRWNELHFCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2ssIHVzZVN0YXRlLCB1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Q2xvdWRIZWFkZXJ9IGZyb20gJy4vY2xvdWQtY29tcG9uZW50cy9jbG91ZC1oZWFkZXInO1xuaW1wb3J0IHtDbG91ZE1hcHN9IGZyb20gJy4vY2xvdWQtY29tcG9uZW50cy9jbG91ZC1tYXBzJztcbmltcG9ydCB7dXNlQ2xvdWRMaXN0UHJvdmlkZXJ9IGZyb20gJy4uL2hvb2tzL3VzZS1jbG91ZC1saXN0LXByb3ZpZGVyJztcbmltcG9ydCB7UHJvdmlkZXJTZWxlY3R9IGZyb20gJy4vY2xvdWQtY29tcG9uZW50cy9wcm92aWRlci1zZWxlY3QnO1xuaW1wb3J0IHtGbGV4Q29sQ29udGFpbmVyfSBmcm9tICcuLi9jb21tb24vZmxleC1jb250YWluZXInO1xuaW1wb3J0IHtQcm92aWRlciwgTWFwTGlzdEl0ZW19IGZyb20gJ0BrZXBsZXIuZ2wvY2xvdWQtcHJvdmlkZXJzJztcblxuZnVuY3Rpb24gTG9hZFN0b3JhZ2VNYXBGYWN0b3J5KCkge1xuICBjb25zdCBMb2FkU3RvcmFnZU1hcCA9ICh7b25Mb2FkQ2xvdWRNYXB9KSA9PiB7XG4gICAgY29uc3Qge3Byb3ZpZGVyOiBjdXJyZW50UHJvdmlkZXIsIHNldFByb3ZpZGVyLCBjbG91ZFByb3ZpZGVyc30gPSB1c2VDbG91ZExpc3RQcm92aWRlcigpO1xuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW21hcHMsIHNldE1hcHNdID0gdXNlU3RhdGU8TWFwTGlzdEl0ZW1bXSB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgICBjb25zdCBzZXRQcm92aWRlckluZm8gPSB1c2VDYWxsYmFjaygocHJvdmlkZXI6IFByb3ZpZGVyIHwgbnVsbCkgPT4ge1xuICAgICAgc2V0TWFwcyhudWxsKTtcbiAgICAgIHNldEVycm9yKG51bGwpO1xuICAgICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICAgICAgcHJvdmlkZXJcbiAgICAgICAgICAubGlzdE1hcHMoKVxuICAgICAgICAgIC50aGVuKHNldE1hcHMpXG4gICAgICAgICAgLmNhdGNoKHNldEVycm9yKVxuICAgICAgICAgIC5maW5hbGx5KCgpID0+IHNldElzTG9hZGluZyhmYWxzZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LCBbXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgc2V0UHJvdmlkZXJJbmZvKGN1cnJlbnRQcm92aWRlcik7XG4gICAgfSwgW2N1cnJlbnRQcm92aWRlcl0pO1xuXG4gICAgY29uc3Qgb25TZWxlY3RNYXAgPSB1c2VDYWxsYmFjaygocHJvdmlkZXIsIG1hcCkgPT4ge1xuICAgICAgb25Mb2FkQ2xvdWRNYXAoe1xuICAgICAgICBsb2FkUGFyYW1zOiBtYXAubG9hZFBhcmFtcyxcbiAgICAgICAgcHJvdmlkZXJcbiAgICAgIH0pO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8RmxleENvbENvbnRhaW5lcj5cbiAgICAgICAgeyFjdXJyZW50UHJvdmlkZXIgPyAoXG4gICAgICAgICAgPFByb3ZpZGVyU2VsZWN0IGNsb3VkUHJvdmlkZXJzPXtjbG91ZFByb3ZpZGVyc30gLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPENsb3VkSGVhZGVyIHByb3ZpZGVyPXtjdXJyZW50UHJvdmlkZXJ9IG9uQmFjaz17KCkgPT4gc2V0UHJvdmlkZXIobnVsbCl9IC8+XG4gICAgICAgICAgICA8Q2xvdWRNYXBzXG4gICAgICAgICAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxuICAgICAgICAgICAgICBvblNlbGVjdE1hcD17b25TZWxlY3RNYXB9XG4gICAgICAgICAgICAgIHByb3ZpZGVyPXtjdXJyZW50UHJvdmlkZXJ9XG4gICAgICAgICAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgICAgICAgICAgbWFwcz17bWFwc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L0ZsZXhDb2xDb250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gTG9hZFN0b3JhZ2VNYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRTdG9yYWdlTWFwRmFjdG9yeTtcbiJdfQ==