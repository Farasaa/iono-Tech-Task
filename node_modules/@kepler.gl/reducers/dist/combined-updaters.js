"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceDataInMapUpdater = exports.toggleSplitMapUpdater = exports.combinedLayerTypeChangeUpdater = exports.combinedMapStyleChangeUpdater = exports.addDataToMapComposed = exports.loadFilesSuccessUpdater = exports.addDataToMapUpdater = exports.defaultAddDataToMapOptions = exports.isValidConfig = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _uiStateUpdaters = require("./ui-state-updaters");

var _visStateUpdaters = require("./vis-state-updaters");

var _mapStateUpdaters = require("./map-state-updaters");

var _mapStyleUpdaters = require("./map-style-updaters");

var _processors = require("@kepler.gl/processors");

var _composerHelpers = require("./composer-helpers");

var _utils = require("@kepler.gl/utils");

var _dataUtils = require("./data-utils");

var _constants = require("@kepler.gl/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// compose action to apply result multiple reducers, with the output of one

/**
 * Some actions will affect the entire kepler.lg instance state.
 * The updaters for these actions is exported as `combinedUpdaters`. These updater take the entire instance state
 * as the first argument. Read more about [Using updaters](../advanced-usage/using-updaters.md)
 * @public
 * @example
 *
 * import keplerGlReducer, {combinedUpdaters} from 'kepler.gl/reducers';
 * // Root Reducer
 * const reducers = combineReducers({
 *  keplerGl: keplerGlReducer,
 *  app: appReducer
 * });
 *
 * const composedReducer = (state, action) => {
 *  switch (action.type) {
 *    // add data to map after receiving data from remote sources
 *    case 'LOAD_REMOTE_RESOURCE_SUCCESS':
 *      return {
 *        ...state,
 *        keplerGl: {
 *          ...state.keplerGl,
 *          // pass in kepler.gl instance state to combinedUpdaters
 *          map:  combinedUpdaters.addDataToMapUpdater(
 *           state.keplerGl.map,
 *           {
 *             payload: {
 *               datasets: action.datasets,
 *               options: {readOnly: true},
 *               config: action.config
 *              }
 *            }
 *          )
 *        }
 *      };
 *  }
 *  return reducers(state, action);
 * };
 *
 * export default composedReducer;
 */

/* eslint-disable no-unused-vars */
// @ts-ignore
var combinedUpdaters = null;
/* eslint-enable no-unused-vars */

var isValidConfig = function isValidConfig(config) {
  return (0, _utils.isPlainObject)(config) && (0, _utils.isPlainObject)(config.config) && config.version;
};

exports.isValidConfig = isValidConfig;
var defaultAddDataToMapOptions = {
  centerMap: true,
  keepExistingConfig: false,
  autoCreateLayers: true,
  autoCreateTooltips: true
};
/**
 * Combine data and full configuration update in a single action
 *
 * @memberof combinedUpdaters
 * @param {Object} state kepler.gl instance state, containing all subreducer state
 * @param {Object} action
 * @param {Object} action.payload `{datasets, options, config}`
 * @param action.payload.datasets - ***required** datasets can be a dataset or an array of datasets
 * Each dataset object needs to have `info` and `data` property.
 * @param [action.payload.options] option object `{centerMap: true}`
 * @param [action.payload.config] map config
 * @param [action.payload.info] map info contains title and description
 * @returns nextState
 *
 * @typedef {Object} Dataset
 * @property info -info of a dataset
 * @property info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.
 * @property info.label - A display name of this dataset
 * @property data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`
 * @property data.fields - ***required** Array of fields,
 * @property data.fields.name - ***required** Name of the field,
 * @property data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`
 *
 * @public
 */

exports.defaultAddDataToMapOptions = defaultAddDataToMapOptions;

var addDataToMapUpdater = function addDataToMapUpdater(state, _ref) {
  var _datasets$, _datasets$2, _datasets$3;

  var payload = _ref.payload;
  var datasets = payload.datasets,
      config = payload.config,
      info = payload.info;

  var options = _objectSpread(_objectSpread({}, defaultAddDataToMapOptions), payload.options); // check if progresive loading dataset by bataches, and update visState directly


  var isProgressiveLoading = Array.isArray(datasets) && ((_datasets$ = datasets[0]) === null || _datasets$ === void 0 ? void 0 : _datasets$.info.format) === 'arrow' && ((_datasets$2 = datasets[0]) === null || _datasets$2 === void 0 ? void 0 : _datasets$2.info.id) && ((_datasets$3 = datasets[0]) === null || _datasets$3 === void 0 ? void 0 : _datasets$3.info.id) in state.visState.datasets;

  if (isProgressiveLoading) {
    return (0, _composerHelpers.compose_)([(0, _composerHelpers.pick_)('visState')((0, _composerHelpers.apply_)(_visStateUpdaters.updateVisDataUpdater, {
      datasets: datasets,
      options: options,
      config: config
    }))])(state);
  } // @ts-expect-error


  var parsedConfig = config;

  if (isValidConfig(config)) {
    // if passed in saved config
    // @ts-expect-error
    parsedConfig = state.visState.schema.parseSavedConfig(config);
  }

  var oldLayers = state.visState.layers;

  var filterNewlyAddedLayers = function filterNewlyAddedLayers(layers) {
    return layers.filter(function (nl) {
      return !oldLayers.find(function (ol) {
        return ol === nl;
      });
    });
  }; // Returns undefined if not found, to make typescript happy


  var findMapBoundsIfCentered = function findMapBoundsIfCentered(layers) {
    var bounds = options.centerMap && (0, _dataUtils.findMapBounds)(layers);
    return bounds ? bounds : undefined;
  };

  return (0, _composerHelpers.compose_)([(0, _composerHelpers.pick_)('visState')((0, _composerHelpers.apply_)(_visStateUpdaters.updateVisDataUpdater, {
    datasets: datasets,
    options: options,
    config: parsedConfig
  })), (0, _composerHelpers.if_)(Boolean(info), (0, _composerHelpers.pick_)('visState')((0, _composerHelpers.apply_)(_visStateUpdaters.setMapInfoUpdater, {
    info: info
  }))), (0, _composerHelpers.with_)(function (_ref2) {
    var visState = _ref2.visState;
    return (0, _composerHelpers.pick_)('mapState')((0, _composerHelpers.apply_)(_mapStateUpdaters.receiveMapConfigUpdater, (0, _composerHelpers.payload_)({
      config: parsedConfig,
      options: options,
      bounds: findMapBoundsIfCentered(filterNewlyAddedLayers(visState.layers))
    })));
  }), (0, _composerHelpers.pick_)('mapStyle')((0, _composerHelpers.apply_)(_mapStyleUpdaters.receiveMapConfigUpdater, (0, _composerHelpers.payload_)({
    config: parsedConfig,
    options: options
  }))), (0, _composerHelpers.pick_)('uiState')((0, _composerHelpers.apply_)(_uiStateUpdaters.loadFilesSuccessUpdater, (0, _composerHelpers.payload_)(null))), (0, _composerHelpers.pick_)('uiState')((0, _composerHelpers.apply_)(_uiStateUpdaters.toggleModalUpdater, (0, _composerHelpers.payload_)(null))), (0, _composerHelpers.pick_)('uiState')((0, _composerHelpers.merge_)(options.hasOwnProperty('readOnly') ? {
    readOnly: options.readOnly
  } : {}))])(state);
};

exports.addDataToMapUpdater = addDataToMapUpdater;

var loadFilesSuccessUpdater = function loadFilesSuccessUpdater(state, action) {
  // still more to load
  var payloads = (0, _processors.filesToDataPayload)(action.result);
  var nextState = (0, _composerHelpers.compose_)([(0, _composerHelpers.pick_)('visState')((0, _composerHelpers.merge_)({
    fileLoading: false,
    fileLoadingProgress: {}
  }))])(state); // make multiple add data to map calls

  var stateWithData = (0, _composerHelpers.compose_)(payloads.map(function (p) {
    return (0, _composerHelpers.apply_)(addDataToMapUpdater, (0, _composerHelpers.payload_)(p));
  }))(nextState);
  return stateWithData;
};

exports.loadFilesSuccessUpdater = loadFilesSuccessUpdater;
var addDataToMapComposed = addDataToMapUpdater;
/**
 * Helper which updates map overlay blending mode in visState,
 * but only if it's not currently in the `normal` mode.
 */

exports.addDataToMapComposed = addDataToMapComposed;

var updateOverlayBlending = function updateOverlayBlending(overlayBlending) {
  return function (visState) {
    if (visState.overlayBlending !== _constants.OVERLAY_BLENDINGS.normal.value) {
      return _objectSpread(_objectSpread({}, visState), {}, {
        overlayBlending: overlayBlending
      });
    }

    return visState;
  };
};
/**
 * Helper which updates `darkBaseMapEnabled` in all the layers in visState which
 * have this config setting (or in one specific layer if the `layerId` param is provided).
 */


var updateDarkBaseMapLayers = function updateDarkBaseMapLayers(darkBaseMapEnabled) {
  var layerId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return function (visState) {
    return _objectSpread(_objectSpread({}, visState), {}, {
      layers: visState.layers.map(function (layer) {
        if (!layerId || layer.id === layerId) {
          if (layer.visConfigSettings.hasOwnProperty('darkBaseMapEnabled')) {
            var visConfig = layer.config.visConfig;
            return layer.updateLayerConfig({
              visConfig: _objectSpread(_objectSpread({}, visConfig), {}, {
                darkBaseMapEnabled: darkBaseMapEnabled
              })
            });
          }
        }

        return layer;
      })
    });
  };
};
/**
 * Updater that changes the map style by calling mapStyleChangeUpdater on visState.
 * In addition to that, it does the following:
 *
 *   1. Update map overlay blending mode in accordance with the colorMode of the
 *      base map, but only if it's not in the `normal` mode.
 *
 *   2. Update all the layers which have the `darkBaseMapEnabled` config setting
 *      adjusting it in accordance with the colorMode of the base map.
 *
 */


var combinedMapStyleChangeUpdater = function combinedMapStyleChangeUpdater(state, action) {
  var payload = action.payload;
  var mapStyle = state.mapStyle;

  var getColorMode = function getColorMode(key) {
    var _mapStyle$mapStyles$k;

    return (_mapStyle$mapStyles$k = mapStyle.mapStyles[key]) === null || _mapStyle$mapStyles$k === void 0 ? void 0 : _mapStyle$mapStyles$k.colorMode;
  };

  var prevColorMode = getColorMode(mapStyle.styleType);
  var nextColorMode = getColorMode(payload.styleType);
  var visState = state.visState;

  if (nextColorMode !== prevColorMode) {
    switch (nextColorMode) {
      case _constants.BASE_MAP_COLOR_MODES.DARK:
        visState = (0, _composerHelpers.compose_)([updateOverlayBlending(_constants.OVERLAY_BLENDINGS.screen.value), updateDarkBaseMapLayers(true)])(visState);
        break;

      case _constants.BASE_MAP_COLOR_MODES.LIGHT:
        visState = (0, _composerHelpers.compose_)([updateOverlayBlending(_constants.OVERLAY_BLENDINGS.darken.value), updateDarkBaseMapLayers(false)])(visState);
        break;

      default: // do nothing

    }
  }

  return _objectSpread(_objectSpread({}, state), {}, {
    visState: visState,
    mapStyle: (0, _mapStyleUpdaters.mapStyleChangeUpdater)(mapStyle, {
      payload: _objectSpread({}, payload)
    })
  });
};
/**
 * Updater that changes the layer type by calling `layerTypeChangeUpdater` on visState.
 * In addition to that, if the new layer type has the `darkBaseMapEnabled` config
 * setting, we adjust it in accordance with the colorMode of the base map.s
 */


exports.combinedMapStyleChangeUpdater = combinedMapStyleChangeUpdater;

var combinedLayerTypeChangeUpdater = function combinedLayerTypeChangeUpdater(state, action) {
  var visState = state.visState;
  var oldLayerIndex = visState.layers.findIndex(function (layer) {
    return layer === action.oldLayer;
  });
  visState = (0, _visStateUpdaters.layerTypeChangeUpdater)(visState, action);
  var newLayer = visState.layers[oldLayerIndex];

  if (newLayer !== null && newLayer !== void 0 && newLayer.visConfigSettings.hasOwnProperty('darkBaseMapEnabled')) {
    var mapStyle = state.mapStyle;
    var colorMode = mapStyle.mapStyles[mapStyle.styleType].colorMode;
    var darkBaseMapEnabled = newLayer.config.visConfig.darkBaseMapEnabled;

    switch (colorMode) {
      case _constants.BASE_MAP_COLOR_MODES.DARK:
        if (!darkBaseMapEnabled) {
          visState = updateDarkBaseMapLayers(true, newLayer.id)(visState);
        }

        break;

      case _constants.BASE_MAP_COLOR_MODES.LIGHT:
        if (darkBaseMapEnabled) {
          visState = updateDarkBaseMapLayers(false, newLayer.id)(visState);
        }

        break;

      default: // do nothing

    }
  }

  return _objectSpread(_objectSpread({}, state), {}, {
    visState: visState
  });
};
/**
 * Make mapLegend active when toggleSplitMap action is called
 */


exports.combinedLayerTypeChangeUpdater = combinedLayerTypeChangeUpdater;

var toggleSplitMapUpdater = function toggleSplitMapUpdater(state, action) {
  var _newState$uiState$map, _newState$uiState$map2;

  var newState = _objectSpread(_objectSpread({}, state), {}, {
    visState: (0, _visStateUpdaters.toggleSplitMapUpdater)(state.visState, action),
    uiState: (0, _uiStateUpdaters.toggleSplitMapUpdater)(state.uiState),
    mapState: (0, _mapStateUpdaters.toggleSplitMapUpdater)(state.mapState, action)
  });

  var isSplit = newState.visState.splitMaps.length !== 0;
  var isLegendActive = (_newState$uiState$map = newState.uiState.mapControls) === null || _newState$uiState$map === void 0 ? void 0 : (_newState$uiState$map2 = _newState$uiState$map.mapLegend) === null || _newState$uiState$map2 === void 0 ? void 0 : _newState$uiState$map2.active;

  if (isSplit && !isLegendActive) {
    newState.uiState = (0, _uiStateUpdaters.toggleMapControlUpdater)(newState.uiState, {
      payload: {
        panelId: 'mapLegend',
        index: action.payload
      }
    });
  }

  return newState;
};

exports.toggleSplitMapUpdater = toggleSplitMapUpdater;
var defaultReplaceDataToMapOptions = {
  keepExistingConfig: true,
  centerMap: true,
  autoCreateLayers: false
};
/**
 * Updater replace a dataset in state
 */

var replaceDataInMapUpdater = function replaceDataInMapUpdater(state, _ref3) {
  var payload = _ref3.payload;
  var datasetToReplaceId = payload.datasetToReplaceId,
      datasetToUse = payload.datasetToUse,
      _payload$options = payload.options,
      options = _payload$options === void 0 ? {} : _payload$options;

  var addDataToMapOptions = _objectSpread(_objectSpread({}, defaultReplaceDataToMapOptions), options); // check if dataset is there


  if (!state.visState.datasets[datasetToReplaceId]) {
    return state;
  } // datasetToUse is ProtoDataset


  var dataIdToUse = datasetToUse.info.id;

  if (!dataIdToUse) {
    return state;
  } // remove dataset and put dependencies in toBeMerged


  var preparedState = _objectSpread(_objectSpread({}, state), {}, {
    visState: (0, _visStateUpdaters.prepareStateForDatasetReplace)(state.visState, datasetToReplaceId, dataIdToUse)
  });

  var nextState = addDataToMapUpdater(preparedState, (0, _composerHelpers.payload_)({
    datasets: datasetToUse,
    // should zoom to new dataset
    options: addDataToMapOptions
  }));
  return nextState;
};

exports.replaceDataInMapUpdater = replaceDataInMapUpdater;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,