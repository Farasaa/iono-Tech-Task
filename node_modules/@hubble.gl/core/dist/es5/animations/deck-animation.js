"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _keyframes = require("../keyframes");

var _animation = _interopRequireDefault(require("./animation"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function noop() {}

var DeckAnimation = function (_Animation) {
  (0, _inherits2.default)(DeckAnimation, _Animation);

  var _super = _createSuper(DeckAnimation);

  function DeckAnimation(_ref) {
    var _this;

    var _ref$id = _ref.id,
        id = _ref$id === void 0 ? 'deck' : _ref$id,
        _ref$cameraKeyframe = _ref.cameraKeyframe,
        cameraKeyframe = _ref$cameraKeyframe === void 0 ? undefined : _ref$cameraKeyframe,
        _ref$getLayers = _ref.getLayers,
        getLayers = _ref$getLayers === void 0 ? function (_) {
      return [];
    } : _ref$getLayers,
        _ref$layerKeyframes = _ref.layerKeyframes,
        layerKeyframes = _ref$layerKeyframes === void 0 ? [] : _ref$layerKeyframes,
        _ref$onLayersUpdate = _ref.onLayersUpdate,
        onLayersUpdate = _ref$onLayersUpdate === void 0 ? noop : _ref$onLayersUpdate,
        _ref$onCameraUpdate = _ref.onCameraUpdate,
        onCameraUpdate = _ref$onCameraUpdate === void 0 ? noop : _ref$onCameraUpdate;
    (0, _classCallCheck2.default)(this, DeckAnimation);
    _this = _super.call(this, {
      id: id
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cameraKeyframe", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "layerKeyframes", {});
    _this.layerKeyframes = {};
    _this.onLayersUpdate = onLayersUpdate;
    _this.onCameraUpdate = onCameraUpdate;
    _this.getLayers = getLayers;

    _this.setKeyframes({
      cameraKeyframe: cameraKeyframe,
      layerKeyframes: layerKeyframes
    });

    _this.draw();

    return _this;
  }

  (0, _createClass2.default)(DeckAnimation, [{
    key: "setOnLayersUpdate",
    value: function setOnLayersUpdate(onLayersUpdate) {
      this.onLayersUpdate = onLayersUpdate;
    }
  }, {
    key: "setOnCameraUpdate",
    value: function setOnCameraUpdate(onCameraUpdate) {
      this.onCameraUpdate = onCameraUpdate;
    }
  }, {
    key: "setGetLayers",
    value: function setGetLayers(getLayers) {
      this.getLayers = getLayers;
      this.draw();
    }
  }, {
    key: "setKeyframes",
    value: function setKeyframes(_ref2) {
      var _this2 = this;

      var _ref2$layerKeyframes = _ref2.layerKeyframes,
          layerKeyframes = _ref2$layerKeyframes === void 0 ? [] : _ref2$layerKeyframes,
          _ref2$cameraKeyframe = _ref2.cameraKeyframe,
          cameraKeyframe = _ref2$cameraKeyframe === void 0 ? undefined : _ref2$cameraKeyframe,
          _ref2$timeline = _ref2.timeline,
          timeline = _ref2$timeline === void 0 ? undefined : _ref2$timeline;

      if (this.cameraKeyframe && cameraKeyframe) {
        this.cameraKeyframe.set(cameraKeyframe);
      } else if (cameraKeyframe) {
        this.cameraKeyframe = new _keyframes.CameraKeyframes(cameraKeyframe);
        this.unattachedKeyframes.push(this.cameraKeyframe);
      }

      if (layerKeyframes && layerKeyframes.length > 0) {
        this.layerKeyframes = layerKeyframes.reduce(function (acc, value) {
          if (acc[value.id]) {
            acc[value.id].set(value);
          } else {
            acc[value.id] = new _keyframes.DeckLayerKeyframes(value);

            _this2.unattachedKeyframes.push(acc[value.id]);
          }

          return acc;
        }, this.layerKeyframes);
      }

      if (timeline) {
        this.attachKeyframes(timeline);
      }
    }
  }, {
    key: "getKeyframes",
    value: function getKeyframes() {
      return {
        cameraKeyframe: this.cameraKeyframe,
        layerKeyframes: this.layerKeyframes
      };
    }
  }, {
    key: "animator",
    value: function animator(animation) {
      if (animation.cameraKeyframe) {
        animation.onCameraUpdate(animation.cameraKeyframe.getFrame());
      }

      if (Object.values(animation.layerKeyframes).length > 0) {
        animation.onLayersUpdate(this.getLayers(animation));
      }
    }
  }, {
    key: "applyLayerKeyframes",
    value: function applyLayerKeyframes(layers) {
      var _this3 = this;

      return layers.map(function (layer) {
        if (_this3.layerKeyframes[layer.id]) {
          var frame = _this3.layerKeyframes[layer.id].getFrame();

          return layer.clone(_objectSpread(_objectSpread({}, frame), {}, {
            updateTriggers: frame
          }));
        }

        return layer;
      });
    }
  }]);
  return DeckAnimation;
}(_animation.default);

exports.default = DeckAnimation;
//# sourceMappingURL=deck-animation.js.map