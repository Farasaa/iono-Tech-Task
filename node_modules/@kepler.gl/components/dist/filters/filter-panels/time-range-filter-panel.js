"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _timeRangeFilter = _interopRequireDefault(require("../time-range-filter"));

var _icons = require("../../common/icons");

var _filterPanelWithFieldSelect = _interopRequireDefault(require("./filter-panel-with-field-select"));

var _utils = require("@kepler.gl/utils");

var _templateObject;

TimeRangeFilterPanelFactory.deps = [_filterPanelWithFieldSelect["default"], _timeRangeFilter["default"]];

function TimeRangeFilterPanelFactory(FieldPanelWithFieldSelect, TimeRangeFilter) {
  var StyledFieldPanelWithFieldSelect = (0, _styledComponents["default"])(FieldPanelWithFieldSelect)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n    .field-selector {\n      width: 90%;\n    }\n  "])));

  var TimeRangeFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
        datasets = _ref.datasets,
        allAvailableFields = _ref.allAvailableFields,
        filter = _ref.filter,
        enlargeFilter = _ref.enlargeFilter,
        setFilter = _ref.setFilter,
        removeFilter = _ref.removeFilter,
        toggleAnimation = _ref.toggleAnimation;
    var onSetFilter = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'value', value);
    }, [idx, setFilter]);
    var isEnlarged = (0, _react.useMemo)(function () {
      return !(0, _utils.isSideFilter)(filter);
    }, [filter]);
    var panelActions = (0, _react.useMemo)(function () {
      return [{
        id: filter.id,
        onClick: enlargeFilter,
        tooltip: 'tooltip.timePlayback',
        iconComponent: _icons.Clock,
        active: isEnlarged
      }];
    }, [filter.id, isEnlarged, enlargeFilter]);
    var timeline = (0, _utils.getTimelineFromFilter)(filter);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(StyledFieldPanelWithFieldSelect, {
      allAvailableFields: allAvailableFields,
      datasets: datasets,
      filter: filter,
      idx: idx,
      removeFilter: removeFilter,
      setFilter: setFilter,
      panelActions: panelActions
    }, filter.type && !isEnlarged && /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-panel__filter"
    }, /*#__PURE__*/_react["default"].createElement(TimeRangeFilter, {
      filter: filter,
      toggleAnimation: toggleAnimation,
      setFilter: onSetFilter,
      isAnimatable: true,
      hideTimeTitle: true,
      timeline: timeline
    }))));
  });

  TimeRangeFilterPanel.displayName = 'TimeRangeFilterPanel';
  return TimeRangeFilterPanel;
}

var _default = TimeRangeFilterPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maWx0ZXJzL2ZpbHRlci1wYW5lbHMvdGltZS1yYW5nZS1maWx0ZXItcGFuZWwudHN4Il0sIm5hbWVzIjpbIlRpbWVSYW5nZUZpbHRlclBhbmVsRmFjdG9yeSIsImRlcHMiLCJGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeSIsIlRpbWVSYW5nZUZpbHRlckZhY3RvcnkiLCJGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0IiwiVGltZVJhbmdlRmlsdGVyIiwiU3R5bGVkRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdCIsIlRpbWVSYW5nZUZpbHRlclBhbmVsIiwiUmVhY3QiLCJtZW1vIiwiaWR4IiwiZGF0YXNldHMiLCJhbGxBdmFpbGFibGVGaWVsZHMiLCJmaWx0ZXIiLCJlbmxhcmdlRmlsdGVyIiwic2V0RmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwidG9nZ2xlQW5pbWF0aW9uIiwib25TZXRGaWx0ZXIiLCJ2YWx1ZSIsImlzRW5sYXJnZWQiLCJwYW5lbEFjdGlvbnMiLCJpZCIsIm9uQ2xpY2siLCJ0b29sdGlwIiwiaWNvbkNvbXBvbmVudCIsIkNsb2NrIiwiYWN0aXZlIiwidGltZWxpbmUiLCJ0eXBlIiwiZGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQUVBQSwyQkFBMkIsQ0FBQ0MsSUFBNUIsR0FBbUMsQ0FBQ0Msc0NBQUQsRUFBbUNDLDJCQUFuQyxDQUFuQzs7QUFFQSxTQUFTSCwyQkFBVCxDQUNFSSx5QkFERixFQUVFQyxlQUZGLEVBR0U7QUFDQSxNQUFNQywrQkFBK0IsR0FBRyxrQ0FBT0YseUJBQVAsQ0FBSCwySUFBckM7O0FBTUEsTUFBTUcsb0JBQW1ELGdCQUFHQyxrQkFBTUMsSUFBTixDQUMxRCxnQkFTTTtBQUFBLFFBUkpDLEdBUUksUUFSSkEsR0FRSTtBQUFBLFFBUEpDLFFBT0ksUUFQSkEsUUFPSTtBQUFBLFFBTkpDLGtCQU1JLFFBTkpBLGtCQU1JO0FBQUEsUUFMSkMsTUFLSSxRQUxKQSxNQUtJO0FBQUEsUUFKSkMsYUFJSSxRQUpKQSxhQUlJO0FBQUEsUUFISkMsU0FHSSxRQUhKQSxTQUdJO0FBQUEsUUFGSkMsWUFFSSxRQUZKQSxZQUVJO0FBQUEsUUFESkMsZUFDSSxRQURKQSxlQUNJO0FBQ0osUUFBTUMsV0FBVyxHQUFHLHdCQUFZLFVBQUFDLEtBQUs7QUFBQSxhQUFJSixTQUFTLENBQUNMLEdBQUQsRUFBTSxPQUFOLEVBQWVTLEtBQWYsQ0FBYjtBQUFBLEtBQWpCLEVBQXFELENBQUNULEdBQUQsRUFBTUssU0FBTixDQUFyRCxDQUFwQjtBQUVBLFFBQU1LLFVBQVUsR0FBRyxvQkFBUTtBQUFBLGFBQU0sQ0FBQyx5QkFBYVAsTUFBYixDQUFQO0FBQUEsS0FBUixFQUFxQyxDQUFDQSxNQUFELENBQXJDLENBQW5CO0FBRUEsUUFBTVEsWUFBWSxHQUFHLG9CQUNuQjtBQUFBLGFBQU0sQ0FDSjtBQUNFQyxRQUFBQSxFQUFFLEVBQUVULE1BQU0sQ0FBQ1MsRUFEYjtBQUVFQyxRQUFBQSxPQUFPLEVBQUVULGFBRlg7QUFHRVUsUUFBQUEsT0FBTyxFQUFFLHNCQUhYO0FBSUVDLFFBQUFBLGFBQWEsRUFBRUMsWUFKakI7QUFLRUMsUUFBQUEsTUFBTSxFQUFFUDtBQUxWLE9BREksQ0FBTjtBQUFBLEtBRG1CLEVBVW5CLENBQUNQLE1BQU0sQ0FBQ1MsRUFBUixFQUFZRixVQUFaLEVBQXdCTixhQUF4QixDQVZtQixDQUFyQjtBQWFBLFFBQU1jLFFBQVEsR0FBRyxrQ0FBc0JmLE1BQXRCLENBQWpCO0FBRUEsd0JBQ0UsK0VBQ0UsZ0NBQUMsK0JBQUQ7QUFDRSxNQUFBLGtCQUFrQixFQUFFRCxrQkFEdEI7QUFFRSxNQUFBLFFBQVEsRUFBRUQsUUFGWjtBQUdFLE1BQUEsTUFBTSxFQUFFRSxNQUhWO0FBSUUsTUFBQSxHQUFHLEVBQUVILEdBSlA7QUFLRSxNQUFBLFlBQVksRUFBRU0sWUFMaEI7QUFNRSxNQUFBLFNBQVMsRUFBRUQsU0FOYjtBQU9FLE1BQUEsWUFBWSxFQUFFTTtBQVBoQixPQVNHUixNQUFNLENBQUNnQixJQUFQLElBQWUsQ0FBQ1QsVUFBaEIsaUJBQ0M7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNFLGdDQUFDLGVBQUQ7QUFDRSxNQUFBLE1BQU0sRUFBRVAsTUFEVjtBQUVFLE1BQUEsZUFBZSxFQUFFSSxlQUZuQjtBQUdFLE1BQUEsU0FBUyxFQUFFQyxXQUhiO0FBSUUsTUFBQSxZQUFZLE1BSmQ7QUFLRSxNQUFBLGFBQWEsTUFMZjtBQU1FLE1BQUEsUUFBUSxFQUFFVTtBQU5aLE1BREYsQ0FWSixDQURGLENBREY7QUEwQkQsR0F4RHlELENBQTVEOztBQTJEQXJCLEVBQUFBLG9CQUFvQixDQUFDdUIsV0FBckIsR0FBbUMsc0JBQW5DO0FBRUEsU0FBT3ZCLG9CQUFQO0FBQ0Q7O2VBRWNQLDJCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2ssIHVzZU1lbW99IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IFRpbWVSYW5nZUZpbHRlckZhY3RvcnkgZnJvbSAnLi4vdGltZS1yYW5nZS1maWx0ZXInO1xuaW1wb3J0IHtDbG9ja30gZnJvbSAnLi4vLi4vY29tbW9uL2ljb25zJztcbmltcG9ydCBGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeSBmcm9tICcuL2ZpbHRlci1wYW5lbC13aXRoLWZpZWxkLXNlbGVjdCc7XG5pbXBvcnQge1RpbWVSYW5nZUZpbHRlclBhbmVsQ29tcG9uZW50fSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7aXNTaWRlRmlsdGVyLCBnZXRUaW1lbGluZUZyb21GaWx0ZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuXG5UaW1lUmFuZ2VGaWx0ZXJQYW5lbEZhY3RvcnkuZGVwcyA9IFtGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeSwgVGltZVJhbmdlRmlsdGVyRmFjdG9yeV07XG5cbmZ1bmN0aW9uIFRpbWVSYW5nZUZpbHRlclBhbmVsRmFjdG9yeShcbiAgRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdDogUmV0dXJuVHlwZTx0eXBlb2YgRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdEZhY3Rvcnk+LFxuICBUaW1lUmFuZ2VGaWx0ZXI6IFJldHVyblR5cGU8dHlwZW9mIFRpbWVSYW5nZUZpbHRlckZhY3Rvcnk+XG4pIHtcbiAgY29uc3QgU3R5bGVkRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdCA9IHN0eWxlZChGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0KWBcbiAgICAuZmllbGQtc2VsZWN0b3Ige1xuICAgICAgd2lkdGg6IDkwJTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGltZVJhbmdlRmlsdGVyUGFuZWw6IFRpbWVSYW5nZUZpbHRlclBhbmVsQ29tcG9uZW50ID0gUmVhY3QubWVtbyhcbiAgICAoe1xuICAgICAgaWR4LFxuICAgICAgZGF0YXNldHMsXG4gICAgICBhbGxBdmFpbGFibGVGaWVsZHMsXG4gICAgICBmaWx0ZXIsXG4gICAgICBlbmxhcmdlRmlsdGVyLFxuICAgICAgc2V0RmlsdGVyLFxuICAgICAgcmVtb3ZlRmlsdGVyLFxuICAgICAgdG9nZ2xlQW5pbWF0aW9uXG4gICAgfSkgPT4ge1xuICAgICAgY29uc3Qgb25TZXRGaWx0ZXIgPSB1c2VDYWxsYmFjayh2YWx1ZSA9PiBzZXRGaWx0ZXIoaWR4LCAndmFsdWUnLCB2YWx1ZSksIFtpZHgsIHNldEZpbHRlcl0pO1xuXG4gICAgICBjb25zdCBpc0VubGFyZ2VkID0gdXNlTWVtbygoKSA9PiAhaXNTaWRlRmlsdGVyKGZpbHRlciksIFtmaWx0ZXJdKTtcblxuICAgICAgY29uc3QgcGFuZWxBY3Rpb25zID0gdXNlTWVtbyhcbiAgICAgICAgKCkgPT4gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiBmaWx0ZXIuaWQsXG4gICAgICAgICAgICBvbkNsaWNrOiBlbmxhcmdlRmlsdGVyLFxuICAgICAgICAgICAgdG9vbHRpcDogJ3Rvb2x0aXAudGltZVBsYXliYWNrJyxcbiAgICAgICAgICAgIGljb25Db21wb25lbnQ6IENsb2NrLFxuICAgICAgICAgICAgYWN0aXZlOiBpc0VubGFyZ2VkXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBbZmlsdGVyLmlkLCBpc0VubGFyZ2VkLCBlbmxhcmdlRmlsdGVyXVxuICAgICAgKTtcblxuICAgICAgY29uc3QgdGltZWxpbmUgPSBnZXRUaW1lbGluZUZyb21GaWx0ZXIoZmlsdGVyKTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8U3R5bGVkRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdFxuICAgICAgICAgICAgYWxsQXZhaWxhYmxlRmllbGRzPXthbGxBdmFpbGFibGVGaWVsZHN9XG4gICAgICAgICAgICBkYXRhc2V0cz17ZGF0YXNldHN9XG4gICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgIGlkeD17aWR4fVxuICAgICAgICAgICAgcmVtb3ZlRmlsdGVyPXtyZW1vdmVGaWx0ZXJ9XG4gICAgICAgICAgICBzZXRGaWx0ZXI9e3NldEZpbHRlcn1cbiAgICAgICAgICAgIHBhbmVsQWN0aW9ucz17cGFuZWxBY3Rpb25zfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtmaWx0ZXIudHlwZSAmJiAhaXNFbmxhcmdlZCAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsdGVyLXBhbmVsX19maWx0ZXJcIj5cbiAgICAgICAgICAgICAgICA8VGltZVJhbmdlRmlsdGVyXG4gICAgICAgICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgICAgICAgIHRvZ2dsZUFuaW1hdGlvbj17dG9nZ2xlQW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgICAgc2V0RmlsdGVyPXtvblNldEZpbHRlcn1cbiAgICAgICAgICAgICAgICAgIGlzQW5pbWF0YWJsZVxuICAgICAgICAgICAgICAgICAgaGlkZVRpbWVUaXRsZVxuICAgICAgICAgICAgICAgICAgdGltZWxpbmU9e3RpbWVsaW5lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1N0eWxlZEZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3Q+XG4gICAgICAgIDwvPlxuICAgICAgKTtcbiAgICB9XG4gICk7XG5cbiAgVGltZVJhbmdlRmlsdGVyUGFuZWwuZGlzcGxheU5hbWUgPSAnVGltZVJhbmdlRmlsdGVyUGFuZWwnO1xuXG4gIHJldHVybiBUaW1lUmFuZ2VGaWx0ZXJQYW5lbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGltZVJhbmdlRmlsdGVyUGFuZWxGYWN0b3J5O1xuIl19