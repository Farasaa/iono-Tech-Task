export class ArrowLikeField {
  constructor(name, type) {
    let nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let metadata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();
    this.name = void 0;
    this.type = void 0;
    this.nullable = void 0;
    this.metadata = void 0;
    this.name = name;
    this.type = type;
    this.nullable = nullable;
    this.metadata = metadata;
  }
  get typeId() {
    return this.type && this.type.typeId;
  }
  clone() {
    return new ArrowLikeField(this.name, this.type, this.nullable, this.metadata);
  }
  compareTo(other) {
    return this.name === other.name && this.type === other.type && this.nullable === other.nullable && this.metadata === other.metadata;
  }
  toString() {
    return `${this.type}${this.nullable ? ', nullable' : ''}${this.metadata ? `, metadata: ${this.metadata}` : ''}`;
  }
}
//# sourceMappingURL=arrow-like-field.js.map