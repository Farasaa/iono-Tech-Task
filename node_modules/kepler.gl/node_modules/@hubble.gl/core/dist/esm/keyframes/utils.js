import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { transform } from 'popmotion';
export function sanitizeEasings(keyframes, easings) {
  var _easings = easings;

  if (typeof easings === 'function') {
    _easings = [];

    for (var idx = 0; idx < keyframes.length - 1; idx++) {
      _easings.push(easings);
    }
  }

  if (keyframes.length - 1 !== _easings.length) {
    throw new Error('There must be one fewer easing than keyframes');
  }

  return _easings;
}
export function sanitizeTimings(keyframes, timings) {
  var _timings = timings;

  if (typeof timings === 'number') {
    _timings = [];
    var time = 0;

    for (var idx = 0; idx < keyframes.length; idx++) {
      _timings.push(time);

      time += timings;
    }
  }

  if (keyframes.length !== _timings.length) {
    throw new Error('There must be same number of timings as keyframes');
  }

  return _timings;
}
export function merge(timings, keyframes, easings) {
  var _keyframes = keyframes.map(function (keyframe, idx) {
    if (idx === 0) {
      return [timings[idx], _objectSpread(_objectSpread({}, keyframe), {}, {
        ease: undefined
      })];
    }

    return [timings[idx], _objectSpread(_objectSpread({}, keyframe), {}, {
      ease: easings[idx - 1]
    })];
  });

  return _keyframes;
}
export function factorInterpolator(start, end, ease) {
  return transform.interpolate([0, 1], [start, end], {
    ease: ease
  });
}
//# sourceMappingURL=utils.js.map