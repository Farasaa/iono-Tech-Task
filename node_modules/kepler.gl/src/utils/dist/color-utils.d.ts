import { ColorRange } from '@kepler.gl/constants';
import { HexColor, RGBColor } from '@kepler.gl/types';
/**
 * get r g b from hex code
 *
 * @param hex
 * @returns array of r g bs
 */
export declare function hexToRgb(hex: string): RGBColor;
export declare function isHexColor(hex: string): RegExpExecArray | null;
/**
 * get hex from r g b
 *
 * @param rgb
 * @returns hex string
 */
export declare function rgbToHex([r, g, b]: RGBColor): HexColor;
/**
 * Get color group name by parsing name, discard step in the name
 * e.g. Global Warming 6 -> Global Warming
 *
 * @param {Object} colorRange
 * @return {string | null}
 */
export declare function getColorGroupByName(colorRange: ColorRange): string | null;
/**
 * Get a reversed colorRange
 * @param reversed
 * @param colorRange
 */
export declare function reverseColorRange(reversed: boolean, colorRange: ColorRange): ColorRange | null;
/**
 * given a list of rgb arrays it will generate a linear gradient css rule
 * @param direction
 * @param colors
 * @return
 */
export declare function createLinearGradient(direction: string, colors: RGBColor[]): string;
/**
 * Convert color to RGB
 */
export declare function colorMaybeToRGB(color: unknown): RGBColor | null;
/**
 * Whether color is rgb
 * @returns
 */
export declare function isRgbColor(color: unknown): boolean;
/**
 * Take color values in 0-255 range and map to [0, 1]
 */
export declare function normalizeColor(color: number[]): number[];
