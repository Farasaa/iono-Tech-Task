"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.format = format;
exports.structure = void 0;

var utils = _interopRequireWildcard(require("./utils"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var structure = [{
  field: 'fileName',
  length: 100
}, {
  field: 'fileMode',
  length: 8
}, {
  field: 'uid',
  length: 8
}, {
  field: 'gid',
  length: 8
}, {
  field: 'fileSize',
  length: 12
}, {
  field: 'mtime',
  length: 12
}, {
  field: 'checksum',
  length: 8
}, {
  field: 'type',
  length: 1
}, {
  field: 'linkName',
  length: 100
}, {
  field: 'ustar',
  length: 8
}, {
  field: 'owner',
  length: 32
}, {
  field: 'group',
  length: 32
}, {
  field: 'majorNumber',
  length: 8
}, {
  field: 'minorNumber',
  length: 8
}, {
  field: 'filenamePrefix',
  length: 155
}, {
  field: 'padding',
  length: 12
}];
exports.structure = structure;

function format(data, cb) {
  var buffer = utils.clean(512);
  var offset = 0;
  structure.forEach(function (value) {
    var str = data[value.field] || '';
    var i;
    var length;

    for (i = 0, length = str.length; i < length; i += 1) {
      buffer[offset] = str.charCodeAt(i);
      offset += 1;
    }

    offset += value.length - i;
  });

  if (typeof cb === 'function') {
    return cb(buffer, offset);
  }

  return buffer;
}
//# sourceMappingURL=header.js.map