"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = TimeRangeSliderFactory;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash.throttle"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _rangeSlider = _interopRequireDefault(require("./range-slider"));

var _timeSliderMarker = _interopRequireDefault(require("./time-slider-marker"));

var _playbackControls = _interopRequireDefault(require("./animation-control/playback-controls"));

var _timeRangeSliderTimeTitle = _interopRequireDefault(require("./time-range-slider-time-title"));

var _animationControl = _interopRequireDefault(require("./animation-control/animation-control"));

var _templateObject;

var animationControlWidth = 176;

var StyledSliderContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  align-items: flex-end;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding-left: ", "px;\n\n  .timeline-container .kg-slider {\n    display: none;\n  }\n\n  .playback-controls {\n    margin-left: 22px;\n  }\n"])), function (props) {
  return props.isEnlarged ? 24 : 0;
});

var ANIMATION_CONTROL_STYLE = {
  flex: 1
};
TimeRangeSliderFactory.deps = [_playbackControls["default"], _rangeSlider["default"], _timeSliderMarker["default"], _timeRangeSliderTimeTitle["default"], _animationControl["default"]];

function TimeRangeSliderFactory(PlaybackControls, RangeSlider, TimeSliderMarker, TimeRangeSliderTimeTitle, AnimationControl) {
  var TimeRangeSlider = function TimeRangeSlider(props) {
    var domain = props.domain,
        value = props.value,
        isEnlarged = props.isEnlarged,
        isMinified = props.isMinified,
        hideTimeTitle = props.hideTimeTitle,
        isAnimating = props.isAnimating,
        resetAnimation = props.resetAnimation,
        timeFormat = props.timeFormat,
        timezone = props.timezone,
        histogram = props.histogram,
        plotType = props.plotType,
        lineChart = props.lineChart,
        step = props.step,
        isAnimatable = props.isAnimatable,
        speed = props.speed,
        animationWindow = props.animationWindow,
        updateAnimationSpeed = props.updateAnimationSpeed,
        setFilterAnimationWindow = props.setFilterAnimationWindow,
        toggleAnimation = props.toggleAnimation,
        onChange = props.onChange,
        timeline = props.timeline;
    var throttledOnchange = (0, _react.useMemo)(function () {
      return (0, _lodash["default"])(onChange, 20);
    }, [onChange]);
    var style = (0, _react.useMemo)(function () {
      return {
        width: isEnlarged ? "calc(100% - ".concat(animationControlWidth, "px)") : '100%'
      };
    }, [isEnlarged]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "time-range-slider"
    }, !hideTimeTitle && isEnlarged ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "time-range-slider__title",
      style: style
    }, /*#__PURE__*/_react["default"].createElement(TimeRangeSliderTimeTitle, {
      timeFormat: timeFormat,
      timezone: timezone,
      value: value,
      isEnlarged: isEnlarged
    })) : null, /*#__PURE__*/_react["default"].createElement(StyledSliderContainer, {
      className: "time-range-slider__container",
      isEnlarged: isEnlarged
    }, !isMinified ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "timeline-container",
      style: style
    }, /*#__PURE__*/_react["default"].createElement(RangeSlider, {
      range: domain,
      value0: value[0],
      value1: value[1],
      histogram: histogram,
      lineChart: lineChart,
      plotType: plotType,
      isEnlarged: isEnlarged,
      showInput: false,
      step: step,
      onChange: throttledOnchange,
      xAxis: TimeSliderMarker,
      timezone: timezone,
      timeFormat: timeFormat
    })) : /*#__PURE__*/_react["default"].createElement(AnimationControl, {
      style: ANIMATION_CONTROL_STYLE,
      isAnimatable: isAnimatable,
      isAnimating: isAnimating,
      resetAnimation: resetAnimation,
      toggleAnimation: toggleAnimation,
      updateAnimationSpeed: updateAnimationSpeed,
      setTimelineValue: throttledOnchange,
      setAnimationWindow: setFilterAnimationWindow,
      showTimeDisplay: false,
      timeline: timeline
    }), isEnlarged && !isMinified ? /*#__PURE__*/_react["default"].createElement(PlaybackControls, {
      isAnimatable: isAnimatable,
      width: animationControlWidth,
      speed: speed,
      animationWindow: animationWindow,
      updateAnimationSpeed: updateAnimationSpeed,
      setFilterAnimationWindow: setFilterAnimationWindow,
      pauseAnimation: toggleAnimation,
      resetAnimation: resetAnimation,
      isAnimating: isAnimating,
      startAnimation: toggleAnimation
    }) : null));
  };

  return /*#__PURE__*/_react["default"].memo(TimeRangeSlider);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vdGltZS1yYW5nZS1zbGlkZXIudHN4Il0sIm5hbWVzIjpbImFuaW1hdGlvbkNvbnRyb2xXaWR0aCIsIlN0eWxlZFNsaWRlckNvbnRhaW5lciIsInN0eWxlZCIsImRpdiIsInByb3BzIiwiaXNFbmxhcmdlZCIsIkFOSU1BVElPTl9DT05UUk9MX1NUWUxFIiwiZmxleCIsIlRpbWVSYW5nZVNsaWRlckZhY3RvcnkiLCJkZXBzIiwiUGxheWJhY2tDb250cm9sc0ZhY3RvcnkiLCJSYW5nZVNsaWRlckZhY3RvcnkiLCJUaW1lU2xpZGVyTWFya2VyRmFjdG9yeSIsIlRpbWVSYW5nZVNsaWRlclRpbWVUaXRsZUZhY3RvcnkiLCJBbmltYXRpb25Db250cm9sRmFjdG9yeSIsIlBsYXliYWNrQ29udHJvbHMiLCJSYW5nZVNsaWRlciIsIlRpbWVTbGlkZXJNYXJrZXIiLCJUaW1lUmFuZ2VTbGlkZXJUaW1lVGl0bGUiLCJBbmltYXRpb25Db250cm9sIiwiVGltZVJhbmdlU2xpZGVyIiwiZG9tYWluIiwidmFsdWUiLCJpc01pbmlmaWVkIiwiaGlkZVRpbWVUaXRsZSIsImlzQW5pbWF0aW5nIiwicmVzZXRBbmltYXRpb24iLCJ0aW1lRm9ybWF0IiwidGltZXpvbmUiLCJoaXN0b2dyYW0iLCJwbG90VHlwZSIsImxpbmVDaGFydCIsInN0ZXAiLCJpc0FuaW1hdGFibGUiLCJzcGVlZCIsImFuaW1hdGlvbldpbmRvdyIsInVwZGF0ZUFuaW1hdGlvblNwZWVkIiwic2V0RmlsdGVyQW5pbWF0aW9uV2luZG93IiwidG9nZ2xlQW5pbWF0aW9uIiwib25DaGFuZ2UiLCJ0aW1lbGluZSIsInRocm90dGxlZE9uY2hhbmdlIiwic3R5bGUiLCJ3aWR0aCIsIlJlYWN0IiwibWVtbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBRUEsSUFBTUEscUJBQXFCLEdBQUcsR0FB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QixFQUFFRixvQkFOeEI7QUFPRSxNQUFBLGdCQUFnQixFQUFFSyxpQkFQcEI7QUFRRSxNQUFBLGtCQUFrQixFQUFFSix3QkFSdEI7QUFTRSxNQUFBLGVBQWUsRUFBRSxLQVRuQjtBQVVFLE1BQUEsUUFBUSxFQUFFRztBQVZaLE1BcEJKLEVBaUNHbkMsVUFBVSxJQUFJLENBQUNrQixVQUFmLGdCQUNDLGdDQUFDLGdCQUFEO0FBQ0UsTUFBQSxZQUFZLEVBQUVVLFlBRGhCO0FBRUUsTUFBQSxLQUFLLEVBQUVqQyxxQkFGVDtBQUdFLE1BQUEsS0FBSyxFQUFFa0MsS0FIVDtBQUlFLE1BQUEsZUFBZSxFQUFFQyxlQUpuQjtBQUtFLE1BQUEsb0JBQW9CLEVBQUVDLG9CQUx4QjtBQU1FLE1BQUEsd0JBQXdCLEVBQUVDLHdCQU41QjtBQU9FLE1BQUEsY0FBYyxFQUFFQyxlQVBsQjtBQVFFLE1BQUEsY0FBYyxFQUFFWixjQVJsQjtBQVNFLE1BQUEsV0FBVyxFQUFFRCxXQVRmO0FBVUUsTUFBQSxjQUFjLEVBQUVhO0FBVmxCLE1BREQsR0FhRyxJQTlDTixDQVhGLENBREY7QUE4REQsR0FoR0Q7O0FBa0dBLHNCQUFPTSxrQkFBTUMsSUFBTixDQUFXekIsZUFBWCxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSAnbG9kYXNoLnRocm90dGxlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgUmFuZ2VTbGlkZXJGYWN0b3J5IGZyb20gJy4vcmFuZ2Utc2xpZGVyJztcbmltcG9ydCBUaW1lU2xpZGVyTWFya2VyRmFjdG9yeSBmcm9tICcuL3RpbWUtc2xpZGVyLW1hcmtlcic7XG5pbXBvcnQgUGxheWJhY2tDb250cm9sc0ZhY3RvcnkgZnJvbSAnLi9hbmltYXRpb24tY29udHJvbC9wbGF5YmFjay1jb250cm9scyc7XG5pbXBvcnQgVGltZVJhbmdlU2xpZGVyVGltZVRpdGxlRmFjdG9yeSBmcm9tICcuL3RpbWUtcmFuZ2Utc2xpZGVyLXRpbWUtdGl0bGUnO1xuaW1wb3J0IHtIaXN0b2dyYW1CaW4sIExpbmVDaGFydCwgVGltZWxpbmV9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IEFuaW1hdGlvbkNvbnRyb2xGYWN0b3J5IGZyb20gJy4vYW5pbWF0aW9uLWNvbnRyb2wvYW5pbWF0aW9uLWNvbnRyb2wnO1xuXG5jb25zdCBhbmltYXRpb25Db250cm9sV2lkdGggPSAxNzY7XG5cbmludGVyZmFjZSBTdHlsZWRTbGlkZXJDb250YWluZXJQcm9wcyB7XG4gIGlzRW5sYXJnZWQ/OiBib29sZWFuO1xufVxuXG50eXBlIFRpbWVSYW5nZVNsaWRlclByb3BzID0ge1xuICBkb21haW4/OiBbbnVtYmVyLCBudW1iZXJdO1xuICB2YWx1ZTogW251bWJlciwgbnVtYmVyXTtcbiAgaXNFbmxhcmdlZD86IGJvb2xlYW47XG4gIGlzTWluaWZpZWQ/OiBib29sZWFuO1xuICBoaWRlVGltZVRpdGxlPzogYm9vbGVhbjtcbiAgaXNBbmltYXRpbmc6IGJvb2xlYW47XG4gIHRpbWVGb3JtYXQ6IHN0cmluZztcbiAgdGltZXpvbmU/OiBzdHJpbmcgfCBudWxsO1xuICBoaXN0b2dyYW0/OiBIaXN0b2dyYW1CaW5bXTtcbiAgcGxvdFR5cGU/OiBzdHJpbmc7XG4gIGxpbmVDaGFydD86IExpbmVDaGFydDtcbiAgc3RlcDogbnVtYmVyO1xuICBpc0FuaW1hdGFibGU/OiBib29sZWFuO1xuICBzcGVlZDogbnVtYmVyO1xuICBhbmltYXRpb25XaW5kb3c6IHN0cmluZztcbiAgcmVzZXRBbmltYXRpb24/OiAoKSA9PiB2b2lkO1xuICB0b2dnbGVBbmltYXRpb246ICgpID0+IHZvaWQ7XG4gIHVwZGF0ZUFuaW1hdGlvblNwZWVkPzogKHZhbDogbnVtYmVyKSA9PiB2b2lkO1xuICBzZXRGaWx0ZXJBbmltYXRpb25XaW5kb3c/OiAoaWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgb25DaGFuZ2U6ICh2OiBudW1iZXJbXSkgPT4gdm9pZDtcbiAgdGltZWxpbmU6IFRpbWVsaW5lO1xufTtcblxuY29uc3QgU3R5bGVkU2xpZGVyQ29udGFpbmVyID0gc3R5bGVkLmRpdjxTdHlsZWRTbGlkZXJDb250YWluZXJQcm9wcz5gXG4gIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nLWxlZnQ6ICR7cHJvcHMgPT4gKHByb3BzLmlzRW5sYXJnZWQgPyAyNCA6IDApfXB4O1xuXG4gIC50aW1lbGluZS1jb250YWluZXIgLmtnLXNsaWRlciB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIC5wbGF5YmFjay1jb250cm9scyB7XG4gICAgbWFyZ2luLWxlZnQ6IDIycHg7XG4gIH1cbmA7XG5cbmNvbnN0IEFOSU1BVElPTl9DT05UUk9MX1NUWUxFID0ge2ZsZXg6IDF9O1xuXG5UaW1lUmFuZ2VTbGlkZXJGYWN0b3J5LmRlcHMgPSBbXG4gIFBsYXliYWNrQ29udHJvbHNGYWN0b3J5LFxuICBSYW5nZVNsaWRlckZhY3RvcnksXG4gIFRpbWVTbGlkZXJNYXJrZXJGYWN0b3J5LFxuICBUaW1lUmFuZ2VTbGlkZXJUaW1lVGl0bGVGYWN0b3J5LFxuICBBbmltYXRpb25Db250cm9sRmFjdG9yeVxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGltZVJhbmdlU2xpZGVyRmFjdG9yeShcbiAgUGxheWJhY2tDb250cm9sczogUmV0dXJuVHlwZTx0eXBlb2YgUGxheWJhY2tDb250cm9sc0ZhY3Rvcnk+LFxuICBSYW5nZVNsaWRlcjogUmV0dXJuVHlwZTx0eXBlb2YgUmFuZ2VTbGlkZXJGYWN0b3J5PixcbiAgVGltZVNsaWRlck1hcmtlcjogUmV0dXJuVHlwZTx0eXBlb2YgVGltZVNsaWRlck1hcmtlckZhY3Rvcnk+LFxuICBUaW1lUmFuZ2VTbGlkZXJUaW1lVGl0bGU6IFJldHVyblR5cGU8dHlwZW9mIFRpbWVSYW5nZVNsaWRlclRpbWVUaXRsZUZhY3Rvcnk+LFxuICBBbmltYXRpb25Db250cm9sOiBSZXR1cm5UeXBlPHR5cGVvZiBBbmltYXRpb25Db250cm9sRmFjdG9yeT5cbikge1xuICBjb25zdCBUaW1lUmFuZ2VTbGlkZXI6IFJlYWN0LkZDPFRpbWVSYW5nZVNsaWRlclByb3BzPiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkb21haW4sXG4gICAgICB2YWx1ZSxcbiAgICAgIGlzRW5sYXJnZWQsXG4gICAgICBpc01pbmlmaWVkLFxuICAgICAgaGlkZVRpbWVUaXRsZSxcbiAgICAgIGlzQW5pbWF0aW5nLFxuICAgICAgcmVzZXRBbmltYXRpb24sXG4gICAgICB0aW1lRm9ybWF0LFxuICAgICAgdGltZXpvbmUsXG4gICAgICBoaXN0b2dyYW0sXG4gICAgICBwbG90VHlwZSxcbiAgICAgIGxpbmVDaGFydCxcbiAgICAgIHN0ZXAsXG4gICAgICBpc0FuaW1hdGFibGUsXG4gICAgICBzcGVlZCxcbiAgICAgIGFuaW1hdGlvbldpbmRvdyxcbiAgICAgIHVwZGF0ZUFuaW1hdGlvblNwZWVkLFxuICAgICAgc2V0RmlsdGVyQW5pbWF0aW9uV2luZG93LFxuICAgICAgdG9nZ2xlQW5pbWF0aW9uLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICB0aW1lbGluZVxuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IHRocm90dGxlZE9uY2hhbmdlID0gdXNlTWVtbygoKSA9PiB0aHJvdHRsZShvbkNoYW5nZSwgMjApLCBbb25DaGFuZ2VdKTtcblxuICAgIGNvbnN0IHN0eWxlID0gdXNlTWVtbyhcbiAgICAgICgpID0+ICh7XG4gICAgICAgIHdpZHRoOiBpc0VubGFyZ2VkID8gYGNhbGMoMTAwJSAtICR7YW5pbWF0aW9uQ29udHJvbFdpZHRofXB4KWAgOiAnMTAwJSdcbiAgICAgIH0pLFxuICAgICAgW2lzRW5sYXJnZWRdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpbWUtcmFuZ2Utc2xpZGVyXCI+XG4gICAgICAgIHshaGlkZVRpbWVUaXRsZSAmJiBpc0VubGFyZ2VkID8gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGltZS1yYW5nZS1zbGlkZXJfX3RpdGxlXCIgc3R5bGU9e3N0eWxlfT5cbiAgICAgICAgICAgIDxUaW1lUmFuZ2VTbGlkZXJUaW1lVGl0bGVcbiAgICAgICAgICAgICAgdGltZUZvcm1hdD17dGltZUZvcm1hdH1cbiAgICAgICAgICAgICAgdGltZXpvbmU9e3RpbWV6b25lfVxuICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICAgIGlzRW5sYXJnZWQ9e2lzRW5sYXJnZWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPFN0eWxlZFNsaWRlckNvbnRhaW5lciBjbGFzc05hbWU9XCJ0aW1lLXJhbmdlLXNsaWRlcl9fY29udGFpbmVyXCIgaXNFbmxhcmdlZD17aXNFbmxhcmdlZH0+XG4gICAgICAgICAgeyFpc01pbmlmaWVkID8gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aW1lbGluZS1jb250YWluZXJcIiBzdHlsZT17c3R5bGV9PlxuICAgICAgICAgICAgICA8UmFuZ2VTbGlkZXJcbiAgICAgICAgICAgICAgICByYW5nZT17ZG9tYWlufVxuICAgICAgICAgICAgICAgIHZhbHVlMD17dmFsdWVbMF19XG4gICAgICAgICAgICAgICAgdmFsdWUxPXt2YWx1ZVsxXX1cbiAgICAgICAgICAgICAgICBoaXN0b2dyYW09e2hpc3RvZ3JhbX1cbiAgICAgICAgICAgICAgICBsaW5lQ2hhcnQ9e2xpbmVDaGFydH1cbiAgICAgICAgICAgICAgICBwbG90VHlwZT17cGxvdFR5cGV9XG4gICAgICAgICAgICAgICAgaXNFbmxhcmdlZD17aXNFbmxhcmdlZH1cbiAgICAgICAgICAgICAgICBzaG93SW5wdXQ9e2ZhbHNlfVxuICAgICAgICAgICAgICAgIHN0ZXA9e3N0ZXB9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3Rocm90dGxlZE9uY2hhbmdlfVxuICAgICAgICAgICAgICAgIHhBeGlzPXtUaW1lU2xpZGVyTWFya2VyfVxuICAgICAgICAgICAgICAgIHRpbWV6b25lPXt0aW1lem9uZX1cbiAgICAgICAgICAgICAgICB0aW1lRm9ybWF0PXt0aW1lRm9ybWF0fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxBbmltYXRpb25Db250cm9sXG4gICAgICAgICAgICAgIHN0eWxlPXtBTklNQVRJT05fQ09OVFJPTF9TVFlMRX1cbiAgICAgICAgICAgICAgaXNBbmltYXRhYmxlPXtpc0FuaW1hdGFibGV9XG4gICAgICAgICAgICAgIGlzQW5pbWF0aW5nPXtpc0FuaW1hdGluZ31cbiAgICAgICAgICAgICAgcmVzZXRBbmltYXRpb249e3Jlc2V0QW5pbWF0aW9ufVxuICAgICAgICAgICAgICB0b2dnbGVBbmltYXRpb249e3RvZ2dsZUFuaW1hdGlvbn1cbiAgICAgICAgICAgICAgdXBkYXRlQW5pbWF0aW9uU3BlZWQ9e3VwZGF0ZUFuaW1hdGlvblNwZWVkfVxuICAgICAgICAgICAgICBzZXRUaW1lbGluZVZhbHVlPXt0aHJvdHRsZWRPbmNoYW5nZX1cbiAgICAgICAgICAgICAgc2V0QW5pbWF0aW9uV2luZG93PXtzZXRGaWx0ZXJBbmltYXRpb25XaW5kb3d9XG4gICAgICAgICAgICAgIHNob3dUaW1lRGlzcGxheT17ZmFsc2V9XG4gICAgICAgICAgICAgIHRpbWVsaW5lPXt0aW1lbGluZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7aXNFbmxhcmdlZCAmJiAhaXNNaW5pZmllZCA/IChcbiAgICAgICAgICAgIDxQbGF5YmFja0NvbnRyb2xzXG4gICAgICAgICAgICAgIGlzQW5pbWF0YWJsZT17aXNBbmltYXRhYmxlfVxuICAgICAgICAgICAgICB3aWR0aD17YW5pbWF0aW9uQ29udHJvbFdpZHRofVxuICAgICAgICAgICAgICBzcGVlZD17c3BlZWR9XG4gICAgICAgICAgICAgIGFuaW1hdGlvbldpbmRvdz17YW5pbWF0aW9uV2luZG93fVxuICAgICAgICAgICAgICB1cGRhdGVBbmltYXRpb25TcGVlZD17dXBkYXRlQW5pbWF0aW9uU3BlZWR9XG4gICAgICAgICAgICAgIHNldEZpbHRlckFuaW1hdGlvbldpbmRvdz17c2V0RmlsdGVyQW5pbWF0aW9uV2luZG93fVxuICAgICAgICAgICAgICBwYXVzZUFuaW1hdGlvbj17dG9nZ2xlQW5pbWF0aW9ufVxuICAgICAgICAgICAgICByZXNldEFuaW1hdGlvbj17cmVzZXRBbmltYXRpb259XG4gICAgICAgICAgICAgIGlzQW5pbWF0aW5nPXtpc0FuaW1hdGluZ31cbiAgICAgICAgICAgICAgc3RhcnRBbmltYXRpb249e3RvZ2dsZUFuaW1hdGlvbn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvU3R5bGVkU2xpZGVyQ29udGFpbmVyPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gUmVhY3QubWVtbyhUaW1lUmFuZ2VTbGlkZXIpO1xufVxuIl19