"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reselect = require("reselect");

var _styledComponents = require("../common/styled-components");

var _mapStyleSelector = _interopRequireDefault(require("./map-style-panel/map-style-selector"));

var _mapLayerSelector = _interopRequireDefault(require("./map-style-panel/map-layer-selector"));

var _panelTitle = _interopRequireDefault(require("../side-panel/panel-title"));

var _icons = require("../common/icons");

var _reactIntl = require("react-intl");

var _localization = require("@kepler.gl/localization");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

MapManagerFactory.deps = [_mapStyleSelector["default"], _mapLayerSelector["default"], _panelTitle["default"]];

function MapManagerFactory(MapStyleSelector, LayerGroupSelector, PanelTitle) {
  var MapManager = /*#__PURE__*/function (_Component) {
    (0, _inherits2["default"])(MapManager, _Component);

    var _super = _createSuper(MapManager);

    function MapManager() {
      var _this;

      (0, _classCallCheck2["default"])(this, MapManager);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
        isSelecting: false
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_toggleSelecting", function () {
        _this.setState({
          isSelecting: !_this.state.isSelecting
        });
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_selectStyle", function (val) {
        var mapStyleActions = _this.props.mapStyleActions;
        var mapStyleChange = mapStyleActions.mapStyleChange;
        mapStyleChange(val);

        _this._toggleSelecting();
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getCustomMapStylesActions", (0, _reselect.createSelector)(function (props) {
        return props.mapStyle.mapStyles;
      }, function (props) {
        return props.mapStyleActions;
      }, function (mapStyles, mapStyleActions) {
        var actionsPerCustomStyle = {};
        Object.values(mapStyles).filter(function (mapStyle) {
          return Boolean(mapStyle.custom);
        }).forEach(function (_ref) {
          var id = _ref.id;
          actionsPerCustomStyle[id] = [{
            id: "remove-map-style-".concat(id),
            IconComponent: _icons.Trash,
            tooltip: 'tooltip.removeBaseMapStyle',
            onClick: function onClick() {
              return mapStyleActions.removeCustomMapStyle({
                id: id
              });
            }
          }];
        });
        return actionsPerCustomStyle;
      }));
      return _this;
    }

    (0, _createClass2["default"])(MapManager, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            mapStyle = _this$props.mapStyle,
            intl = _this$props.intl,
            mapStyleActions = _this$props.mapStyleActions,
            showAddMapStyleModal = _this$props.showAddMapStyleModal,
            panelMetadata = _this$props.panelMetadata;
        var currentStyle = mapStyle.mapStyles[mapStyle.styleType] || {};
        var editableLayers = currentStyle.layerGroups || [];
        var customMapStylesActions = this.getCustomMapStylesActions(this.props);
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: "map-style-panel"
        }, /*#__PURE__*/_react["default"].createElement(PanelTitle, {
          className: "map-manager-title",
          title: intl.formatMessage({
            id: panelMetadata.label
          })
        }, /*#__PURE__*/_react["default"].createElement(_styledComponents.Button, {
          className: "add-map-style-button",
          onClick: showAddMapStyleModal
        }, /*#__PURE__*/_react["default"].createElement(_icons.Add, {
          height: "12px"
        }), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
          id: 'mapManager.addMapStyle'
        }))), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(MapStyleSelector, {
          mapStyle: mapStyle,
          isSelecting: this.state.isSelecting,
          onChange: this._selectStyle,
          toggleActive: this._toggleSelecting,
          customMapStylesActions: customMapStylesActions
        }), editableLayers.length ? /*#__PURE__*/_react["default"].createElement(LayerGroupSelector, {
          layers: mapStyle.visibleLayerGroups,
          editableLayers: editableLayers,
          topLayers: mapStyle.topLayerGroups,
          onChange: mapStyleActions.mapConfigChange,
          threeDBuildingColor: mapStyle.threeDBuildingColor,
          on3dBuildingColorChange: mapStyleActions.set3dBuildingColor,
          backgroundColor: mapStyle.backgroundColor,
          onBackgroundColorChange: mapStyleActions.setBackgroundColor
        }) : null));
      }
    }]);
    return MapManager;
  }(_react.Component);

  return (0, _reactIntl.injectIntl)(MapManager);
}

var _default = MapManagerFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,