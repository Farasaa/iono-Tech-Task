import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";

function _templateObject5() {
  const data = _taggedTemplateLiteral(["\n  display: grid;\n  grid-template-columns: 88px auto;\n  grid-template-rows: repeat(\n    ", ",\n    ", "\n  );\n  grid-row-gap: ", "px;\n"]);

  _templateObject5 = function () {
    return data;
  };

  return data;
}

function _templateObject4() {
  const data = _taggedTemplateLiteral(["\n  align-self: center;\n  color: ", ";\n  font-weight: 500;\n  font-size: 11px;\n  padding: 0 12px;\n"]);

  _templateObject4 = function () {
    return data;
  };

  return data;
}

function _templateObject3() {
  const data = _taggedTemplateLiteral(["\n  align-self: center;\n  color: ", ";\n  font-weight: 400;\n  font-size: 11px;\n"]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  margin-right: 24px;\n  margin-left: 24px;\n"]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n  align-self: center;\n  color: ", ";\n  font-weight: 500;\n  font-size: 13px;\n  margin-top: ", ";\n  margin-bottom: ", "px;\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

import React from 'react';
import styled, { withTheme } from 'styled-components';
import { DEFAULT_PADDING, DEFAULT_ROW_GAP, DEFAULT_FILENAME, FORMATS, RESOLUTIONS } from './constants';
import { msConversion, estimateFileSize } from './utils';
import { WithKeplerUI } from '../inject-kepler';
const StyledSection = styled.div(_templateObject(), props => props.theme.labelColor, props => props.top ? '0px' : "".concat(DEFAULT_PADDING, "px"), DEFAULT_ROW_GAP);
const SliderWrapper = styled.div(_templateObject2());
const StyledLabelCell = styled.div(_templateObject3(), props => props.theme.labelColor);
const StyledValueCell = styled.div(_templateObject4(), props => props.theme.textColor);
const InputGrid = styled.div(_templateObject5(), props => props.rows, props => props.rowHeight ? props.rowHeight : '34px', DEFAULT_ROW_GAP);

const getOptionValue = r => r.value;

const displayOption = r => r.label;

const getSelectedItems = (options, value) => options.find(o => o.value === value);

const ExportVideoPanelSettings = ({
  setMediaType,
  setCameraPreset,
  setFileName,
  setResolution,
  settingsData,
  durationMs,
  frameRate,
  resolution,
  mediaType,
  setDuration
}) => React.createElement(WithKeplerUI, null, ({
  Input,
  ItemSelector,
  Slider
}) => React.createElement("div", null, React.createElement(StyledSection, {
  top: true
}, "Export Settings"), React.createElement(InputGrid, {
  rows: 5
}, React.createElement(StyledLabelCell, null, "File Name"), React.createElement(Input, {
  value: settingsData.fileName,
  placeholder: DEFAULT_FILENAME,
  onChange: e => setFileName(e.target.value)
}), React.createElement(StyledLabelCell, null, "Media Type"), React.createElement(ItemSelector, {
  selectedItems: getSelectedItems(FORMATS, settingsData.mediaType),
  options: FORMATS,
  getOptionValue: getOptionValue,
  displayOption: displayOption,
  multiSelect: false,
  searchable: false,
  onChange: setMediaType
}), React.createElement(StyledLabelCell, null, "Resolution"), React.createElement(ItemSelector, {
  selectedItems: getSelectedItems(RESOLUTIONS, settingsData.resolution),
  options: RESOLUTIONS,
  getOptionValue: getOptionValue,
  displayOption: displayOption,
  multiSelect: false,
  searchable: false,
  onChange: setResolution
}), React.createElement(StyledLabelCell, null, "Duration"), React.createElement(StyledValueCell, null, React.createElement(SliderWrapper, {
  style: {
    width: '100%',
    marginLeft: '0px'
  },
  className: "modal-duration__slider"
}, React.createElement(Slider, {
  showValues: false,
  enableBarDrag: true,
  isRanged: false,
  value1: durationMs,
  step: 100,
  minValue: 100,
  maxValue: 10000,
  style: {
    width: '70px'
  },
  onSlider1Change: val => {
    setDuration(val);
  }
}), React.createElement("div", {
  style: {
    alignSelf: 'center',
    paddingLeft: '8px',
    width: '56px'
  }
}, msConversion(durationMs)))), React.createElement(StyledLabelCell, null, "File Size"), React.createElement(StyledValueCell, null, estimateFileSize(frameRate, resolution, durationMs, mediaType))), React.createElement(StyledSection, null, "Video Effects"), React.createElement(InputGrid, {
  rows: 1
}, React.createElement(StyledLabelCell, null, "Camera"), React.createElement(ItemSelector, {
  selectedItems: settingsData.cameraPreset,
  options: ['None', 'Orbit (90ยบ)', 'Orbit (180ยบ)', 'Orbit (360ยบ)', 'North to South', 'South to North', 'East to West', 'West to East', 'Zoom Out', 'Zoom In'],
  multiSelect: false,
  searchable: false,
  onChange: setCameraPreset
}))));

export default withTheme(ExportVideoPanelSettings);
//# sourceMappingURL=export-video-panel-settings.js.map