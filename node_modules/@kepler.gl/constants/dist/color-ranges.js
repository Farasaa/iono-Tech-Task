"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_COLOR_RANGE = exports.COLOR_RANGES = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _colorbrewer = _interopRequireDefault(require("colorbrewer"));

var _customColorRanges = require("./custom-color-ranges");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Add colorbrewer color schemes (Data Science requirement)
// See http://colorbrewer2.org/
var colorBrewerMap = Object.entries(_colorbrewer["default"].schemeGroups).reduce(function (accu, _ref) {
  var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
      type = _ref2[0],
      palettes = _ref2[1];

  return _objectSpread(_objectSpread({}, accu), palettes.reduce(function (group, name) {
    return _objectSpread(_objectSpread({}, group), {}, (0, _defineProperty2["default"])({}, name, type));
  }, {}));
}, {});
var colorRanges = (0, _toConsumableArray2["default"])(_customColorRanges.VizColorPalette);

for (var _i = 0, _Object$entries = Object.entries(_colorbrewer["default"]); _i < _Object$entries.length; _i++) {
  var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
      keyName = _Object$entries$_i[0],
      colorScheme = _Object$entries$_i[1];

  if (keyName !== 'schemeGroups') {
    for (var _i2 = 0, _Object$entries2 = Object.entries(colorScheme); _i2 < _Object$entries2.length; _i2++) {
      var _Object$entries2$_i = (0, _slicedToArray2["default"])(_Object$entries2[_i2], 2),
          lenKey = _Object$entries2$_i[0],
          colors = _Object$entries2$_i[1];

      colorRanges.push({
        name: "ColorBrewer ".concat(keyName, "-").concat(lenKey),
        type: colorBrewerMap[keyName],
        category: 'ColorBrewer',
        colors: colors
      });
    }
  }
}

var COLOR_RANGES = colorRanges;
exports.COLOR_RANGES = COLOR_RANGES;
var DEFAULT_COLOR_RANGE = colorRanges.find(function (_ref3) {
  var name = _ref3.name;
  return name === 'Global Warming';
}) || {
  name: 'Global Warming',
  type: 'SEQ',
  category: 'Uber',
  colors: ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']
};
exports.DEFAULT_COLOR_RANGE = DEFAULT_COLOR_RANGE;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb2xvci1yYW5nZXMudHMiXSwibmFtZXMiOlsiY29sb3JCcmV3ZXJNYXAiLCJPYmplY3QiLCJlbnRyaWVzIiwiY29sb3JicmV3ZXIiLCJzY2hlbWVHcm91cHMiLCJyZWR1Y2UiLCJhY2N1IiwidHlwZSIsInBhbGV0dGVzIiwiZ3JvdXAiLCJuYW1lIiwiY29sb3JSYW5nZXMiLCJWaXpDb2xvclBhbGV0dGUiLCJrZXlOYW1lIiwiY29sb3JTY2hlbWUiLCJsZW5LZXkiLCJjb2xvcnMiLCJwdXNoIiwiY2F0ZWdvcnkiLCJDT0xPUl9SQU5HRVMiLCJERUZBVUxUX0NPTE9SX1JBTkdFIiwiZmluZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBRUE7Ozs7OztBQWdCQTtBQUNBO0FBRUEsSUFBTUEsY0FBYyxHQUFHQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsd0JBQVlDLFlBQTNCLEVBQXlDQyxNQUF6QyxDQUNyQixVQUFDQyxJQUFEO0FBQUE7QUFBQSxNQUFRQyxJQUFSO0FBQUEsTUFBY0MsUUFBZDs7QUFBQSx5Q0FDS0YsSUFETCxHQUVLRSxRQUFRLENBQUNILE1BQVQsQ0FDRCxVQUFDSSxLQUFELEVBQVFDLElBQVI7QUFBQSwyQ0FDS0QsS0FETCw0Q0FFR0MsSUFGSCxFQUVVSCxJQUZWO0FBQUEsR0FEQyxFQUtELEVBTEMsQ0FGTDtBQUFBLENBRHFCLEVBV3JCLEVBWHFCLENBQXZCO0FBY0EsSUFBTUksV0FBeUIsdUNBQU9DLGtDQUFQLENBQS9COztBQUVBLG1DQUFxQ1gsTUFBTSxDQUFDQyxPQUFQLENBQWVDLHVCQUFmLENBQXJDLHFDQUFrRTtBQUFBO0FBQUEsTUFBdERVLE9BQXNEO0FBQUEsTUFBN0NDLFdBQTZDOztBQUNoRSxNQUFJRCxPQUFPLEtBQUssY0FBaEIsRUFBZ0M7QUFDOUIseUNBQStCWixNQUFNLENBQUNDLE9BQVAsQ0FBZVksV0FBZixDQUEvQix3Q0FBbUU7QUFBQTtBQUFBLFVBQXZEQyxNQUF1RDtBQUFBLFVBQS9DQyxNQUErQzs7QUFDakVMLE1BQUFBLFdBQVcsQ0FBQ00sSUFBWixDQUFpQjtBQUNmUCxRQUFBQSxJQUFJLHdCQUFpQkcsT0FBakIsY0FBNEJFLE1BQTVCLENBRFc7QUFFZlIsUUFBQUEsSUFBSSxFQUFFUCxjQUFjLENBQUNhLE9BQUQsQ0FGTDtBQUdmSyxRQUFBQSxRQUFRLEVBQUUsYUFISztBQUlmRixRQUFBQSxNQUFNLEVBQUVBO0FBSk8sT0FBakI7QUFNRDtBQUNGO0FBQ0Y7O0FBRU0sSUFBTUcsWUFBWSxHQUFHUixXQUFyQjs7QUFFQSxJQUFNUyxtQkFBbUIsR0FBR1QsV0FBVyxDQUFDVSxJQUFaLENBQWlCO0FBQUEsTUFBRVgsSUFBRixTQUFFQSxJQUFGO0FBQUEsU0FBWUEsSUFBSSxLQUFLLGdCQUFyQjtBQUFBLENBQWpCLEtBQTJEO0FBQzVGQSxFQUFBQSxJQUFJLEVBQUUsZ0JBRHNGO0FBRTVGSCxFQUFBQSxJQUFJLEVBQUUsS0FGc0Y7QUFHNUZXLEVBQUFBLFFBQVEsRUFBRSxNQUhrRjtBQUk1RkYsRUFBQUEsTUFBTSxFQUFFLENBQUMsU0FBRCxFQUFZLFNBQVosRUFBdUIsU0FBdkIsRUFBa0MsU0FBbEMsRUFBNkMsU0FBN0MsRUFBd0QsU0FBeEQ7QUFKb0YsQ0FBdkYiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgY29sb3JicmV3ZXIgZnJvbSAnY29sb3JicmV3ZXInO1xuaW1wb3J0IHtIZXhDb2xvcn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge1ZpekNvbG9yUGFsZXR0ZX0gZnJvbSAnLi9jdXN0b20tY29sb3ItcmFuZ2VzJztcblxuZXhwb3J0IHR5cGUgQ29sb3JNYXAgPSBbc3RyaW5nW10gfCBzdHJpbmcgfCBudW1iZXIgfCBudWxsLCBIZXhDb2xvcl1bXTtcbi8vIEtleSBpcyBIZXhDb2xvciBidXQgYXMga2V5IHdlIGNhbiB1c2Ugb25seSBzdHJpbmdcbmV4cG9ydCB0eXBlIENvbG9yTGVnZW5kcyA9IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9O1xuXG5leHBvcnQgdHlwZSBDb2xvclJhbmdlID0ge1xuICBuYW1lPzogc3RyaW5nO1xuICB0eXBlPzogc3RyaW5nO1xuICBjYXRlZ29yeT86IHN0cmluZztcbiAgY29sb3JzOiBIZXhDb2xvcltdO1xuICByZXZlcnNlZD86IGJvb2xlYW47XG4gIGNvbG9yTWFwPzogQ29sb3JNYXA7XG4gIGNvbG9yTGVnZW5kcz86IENvbG9yTGVnZW5kcztcbn07XG5cbi8vIEFkZCBjb2xvcmJyZXdlciBjb2xvciBzY2hlbWVzIChEYXRhIFNjaWVuY2UgcmVxdWlyZW1lbnQpXG4vLyBTZWUgaHR0cDovL2NvbG9yYnJld2VyMi5vcmcvXG5cbmNvbnN0IGNvbG9yQnJld2VyTWFwID0gT2JqZWN0LmVudHJpZXMoY29sb3JicmV3ZXIuc2NoZW1lR3JvdXBzKS5yZWR1Y2UoXG4gIChhY2N1LCBbdHlwZSwgcGFsZXR0ZXNdOiBbc3RyaW5nLCBhbnldKSA9PiAoe1xuICAgIC4uLmFjY3UsXG4gICAgLi4ucGFsZXR0ZXMucmVkdWNlKFxuICAgICAgKGdyb3VwLCBuYW1lKSA9PiAoe1xuICAgICAgICAuLi5ncm91cCxcbiAgICAgICAgW25hbWVdOiB0eXBlXG4gICAgICB9KSxcbiAgICAgIHt9XG4gICAgKVxuICB9KSxcbiAge31cbik7XG5cbmNvbnN0IGNvbG9yUmFuZ2VzOiBDb2xvclJhbmdlW10gPSBbLi4uVml6Q29sb3JQYWxldHRlXTtcblxuZm9yIChjb25zdCBba2V5TmFtZSwgY29sb3JTY2hlbWVdIG9mIE9iamVjdC5lbnRyaWVzKGNvbG9yYnJld2VyKSkge1xuICBpZiAoa2V5TmFtZSAhPT0gJ3NjaGVtZUdyb3VwcycpIHtcbiAgICBmb3IgKGNvbnN0IFtsZW5LZXksIGNvbG9yc10gb2YgT2JqZWN0LmVudHJpZXMoY29sb3JTY2hlbWUgYXMgYW55KSkge1xuICAgICAgY29sb3JSYW5nZXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGBDb2xvckJyZXdlciAke2tleU5hbWV9LSR7bGVuS2V5fWAsXG4gICAgICAgIHR5cGU6IGNvbG9yQnJld2VyTWFwW2tleU5hbWVdLFxuICAgICAgICBjYXRlZ29yeTogJ0NvbG9yQnJld2VyJyxcbiAgICAgICAgY29sb3JzOiBjb2xvcnMgYXMgSGV4Q29sb3JbXVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDT0xPUl9SQU5HRVMgPSBjb2xvclJhbmdlcztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ09MT1JfUkFOR0UgPSBjb2xvclJhbmdlcy5maW5kKCh7bmFtZX0pID0+IG5hbWUgPT09ICdHbG9iYWwgV2FybWluZycpIHx8IHtcbiAgbmFtZTogJ0dsb2JhbCBXYXJtaW5nJyxcbiAgdHlwZTogJ1NFUScsXG4gIGNhdGVnb3J5OiAnVWJlcicsXG4gIGNvbG9yczogWycjNUExODQ2JywgJyM5MDBDM0YnLCAnI0M3MDAzOScsICcjRTM2MTFDJywgJyNGMTkyMEUnLCAnI0ZGQzMwMCddXG59O1xuIl19