"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.factorInterpolator = factorInterpolator;
exports.merge = merge;
exports.sanitizeEasings = sanitizeEasings;
exports.sanitizeInterpolators = sanitizeInterpolators;
exports.sanitizeTimings = sanitizeTimings;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _popmotion = require("popmotion");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function sanitizeInterpolators(keyframes, interpolators) {
  var _interpolators = interpolators;

  if (typeof interpolators === 'string') {
    _interpolators = [];

    for (var idx = 0; idx < keyframes.length - 1; idx++) {
      _interpolators.push(interpolators);
    }
  }

  if (keyframes.length - 1 !== _interpolators.length) {
    throw new Error('There must be one fewer interpolator than keyframes');
  }

  return _interpolators;
}

function sanitizeEasings(keyframes, easings) {
  var _easings = easings;

  if (typeof easings === 'function') {
    _easings = [];

    for (var idx = 0; idx < keyframes.length - 1; idx++) {
      _easings.push(easings);
    }
  }

  if (keyframes.length - 1 !== _easings.length) {
    throw new Error('There must be one fewer easing than keyframes');
  }

  return _easings;
}

function sanitizeTimings(keyframes, timings) {
  var _timings = timings;

  if (typeof timings === 'number') {
    _timings = [];
    var time = 0;

    for (var idx = 0; idx < keyframes.length; idx++) {
      _timings.push(time);

      time += timings;
    }
  }

  if (keyframes.length !== _timings.length) {
    throw new Error('There must be same number of timings as keyframes');
  }

  return _timings;
}

function merge(timings, keyframes, easings, interpolators) {
  var _keyframes = keyframes.map(function (keyframe, idx) {
    if (idx === 0) {
      return [timings[idx], _objectSpread(_objectSpread({}, keyframe), {}, {
        ease: undefined,
        interpolate: undefined
      })];
    }

    return [timings[idx], _objectSpread(_objectSpread({}, keyframe), {}, {
      ease: easings[idx - 1],
      interpolate: interpolators[idx - 1]
    })];
  });

  return _keyframes;
}

function factorInterpolator(start, end) {
  var ease = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _popmotion.linear;
  return (0, _popmotion.interpolate)([0, 1], [start, end], {
    ease: ease
  });
}
//# sourceMappingURL=utils.js.map