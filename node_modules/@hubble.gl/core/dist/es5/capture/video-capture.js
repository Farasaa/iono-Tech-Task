"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VideoCapture = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _downloadjs = _interopRequireDefault(require("downloadjs"));

var _encoders = require("../encoders");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var VideoCapture = function () {
  function VideoCapture() {
    (0, _classCallCheck2.default)(this, VideoCapture);
    (0, _defineProperty2.default)(this, "recording", void 0);
    (0, _defineProperty2.default)(this, "capturing", void 0);
    (0, _defineProperty2.default)(this, "timeMs", void 0);
    (0, _defineProperty2.default)(this, "timecode", void 0);
    (0, _defineProperty2.default)(this, "encoder", void 0);
    (0, _defineProperty2.default)(this, "filename", void 0);
    this.recording = false;
    this.capturing = false;
    this.timeMs = 0;
    this.timecode = null;
    this.encoder = null;
    this.filename = null;
    this._getNextTimeMs = this._getNextTimeMs.bind(this);
    this._step = this._step.bind(this);
    this._capture = this._capture.bind(this);
    this.capture = this.capture.bind(this);
    this.render = this.render.bind(this);
    this.download = this.download.bind(this);
    this.stop = this.stop.bind(this);
    this._save = this._save.bind(this);
  }

  (0, _createClass2.default)(VideoCapture, [{
    key: "isRecording",
    value: function isRecording() {
      return this.recording;
    }
  }, {
    key: "render",
    value: function render(_ref) {
      var Encoder = _ref.Encoder,
          formatConfigs = _ref.formatConfigs,
          timecode = _ref.timecode,
          _ref$filename = _ref.filename,
          filename = _ref$filename === void 0 ? undefined : _ref$filename,
          _ref$onStop = _ref.onStop,
          onStop = _ref$onStop === void 0 ? undefined : _ref$onStop;

      if (!this.isRecording()) {
        console.time('render');
        this.filename = this._sanitizeFilename(filename);
        this.timecode = this._sanatizeTimecode(timecode);
        console.log("Starting recording for ".concat(this.timecode.duration, "ms."));
        this.onStop = onStop;
        this.encoder = new Encoder(_objectSpread(_objectSpread({}, formatConfigs), {}, {
          framerate: this.timecode.framerate
        }));
        this.recording = true;
        this.encoder.start();
      }
    }
  }, {
    key: "capture",
    value: function capture(canvas, proceedToNextFrame) {
      var _this = this;

      if (!this.capturing && this.isRecording()) {
        this.capturing = true;

        this._capture(canvas).then(function (data) {
          _this.capturing = false;

          if (data.kind === 'next-frame') {
            proceedToNextFrame(data.nextTimeMs);
          } else if (data.kind === 'stop') {
            _this.onStop();
          } else {
            console.log(data);
          }
        });
      }
    }
  }, {
    key: "stop",
    value: function stop(_ref2) {
      var _this2 = this;

      var _ref2$onComplete = _ref2.onComplete,
          onComplete = _ref2$onComplete === void 0 ? undefined : _ref2$onComplete,
          _ref2$onSave = _ref2.onSave,
          onSave = _ref2$onSave === void 0 ? undefined : _ref2$onSave,
          _ref2$onStopped = _ref2.onStopped,
          onStopped = _ref2$onStopped === void 0 ? undefined : _ref2$onStopped,
          _ref2$abort = _ref2.abort,
          abort = _ref2$abort === void 0 ? false : _ref2$abort;

      if (this.isRecording()) {
        console.log("Stopped recording. Recorded for ".concat(this.timeMs, "ms."));
        this.recording = false;
        this.capturing = false;

        if (onStopped) {
          onStopped();
        }

        console.timeEnd('render');

        var finish = function finish() {
          if (onComplete) {
            onComplete();
          }

          _this2.timecode = null;
          _this2.onStop = undefined;
        };

        if (!abort) {
          this._save(onSave).then(finish);
        }

        finish();
      }
    }
  }, {
    key: "download",
    value: function download(blob) {
      if (blob) {
        (0, _downloadjs.default)(blob, this.filename + this.encoder.extension, this.encoder.mimeType);
      }

      return false;
    }
  }, {
    key: "_save",
    value: function () {
      var _save2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(callback) {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!callback) {
                  callback = this.download;
                }

                console.time('save');
                _context.next = 4;
                return this.encoder.save().then(callback).then(function () {
                  return console.timeEnd('save');
                });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _save(_x) {
        return _save2.apply(this, arguments);
      }

      return _save;
    }()
  }, {
    key: "_sanitizeFilename",
    value: function _sanitizeFilename(filename) {
      if (!filename) {
        filename = (0, _utils.guid)();
      }

      return filename;
    }
  }, {
    key: "_sanatizeTimecode",
    value: function _sanatizeTimecode(timecode) {
      var parsedTimecode = _objectSpread({
        duration: undefined
      }, timecode);

      if (!parsedTimecode.start) {
        parsedTimecode.start = 0;
      }

      this.timeMs = parsedTimecode.start;

      if (!parsedTimecode.duration) {
        parsedTimecode.duration = parsedTimecode.end - parsedTimecode.start;
      }

      if (parsedTimecode.duration <= 0) {
        throw new Error("Invalid recording length (".concat(parsedTimecode.duration, "ms).  Must be greater than 0."));
      }

      return parsedTimecode;
    }
  }, {
    key: "_capture",
    value: function () {
      var _capture2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(canvas) {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this.isRecording()) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", {
                  kind: 'error',
                  error: 'NOT_RECORDING'
                });

              case 2:
                _context2.next = 4;
                return this.encoder.add(canvas).then(this._step).catch(function (reason) {
                  return {
                    kind: 'error',
                    error: reason
                  };
                });

              case 4:
                return _context2.abrupt("return", _context2.sent);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _capture(_x2) {
        return _capture2.apply(this, arguments);
      }

      return _capture;
    }()
  }, {
    key: "_step",
    value: function _step() {
      var nextTimeMs = this._getNextTimeMs();

      if (nextTimeMs > this.timecode.end) {
        return {
          kind: 'stop'
        };
      }

      this.timeMs = nextTimeMs;
      return {
        kind: 'next-frame',
        nextTimeMs: nextTimeMs
      };
    }
  }, {
    key: "_getNextTimeMs",
    value: function _getNextTimeMs() {
      var frameLengthMs = Math.floor(1000.0 / this.timecode.framerate);
      return this.timeMs + frameLengthMs;
    }
  }]);
  return VideoCapture;
}();

exports.VideoCapture = VideoCapture;
//# sourceMappingURL=video-capture.js.map