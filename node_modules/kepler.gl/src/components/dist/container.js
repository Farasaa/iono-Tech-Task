"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContainerFactory = ContainerFactory;
exports.injectComponents = injectComponents;
exports["default"] = exports.appInjector = exports.ERROR_MSG = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _lodash = _interopRequireDefault(require("lodash.memoize"));

var _window = require("global/window");

var _injector = require("./injector");

var _keplerGl = _interopRequireDefault(require("./kepler-gl"));

var _actions = require("@kepler.gl/actions");

var _utils = require("@kepler.gl/utils");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ERROR_MSG = {
  noState: "kepler.gl state does not exist. " + "You might forget to mount keplerGlReducer in your root reducer." + "If it is not mounted as state.keplerGl by default, you need to provide getState as a prop"
};
exports.ERROR_MSG = ERROR_MSG;

var mapStateToProps = function mapStateToProps(state, props) {
  return _objectSpread({
    state: state
  }, props);
};

var dispatchToProps = function dispatchToProps(dispatch) {
  return {
    dispatch: dispatch
  };
};

var connector = (0, _reactRedux.connect)(mapStateToProps, dispatchToProps);
ContainerFactory.deps = [_keplerGl["default"]];

function ContainerFactory(KeplerGl) {
  /** @lends KeplerGl */

  /**
    * Main Kepler.gl Component
    * @param {Object} props
    *
    * @param {string} props.id - _required_
    *
    * - Default: `map`
    * The id of this KeplerGl instance. `id` is required if you have multiple
    * KeplerGl instances in your app. It defines the prop name of the KeplerGl state that is
    * stored in the KeplerGl reducer. For example, the state of the KeplerGl component with id `foo` is
    * stored in `state.keplerGl.foo`.
    *
    * In case you create multiple kepler.gl instances using the same id, the kepler.gl state defined by the entry will be
    * overridden by the latest instance and reset to a blank state.
    * @param {string} props.mapboxApiAccessToken - _required_
    * @param {string} props.mapboxApiUrl - _optional_
    * @param {Boolean} props.mapStylesReplaceDefault - _optional_
    * @param {object} props.initialUiState - _optional_
     * You can create a free account at [www.mapbox.com](www.mapbox.com) and create a token at
    * [www.mapbox.com/account/access-tokens](www.mapbox.com/account/access-tokens)
    *
    *
    * @param {Number} props.width - _required_ Width of the KeplerGl UI.
    * @public
   */
  var Container = /*#__PURE__*/function (_Component) {
    (0, _inherits2["default"])(Container, _Component);

    var _super = _createSuper(Container);

    function Container() {
      var _this;

      (0, _classCallCheck2["default"])(this, Container);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getSelector", (0, _lodash["default"])(function (id, getState) {
        return function (state) {
          if (!getState(state)) {
            // log error
            _window.console.error(ERROR_MSG.noState);

            return null;
          }

          return getState(state)[id];
        };
      }));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getDispatch", (0, _lodash["default"])(function (id, dispatch) {
        return (0, _actions.forwardTo)(id, dispatch);
      }));
      return _this;
    }

    (0, _createClass2["default"])(Container, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props,
            id = _this$props.id,
            mint = _this$props.mint,
            mapboxApiAccessToken = _this$props.mapboxApiAccessToken,
            mapboxApiUrl = _this$props.mapboxApiUrl,
            mapStylesReplaceDefault = _this$props.mapStylesReplaceDefault,
            initialUiState = _this$props.initialUiState; // add a new entry to reducer

        this.props.dispatch((0, _actions.registerEntry)({
          id: id,
          mint: mint,
          mapboxApiAccessToken: mapboxApiAccessToken,
          mapboxApiUrl: mapboxApiUrl,
          mapStylesReplaceDefault: mapStylesReplaceDefault,
          initialUiState: initialUiState
        }));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        // check if id has changed, if true, copy state over
        if ((0, _utils.notNullorUndefined)(prevProps.id) && (0, _utils.notNullorUndefined)(this.props.id) && prevProps.id !== this.props.id) {
          this.props.dispatch((0, _actions.renameEntry)(prevProps.id, this.props.id));
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.props.mint !== false) {
          // delete entry in reducer
          this.props.dispatch((0, _actions.deleteEntry)(this.props.id));
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            id = _this$props2.id,
            getState = _this$props2.getState,
            dispatch = _this$props2.dispatch,
            state = _this$props2.state;
        var selector = this.getSelector(id, getState);

        if (!selector || !selector(state)) {
          // instance state hasn't been mounted yet
          return /*#__PURE__*/_react["default"].createElement("div", null);
        }

        return /*#__PURE__*/_react["default"].createElement(KeplerGl, (0, _extends2["default"])({}, this.props, {
          id: id,
          selector: selector,
          dispatch: this.getDispatch(id, dispatch)
        }));
      }
    }]);
    return Container;
  }(_react.Component);

  (0, _defineProperty2["default"])(Container, "defaultProps", {
    id: 'map',
    getState: function getState(state) {
      return state.keplerGl;
    },
    mint: true
  });
  return connector(Container);
}

var allDependencies = (0, _injector.flattenDeps)([], ContainerFactory); // provide all dependencies to appInjector

var appInjector = allDependencies.reduce(function (inj, factory) {
  return inj.provide(factory, factory);
}, (0, _injector.injector)()); // Helper to inject custom components and return kepler.gl container

exports.appInjector = appInjector;

function injectComponents() {
  var recipes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return (0, _injector.provideRecipesToInjector)(recipes, appInjector).get(ContainerFactory);
}

var InjectedContainer = appInjector.get(ContainerFactory);
var _default = InjectedContainer;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250YWluZXIudHN4Il0sIm5hbWVzIjpbIkVSUk9SX01TRyIsIm5vU3RhdGUiLCJtYXBTdGF0ZVRvUHJvcHMiLCJzdGF0ZSIsInByb3BzIiwiZGlzcGF0Y2hUb1Byb3BzIiwiZGlzcGF0Y2giLCJjb25uZWN0b3IiLCJDb250YWluZXJGYWN0b3J5IiwiZGVwcyIsIktlcGxlckdsRmFjdG9yeSIsIktlcGxlckdsIiwiQ29udGFpbmVyIiwiaWQiLCJnZXRTdGF0ZSIsIkNvbnNvbGUiLCJlcnJvciIsIm1pbnQiLCJtYXBib3hBcGlBY2Nlc3NUb2tlbiIsIm1hcGJveEFwaVVybCIsIm1hcFN0eWxlc1JlcGxhY2VEZWZhdWx0IiwiaW5pdGlhbFVpU3RhdGUiLCJwcmV2UHJvcHMiLCJzZWxlY3RvciIsImdldFNlbGVjdG9yIiwiZ2V0RGlzcGF0Y2giLCJDb21wb25lbnQiLCJrZXBsZXJHbCIsImFsbERlcGVuZGVuY2llcyIsImFwcEluamVjdG9yIiwicmVkdWNlIiwiaW5qIiwiZmFjdG9yeSIsInByb3ZpZGUiLCJpbmplY3RDb21wb25lbnRzIiwicmVjaXBlcyIsImdldCIsIkluamVjdGVkQ29udGFpbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOzs7Ozs7Ozs7O0FBR08sSUFBTUEsU0FBUyxHQUFHO0FBQ3ZCQyxFQUFBQSxPQUFPLEVBQ0w7QUFGcUIsQ0FBbEI7OztBQU9QLElBQU1DLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ0MsS0FBRCxFQUFhQyxLQUFiO0FBQUE7QUFBeUNELElBQUFBLEtBQUssRUFBTEE7QUFBekMsS0FBbURDLEtBQW5EO0FBQUEsQ0FBeEI7O0FBQ0EsSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDQyxRQUFEO0FBQUEsU0FBOEI7QUFBQ0EsSUFBQUEsUUFBUSxFQUFSQTtBQUFELEdBQTlC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QS9DLENBQW1ENUIsZ0JBQW5ELENBQVA7QUFDRDs7QUFFRCxJQUFNNkIsaUJBQWlCLEdBQUdSLFdBQVcsQ0FBQ08sR0FBWixDQUFnQjVCLGdCQUFoQixDQUExQjtlQUVlNkIsaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHtDb21wb25lbnQsIENvbXBvbmVudFR5cGUsIERpc3BhdGNofSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2Nvbm5lY3QsIENvbm5lY3RlZFByb3BzfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdsb2Rhc2gubWVtb2l6ZSc7XG5pbXBvcnQge2NvbnNvbGUgYXMgQ29uc29sZX0gZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQge2luamVjdG9yLCBwcm92aWRlUmVjaXBlc1RvSW5qZWN0b3IsIGZsYXR0ZW5EZXBzfSBmcm9tICcuL2luamVjdG9yJztcbmltcG9ydCBLZXBsZXJHbEZhY3RvcnkgZnJvbSAnLi9rZXBsZXItZ2wnO1xuXG5pbXBvcnQge3JlZ2lzdGVyRW50cnksIGRlbGV0ZUVudHJ5LCByZW5hbWVFbnRyeSwgZm9yd2FyZFRvfSBmcm9tICdAa2VwbGVyLmdsL2FjdGlvbnMnO1xuaW1wb3J0IHtub3ROdWxsb3JVbmRlZmluZWR9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuaW1wb3J0IHtLZXBsZXJHbFN0YXRlfSBmcm9tICdAa2VwbGVyLmdsL3JlZHVjZXJzJztcblxuZXhwb3J0IGNvbnN0IEVSUk9SX01TRyA9IHtcbiAgbm9TdGF0ZTpcbiAgICBga2VwbGVyLmdsIHN0YXRlIGRvZXMgbm90IGV4aXN0LiBgICtcbiAgICBgWW91IG1pZ2h0IGZvcmdldCB0byBtb3VudCBrZXBsZXJHbFJlZHVjZXIgaW4geW91ciByb290IHJlZHVjZXIuYCArXG4gICAgYElmIGl0IGlzIG5vdCBtb3VudGVkIGFzIHN0YXRlLmtlcGxlckdsIGJ5IGRlZmF1bHQsIHlvdSBuZWVkIHRvIHByb3ZpZGUgZ2V0U3RhdGUgYXMgYSBwcm9wYFxufTtcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBhbnksIHByb3BzOiBDb250YWluZXJQcm9wcykgPT4gKHtzdGF0ZSwgLi4ucHJvcHN9KTtcbmNvbnN0IGRpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogRGlzcGF0Y2g8YW55PikgPT4gKHtkaXNwYXRjaH0pO1xuY29uc3QgY29ubmVjdG9yID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIGRpc3BhdGNoVG9Qcm9wcyk7XG5cbnR5cGUgQ29udGFpbmVyUHJvcHMgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIG1hcGJveEFwaUFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gIG1hcGJveEFwaVVybD86IHN0cmluZztcbiAgbWFwU3R5bGVzUmVwbGFjZURlZmF1bHQ/OiBib29sZWFuO1xuICBpbml0aWFsVWlTdGF0ZT86IG9iamVjdDtcbiAgd2lkdGg6IG51bWJlcjtcbiAgbWludD86IGJvb2xlYW47XG4gIGdldFN0YXRlOiAoc3RhdGU6IGFueSkgPT4gS2VwbGVyR2xTdGF0ZTtcbn07XG5cbnR5cGUgUHJvcHNGcm9tUmVkdXggPSBDb25uZWN0ZWRQcm9wczx0eXBlb2YgY29ubmVjdG9yPiAmIENvbnRhaW5lclByb3BzO1xuXG5Db250YWluZXJGYWN0b3J5LmRlcHMgPSBbS2VwbGVyR2xGYWN0b3J5XTtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbnRhaW5lckZhY3RvcnkoXG4gIEtlcGxlckdsOiBSZXR1cm5UeXBlPHR5cGVvZiBLZXBsZXJHbEZhY3Rvcnk+XG4pOiBDb21wb25lbnRUeXBlPFByb3BzRnJvbVJlZHV4PiB7XG4gIC8qKiBAbGVuZHMgS2VwbGVyR2wgKi9cbiAgLyoqXG4gICAgKiBNYWluIEtlcGxlci5nbCBDb21wb25lbnRcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICAgICpcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wcy5pZCAtIF9yZXF1aXJlZF9cbiAgICAqXG4gICAgKiAtIERlZmF1bHQ6IGBtYXBgXG4gICAgKiBUaGUgaWQgb2YgdGhpcyBLZXBsZXJHbCBpbnN0YW5jZS4gYGlkYCBpcyByZXF1aXJlZCBpZiB5b3UgaGF2ZSBtdWx0aXBsZVxuICAgICogS2VwbGVyR2wgaW5zdGFuY2VzIGluIHlvdXIgYXBwLiBJdCBkZWZpbmVzIHRoZSBwcm9wIG5hbWUgb2YgdGhlIEtlcGxlckdsIHN0YXRlIHRoYXQgaXNcbiAgICAqIHN0b3JlZCBpbiB0aGUgS2VwbGVyR2wgcmVkdWNlci4gRm9yIGV4YW1wbGUsIHRoZSBzdGF0ZSBvZiB0aGUgS2VwbGVyR2wgY29tcG9uZW50IHdpdGggaWQgYGZvb2AgaXNcbiAgICAqIHN0b3JlZCBpbiBgc3RhdGUua2VwbGVyR2wuZm9vYC5cbiAgICAqXG4gICAgKiBJbiBjYXNlIHlvdSBjcmVhdGUgbXVsdGlwbGUga2VwbGVyLmdsIGluc3RhbmNlcyB1c2luZyB0aGUgc2FtZSBpZCwgdGhlIGtlcGxlci5nbCBzdGF0ZSBkZWZpbmVkIGJ5IHRoZSBlbnRyeSB3aWxsIGJlXG4gICAgKiBvdmVycmlkZGVuIGJ5IHRoZSBsYXRlc3QgaW5zdGFuY2UgYW5kIHJlc2V0IHRvIGEgYmxhbmsgc3RhdGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcHMubWFwYm94QXBpQWNjZXNzVG9rZW4gLSBfcmVxdWlyZWRfXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcHMubWFwYm94QXBpVXJsIC0gX29wdGlvbmFsX1xuICAgICogQHBhcmFtIHtCb29sZWFufSBwcm9wcy5tYXBTdHlsZXNSZXBsYWNlRGVmYXVsdCAtIF9vcHRpb25hbF9cbiAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcy5pbml0aWFsVWlTdGF0ZSAtIF9vcHRpb25hbF9cblxuICAgICogWW91IGNhbiBjcmVhdGUgYSBmcmVlIGFjY291bnQgYXQgW3d3dy5tYXBib3guY29tXSh3d3cubWFwYm94LmNvbSkgYW5kIGNyZWF0ZSBhIHRva2VuIGF0XG4gICAgKiBbd3d3Lm1hcGJveC5jb20vYWNjb3VudC9hY2Nlc3MtdG9rZW5zXSh3d3cubWFwYm94LmNvbS9hY2NvdW50L2FjY2Vzcy10b2tlbnMpXG4gICAgKlxuICAgICpcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9wcy53aWR0aCAtIF9yZXF1aXJlZF8gV2lkdGggb2YgdGhlIEtlcGxlckdsIFVJLlxuICAgICogQHB1YmxpY1xuICAgKi9cblxuICBjbGFzcyBDb250YWluZXIgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHNGcm9tUmVkdXg+IHtcbiAgICAvLyBkZWZhdWx0IGlkIGFuZCBhZGRyZXNzIGlmIG5vdCBwcm92aWRlZFxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICBpZDogJ21hcCcsXG4gICAgICBnZXRTdGF0ZTogc3RhdGUgPT4gc3RhdGUua2VwbGVyR2wsXG4gICAgICBtaW50OiB0cnVlXG4gICAgfTtcblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBpZCxcbiAgICAgICAgbWludCxcbiAgICAgICAgbWFwYm94QXBpQWNjZXNzVG9rZW4sXG4gICAgICAgIG1hcGJveEFwaVVybCxcbiAgICAgICAgbWFwU3R5bGVzUmVwbGFjZURlZmF1bHQsXG4gICAgICAgIGluaXRpYWxVaVN0YXRlXG4gICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgLy8gYWRkIGEgbmV3IGVudHJ5IHRvIHJlZHVjZXJcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIHJlZ2lzdGVyRW50cnkoe1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIG1pbnQsXG4gICAgICAgICAgbWFwYm94QXBpQWNjZXNzVG9rZW4sXG4gICAgICAgICAgbWFwYm94QXBpVXJsLFxuICAgICAgICAgIG1hcFN0eWxlc1JlcGxhY2VEZWZhdWx0LFxuICAgICAgICAgIGluaXRpYWxVaVN0YXRlXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIC8vIGNoZWNrIGlmIGlkIGhhcyBjaGFuZ2VkLCBpZiB0cnVlLCBjb3B5IHN0YXRlIG92ZXJcbiAgICAgIGlmIChcbiAgICAgICAgbm90TnVsbG9yVW5kZWZpbmVkKHByZXZQcm9wcy5pZCkgJiZcbiAgICAgICAgbm90TnVsbG9yVW5kZWZpbmVkKHRoaXMucHJvcHMuaWQpICYmXG4gICAgICAgIHByZXZQcm9wcy5pZCAhPT0gdGhpcy5wcm9wcy5pZFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2gocmVuYW1lRW50cnkocHJldlByb3BzLmlkLCB0aGlzLnByb3BzLmlkKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5taW50ICE9PSBmYWxzZSkge1xuICAgICAgICAvLyBkZWxldGUgZW50cnkgaW4gcmVkdWNlclxuICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGRlbGV0ZUVudHJ5KHRoaXMucHJvcHMuaWQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRTZWxlY3RvciA9IG1lbW9pemUoKGlkLCBnZXRTdGF0ZSkgPT4gc3RhdGUgPT4ge1xuICAgICAgaWYgKCFnZXRTdGF0ZShzdGF0ZSkpIHtcbiAgICAgICAgLy8gbG9nIGVycm9yXG4gICAgICAgIENvbnNvbGUuZXJyb3IoRVJST1JfTVNHLm5vU3RhdGUpO1xuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdldFN0YXRlKHN0YXRlKVtpZF07XG4gICAgfSk7XG4gICAgZ2V0RGlzcGF0Y2ggPSBtZW1vaXplKChpZCwgZGlzcGF0Y2gpID0+IGZvcndhcmRUbyhpZCwgZGlzcGF0Y2gpKTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IHtpZCwgZ2V0U3RhdGUsIGRpc3BhdGNoLCBzdGF0ZX0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3Qgc2VsZWN0b3IgPSB0aGlzLmdldFNlbGVjdG9yKGlkLCBnZXRTdGF0ZSk7XG5cbiAgICAgIGlmICghc2VsZWN0b3IgfHwgIXNlbGVjdG9yKHN0YXRlKSkge1xuICAgICAgICAvLyBpbnN0YW5jZSBzdGF0ZSBoYXNuJ3QgYmVlbiBtb3VudGVkIHlldFxuICAgICAgICByZXR1cm4gPGRpdiAvPjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEtlcGxlckdsXG4gICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgIHNlbGVjdG9yPXtzZWxlY3Rvcn1cbiAgICAgICAgICBkaXNwYXRjaD17dGhpcy5nZXREaXNwYXRjaChpZCwgZGlzcGF0Y2gpfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29ubmVjdG9yKENvbnRhaW5lcik7XG59XG5cbmNvbnN0IGFsbERlcGVuZGVuY2llcyA9IGZsYXR0ZW5EZXBzKFtdLCBDb250YWluZXJGYWN0b3J5KTtcblxuLy8gcHJvdmlkZSBhbGwgZGVwZW5kZW5jaWVzIHRvIGFwcEluamVjdG9yXG5leHBvcnQgY29uc3QgYXBwSW5qZWN0b3IgPSBhbGxEZXBlbmRlbmNpZXMucmVkdWNlKFxuICAoaW5qLCBmYWN0b3J5KSA9PiBpbmoucHJvdmlkZShmYWN0b3J5LCBmYWN0b3J5KSxcbiAgaW5qZWN0b3IoKVxuKTtcblxuLy8gSGVscGVyIHRvIGluamVjdCBjdXN0b20gY29tcG9uZW50cyBhbmQgcmV0dXJuIGtlcGxlci5nbCBjb250YWluZXJcbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RDb21wb25lbnRzKHJlY2lwZXMgPSBbXSkge1xuICByZXR1cm4gcHJvdmlkZVJlY2lwZXNUb0luamVjdG9yKHJlY2lwZXMsIGFwcEluamVjdG9yKS5nZXQoQ29udGFpbmVyRmFjdG9yeSk7XG59XG5cbmNvbnN0IEluamVjdGVkQ29udGFpbmVyID0gYXBwSW5qZWN0b3IuZ2V0KENvbnRhaW5lckZhY3RvcnkpO1xuXG5leHBvcnQgZGVmYXVsdCBJbmplY3RlZENvbnRhaW5lcjtcbiJdfQ==