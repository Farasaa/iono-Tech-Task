import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n  position: relative;\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

import React, { Component, createRef } from 'react';
import Modal from 'react-modal';
import styled, { ThemeProvider } from 'styled-components';
import { createSelector } from 'reselect';
import { SIDEPANEL_WIDTH } from './constants';
const ModalContainer = styled.div(_templateObject());

class ExportVideoModal extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "root", createRef());

    _defineProperty(this, "settingsPosSelector", createSelector(this.showSettingsSelector, (showSettings, theme = {}) => {
      const {
        defaultSettingsPos,
        bottomBuffer,
        settingsHeight
      } = this.props;
      if (showSettings === false || !this.root || !this.root.current) return defaultSettingsPos;
      const {
        sidePanelInnerPadding = 16,
        sidePanel = {},
        sidePanelScrollBarWidth = 10
      } = theme;
      const sidePanelLeft = (sidePanel.margin || {}).left || 20;
      const offsetX = sidePanelInnerPadding + sidePanelLeft + sidePanelScrollBarWidth;
      const bounding = this.root.current.getBoundingClientRect();
      const {
        x,
        y,
        width
      } = bounding;
      const top = y + settingsHeight <= window.innerHeight - bottomBuffer ? y : window.innerHeight - bottomBuffer - settingsHeight;
      return {
        top: "".concat(top, "px"),
        left: "".concat(x + width + offsetX, "px")
      };
    }));

    _defineProperty(this, "modalStylesSelector", createSelector(this.themeSelector, this.settingsPosSelector, (theme, settingsPos) => ({
      content: {
        top: 'auto',
        left: 'auto',
        right: "calc(50% - ".concat(SIDEPANEL_WIDTH / 2, "px)"),
        bottom: '50%',
        transform: 'translate(50%, 50%)',
        padding: '0px 0px 0px 0px',
        border: 0,
        backgroundColor: theme.sidePanelBg,
        borderRadius: theme.panelBorderRadius || '2px'
      },
      overlay: {
        backgroundColor: 'rgba(0, 0, 0, .5)',
        zIndex: this.props.theme && this.props.theme.modalOverLayZ || 1000
      }
    })));
  }

  showSettingsSelector(props) {
    return props.showSettings;
  }

  themeSelector(props) {
    return props.theme;
  }

  render() {
    const {
      isOpen,
      theme,
      children
    } = this.props;
    const modalStyles = this.modalStylesSelector(this.props);
    return React.createElement(ThemeProvider, {
      theme: theme
    }, React.createElement(ModalContainer, {
      className: "export-video-modal",
      ref: this.root
    }, this.root.current ? React.createElement(Modal, {
      isOpen: isOpen,
      style: modalStyles,
      ariaHideApp: false,
      parentSelector: () => {
        return this.root.current || {
          removeChild: () => {},
          appendChild: () => {}
        };
      }
    }, children) : null));
  }

}

_defineProperty(ExportVideoModal, "defaultProps", {
  defaultSettingsPos: {
    top: '320px',
    left: '320px'
  },
  bottomBuffer: 212
});

export default ExportVideoModal;
//# sourceMappingURL=export-video-modal.js.map