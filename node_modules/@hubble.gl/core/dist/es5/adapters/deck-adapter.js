"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _encoders = require("../encoders");

var _animations = require("../animations");

var _videoCapture = require("../capture/video-capture");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var DeckAdapter = function () {
  function DeckAdapter(_ref) {
    var _ref$animationManager = _ref.animationManager,
        animationManager = _ref$animationManager === void 0 ? undefined : _ref$animationManager,
        _ref$glContext = _ref.glContext,
        glContext = _ref$glContext === void 0 ? undefined : _ref$glContext;
    (0, _classCallCheck2.default)(this, DeckAdapter);
    (0, _defineProperty2.default)(this, "deck", void 0);
    (0, _defineProperty2.default)(this, "animationManager", void 0);
    (0, _defineProperty2.default)(this, "shouldAnimate", void 0);
    (0, _defineProperty2.default)(this, "enabled", void 0);
    (0, _defineProperty2.default)(this, "glContext", void 0);
    this.animationManager = animationManager || new _animations.AnimationManager({});
    this.glContext = glContext;
    this.videoCapture = new _videoCapture.VideoCapture();
    this.shouldAnimate = false;
    this.enabled = false;
    this.getProps = this.getProps.bind(this);
    this.render = this.render.bind(this);
    this.stop = this.stop.bind(this);
    this.seek = this.seek.bind(this);
  }

  (0, _createClass2.default)(DeckAdapter, [{
    key: "setDeck",
    value: function setDeck(deck) {
      this.deck = deck;
    }
  }, {
    key: "getProps",
    value: function getProps(_ref2) {
      var _this = this;

      var deck = _ref2.deck,
          _ref2$onNextFrame = _ref2.onNextFrame,
          onNextFrame = _ref2$onNextFrame === void 0 ? undefined : _ref2$onNextFrame,
          _ref2$extraProps = _ref2.extraProps,
          extraProps = _ref2$extraProps === void 0 ? undefined : _ref2$extraProps;

      if (deck) {
        this.deck = deck;
      }

      var props = {
        _animate: this.shouldAnimate
      };

      if (onNextFrame) {
        props.onAfterRender = function () {
          return _this.onAfterRender(onNextFrame);
        };
      }

      if (this.enabled) {
        props.controller = false;
      } else {
        props.controller = true;
      }

      if (this.glContext) {
        props.gl = this.glContext;
      }

      return _objectSpread(_objectSpread({}, extraProps), props);
    }
  }, {
    key: "render",
    value: function render(_ref3) {
      var _this2 = this;

      var _ref3$Encoder = _ref3.Encoder,
          Encoder = _ref3$Encoder === void 0 ? _encoders.PreviewEncoder : _ref3$Encoder,
          _ref3$formatConfigs = _ref3.formatConfigs,
          formatConfigs = _ref3$formatConfigs === void 0 ? {} : _ref3$formatConfigs,
          _ref3$filename = _ref3.filename,
          filename = _ref3$filename === void 0 ? undefined : _ref3$filename,
          _ref3$timecode = _ref3.timecode,
          timecode = _ref3$timecode === void 0 ? {
        start: 0,
        end: 0,
        framerate: 30
      } : _ref3$timecode,
          _ref3$onStopped = _ref3.onStopped,
          onStopped = _ref3$onStopped === void 0 ? undefined : _ref3$onStopped,
          _ref3$onSave = _ref3.onSave,
          onSave = _ref3$onSave === void 0 ? undefined : _ref3$onSave,
          _ref3$onComplete = _ref3.onComplete,
          onComplete = _ref3$onComplete === void 0 ? undefined : _ref3$onComplete;
      this.shouldAnimate = true;
      this.videoCapture.render({
        Encoder: Encoder,
        formatConfigs: formatConfigs,
        timecode: timecode,
        filename: filename,
        onStop: function onStop() {
          return _this2.stop({
            onStopped: onStopped,
            onSave: onSave,
            onComplete: onComplete
          });
        }
      });
      this.enabled = true;
      this.seek({
        timeMs: timecode.start
      });
    }
  }, {
    key: "stop",
    value: function stop(_ref4) {
      var onStopped = _ref4.onStopped,
          onSave = _ref4.onSave,
          onComplete = _ref4.onComplete,
          abort = _ref4.abort;
      this.enabled = false;
      this.shouldAnimate = false;
      this.videoCapture.stop({
        onStopped: onStopped,
        onSave: onSave,
        onComplete: onComplete,
        abort: abort
      });
    }
  }, {
    key: "seek",
    value: function seek(_ref5) {
      var timeMs = _ref5.timeMs;
      this.animationManager.timeline.setTime(timeMs);
      this.animationManager.draw();
    }
  }, {
    key: "onAfterRender",
    value: function onAfterRender(proceedToNextFrame) {
      var _this3 = this;

      var readyToCapture = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var areAllLayersLoaded = this.deck && this.deck.props.layers.every(function (layer) {
        return layer.isLoaded;
      });

      if (this.videoCapture.isRecording() && areAllLayersLoaded && readyToCapture) {
        this.videoCapture.capture(this.deck.canvas, function (nextTimeMs) {
          _this3.seek({
            timeMs: nextTimeMs
          });

          proceedToNextFrame(nextTimeMs);
        });
      }
    }
  }]);
  return DeckAdapter;
}();

exports.default = DeckAdapter;
//# sourceMappingURL=deck-adapter.js.map