"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.lineVisConfigs = exports.lineColumnLabels = exports.lineOptionalColumns = exports.lineRequiredColumns = exports.linePosAccessor = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extensions = require("@deck.gl/extensions");

var _deckglLayers = require("@kepler.gl/deckgl-layers");

var _lineLayerIcon = _interopRequireDefault(require("./line-layer-icon"));

var _arcLayer = _interopRequireDefault(require("../arc-layer/arc-layer"));

var _constants = require("@kepler.gl/constants");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var linePosAccessor = function linePosAccessor(_ref) {
  var lat0 = _ref.lat0,
      lng0 = _ref.lng0,
      lat1 = _ref.lat1,
      lng1 = _ref.lng1,
      alt0 = _ref.alt0,
      alt1 = _ref.alt1;
  return function (dc) {
    return function (d) {
      return [dc.valueAt(d.index, lng0.fieldIdx), dc.valueAt(d.index, lat0.fieldIdx), alt0 && alt0.fieldIdx > -1 ? dc.valueAt(d.index, alt0.fieldIdx) : 0, dc.valueAt(d.index, lng1.fieldIdx), dc.valueAt(d.index, lat1.fieldIdx), alt1 && (alt1 === null || alt1 === void 0 ? void 0 : alt1.fieldIdx) > -1 ? dc.valueAt(d.index, alt1.fieldIdx) : 0];
    };
  };
};

exports.linePosAccessor = linePosAccessor;
var lineRequiredColumns = ['lat0', 'lng0', 'lat1', 'lng1'];
exports.lineRequiredColumns = lineRequiredColumns;
var lineOptionalColumns = ['alt0', 'alt1'];
exports.lineOptionalColumns = lineOptionalColumns;
var lineColumnLabels = {
  lat0: 'arc.lat0',
  lng0: 'arc.lng0',
  lat1: 'arc.lat1',
  lng1: 'arc.lng1',
  alt0: 'line.alt0',
  alt1: 'line.alt1'
};
exports.lineColumnLabels = lineColumnLabels;
var lineVisConfigs = {
  opacity: 'opacity',
  thickness: 'thickness',
  colorRange: 'colorRange',
  sizeRange: 'strokeWidthRange',
  targetColor: 'targetColor',
  elevationScale: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.elevationScale), {}, {
    defaultValue: 1
  })
};
exports.lineVisConfigs = lineVisConfigs;

var LineLayer = /*#__PURE__*/function (_ArcLayer) {
  (0, _inherits2["default"])(LineLayer, _ArcLayer);

  var _super = _createSuper(LineLayer);

  function LineLayer(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, LineLayer);
    _this = _super.call(this, props);

    _this.registerVisConfig(lineVisConfigs);

    _this.getPositionAccessor = function (dataContainer) {
      return linePosAccessor(_this.config.columns)(dataContainer);
    };

    return _this;
  }

  (0, _createClass2["default"])(LineLayer, [{
    key: "type",
    get: function get() {
      return 'line';
    }
  }, {
    key: "layerIcon",
    get: function get() {
      return _lineLayerIcon["default"];
    }
  }, {
    key: "requiredLayerColumns",
    get: function get() {
      return lineRequiredColumns;
    }
  }, {
    key: "optionalColumns",
    get: function get() {
      return lineOptionalColumns;
    }
  }, {
    key: "columnLabels",
    get: function get() {
      return lineColumnLabels;
    }
  }, {
    key: "visualChannels",
    get: function get() {
      var visualChannels = (0, _get2["default"])((0, _getPrototypeOf2["default"])(LineLayer.prototype), "visualChannels", this);
      return _objectSpread(_objectSpread({}, visualChannels), {}, {
        sourceColor: _objectSpread(_objectSpread({}, visualChannels.sourceColor), {}, {
          accessor: 'getColor'
        })
      });
    }
  }, {
    key: "renderLayer",
    value: function renderLayer(opts) {
      var data = opts.data,
          gpuFilter = opts.gpuFilter,
          objectHovered = opts.objectHovered,
          interactionConfig = opts.interactionConfig;
      var layerProps = {
        widthScale: this.config.visConfig.thickness * _constants.PROJECTED_PIXEL_SIZE_MULTIPLIER,
        elevationScale: this.config.visConfig.elevationScale
      };

      var updateTriggers = _objectSpread({
        getPosition: this.config.columns,
        getFilterValue: gpuFilter.filterValueUpdateTriggers
      }, this.getVisualChannelUpdateTriggers());

      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);
      var hoveredObject = this.hasHoveredObject(objectHovered);
      return [// base layer
      new _deckglLayers.EnhancedLineLayer(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), this.getBrushingExtensionProps(interactionConfig, 'source_target')), data), layerProps), {}, {
        updateTriggers: updateTriggers,
        extensions: [].concat((0, _toConsumableArray2["default"])(defaultLayerProps.extensions), [new _extensions.BrushingExtension()])
      }))].concat((0, _toConsumableArray2["default"])(hoveredObject ? [new _deckglLayers.EnhancedLineLayer(_objectSpread(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), layerProps), {}, {
        data: [hoveredObject],
        getColor: this.config.highlightColor,
        getTargetColor: this.config.highlightColor,
        getWidth: data.getWidth
      }))] : []));
    }
  }], [{
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(_ref2) {
      var _ref2$fieldPairs = _ref2.fieldPairs,
          fieldPairs = _ref2$fieldPairs === void 0 ? [] : _ref2$fieldPairs;

      if (fieldPairs.length < 2) {
        return {
          props: []
        };
      }

      var props = {
        // connect the first two point layer with line
        columns: {
          lat0: fieldPairs[0].pair.lat,
          lng0: fieldPairs[0].pair.lng,
          alt0: {
            value: null,
            fieldIdx: -1,
            optional: true
          },
          lat1: fieldPairs[1].pair.lat,
          lng1: fieldPairs[1].pair.lng,
          alt1: {
            value: null,
            fieldIdx: -1,
            optional: true
          }
        },
        label: "".concat(fieldPairs[0].defaultName, " -> ").concat(fieldPairs[1].defaultName, " line")
      };
      return {
        props: [props]
      };
    }
  }]);
  return LineLayer;
}(_arcLayer["default"]);

exports["default"] = LineLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saW5lLWxheWVyL2xpbmUtbGF5ZXIudHMiXSwibmFtZXMiOlsibGluZVBvc0FjY2Vzc29yIiwibGF0MCIsImxuZzAiLCJsYXQxIiwibG5nMSIsImFsdDAiLCJhbHQxIiwiZGMiLCJkIiwidmFsdWVBdCIsImluZGV4IiwiZmllbGRJZHgiLCJsaW5lUmVxdWlyZWRDb2x1bW5zIiwibGluZU9wdGlvbmFsQ29sdW1ucyIsImxpbmVDb2x1bW5MYWJlbHMiLCJsaW5lVmlzQ29uZmlncyIsIm9wYWNpdHkiLCJ0aGlja25lc3MiLCJjb2xvclJhbmdlIiwic2l6ZVJhbmdlIiwidGFyZ2V0Q29sb3IiLCJlbGV2YXRpb25TY2FsZSIsIkxBWUVSX1ZJU19DT05GSUdTIiwiZGVmYXVsdFZhbHVlIiwiTGluZUxheWVyIiwicHJvcHMiLCJyZWdpc3RlclZpc0NvbmZpZyIsImdldFBvc2l0aW9uQWNjZXNzb3IiLCJkYXRhQ29udGFpbmVyIiwiY29uZmlnIiwiY29sdW1ucyIsIkxpbmVMYXllckljb24iLCJ2aXN1YWxDaGFubmVscyIsInNvdXJjZUNvbG9yIiwiYWNjZXNzb3IiLCJvcHRzIiwiZGF0YSIsImdwdUZpbHRlciIsIm9iamVjdEhvdmVyZWQiLCJpbnRlcmFjdGlvbkNvbmZpZyIsImxheWVyUHJvcHMiLCJ3aWR0aFNjYWxlIiwidmlzQ29uZmlnIiwiUFJPSkVDVEVEX1BJWEVMX1NJWkVfTVVMVElQTElFUiIsInVwZGF0ZVRyaWdnZXJzIiwiZ2V0UG9zaXRpb24iLCJnZXRGaWx0ZXJWYWx1ZSIsImZpbHRlclZhbHVlVXBkYXRlVHJpZ2dlcnMiLCJnZXRWaXN1YWxDaGFubmVsVXBkYXRlVHJpZ2dlcnMiLCJkZWZhdWx0TGF5ZXJQcm9wcyIsImdldERlZmF1bHREZWNrTGF5ZXJQcm9wcyIsImhvdmVyZWRPYmplY3QiLCJoYXNIb3ZlcmVkT2JqZWN0IiwiRW5oYW5jZWRMaW5lTGF5ZXIiLCJnZXRCcnVzaGluZ0V4dGVuc2lvblByb3BzIiwiZXh0ZW5zaW9ucyIsIkJydXNoaW5nRXh0ZW5zaW9uIiwiZ2V0RGVmYXVsdEhvdmVyTGF5ZXJQcm9wcyIsImdldENvbG9yIiwiaGlnaGxpZ2h0Q29sb3IiLCJnZXRUYXJnZXRDb2xvciIsImdldFdpZHRoIiwiZmllbGRQYWlycyIsImxlbmd0aCIsInBhaXIiLCJsYXQiLCJsbmciLCJ2YWx1ZSIsIm9wdGlvbmFsIiwibGFiZWwiLCJkZWZhdWx0TmFtZSIsIkFyY0xheWVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7QUE0Q08sSUFBTUEsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQjtBQUFBLE1BQUVDLElBQUYsUUFBRUEsSUFBRjtBQUFBLE1BQVFDLElBQVIsUUFBUUEsSUFBUjtBQUFBLE1BQWNDLElBQWQsUUFBY0EsSUFBZDtBQUFBLE1BQW9CQyxJQUFwQixRQUFvQkEsSUFBcEI7QUFBQSxNQUEwQkMsSUFBMUIsUUFBMEJBLElBQTFCO0FBQUEsTUFBZ0NDLElBQWhDLFFBQWdDQSxJQUFoQztBQUFBLFNBQWtFLFVBQy9GQyxFQUQrRjtBQUFBLFdBRTVGLFVBQUFDLENBQUM7QUFBQSxhQUFJLENBQ1JELEVBQUUsQ0FBQ0UsT0FBSCxDQUFXRCxDQUFDLENBQUNFLEtBQWIsRUFBb0JSLElBQUksQ0FBQ1MsUUFBekIsQ0FEUSxFQUVSSixFQUFFLENBQUNFLE9BQUgsQ0FBV0QsQ0FBQyxDQUFDRSxLQUFiLEVBQW9CVCxJQUFJLENBQUNVLFFBQXpCLENBRlEsRUFHUk4sSUFBSSxJQUFJQSxJQUFJLENBQUNNLFFBQUwsR0FBZ0IsQ0FBQyxDQUF6QixHQUE2QkosRUFBRSxDQUFDRSxPQUFILENBQVdELENBQUMsQ0FBQ0UsS0FBYixFQUFvQkwsSUFBSSxDQUFDTSxRQUF6QixDQUE3QixHQUFrRSxDQUgxRCxFQUlSSixFQUFFLENBQUNFLE9BQUgsQ0FBV0QsQ0FBQyxDQUFDRSxLQUFiLEVBQW9CTixJQUFJLENBQUNPLFFBQXpCLENBSlEsRUFL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LFVBQVUsQ0FBQyxDQUFELENBQVYsQ0FBY0UsSUFBZCxDQUFtQkMsR0FEbEI7QUFFUC9ELFVBQUFBLElBQUksRUFBRTRELFVBQVUsQ0FBQyxDQUFELENBQVYsQ0FBY0UsSUFBZCxDQUFtQkUsR0FGbEI7QUFHUDdELFVBQUFBLElBQUksRUFBRTtBQUFDOEQsWUFBQUEsS0FBSyxFQUFFLElBQVI7QUFBY3hELFlBQUFBLFFBQVEsRUFBRSxDQUFDLENBQXpCO0FBQTRCeUQsWUFBQUEsUUFBUSxFQUFFO0FBQXRDLFdBSEM7QUFJUGpFLFVBQUFBLElBQUksRUFBRTJELFVBQVUsQ0FBQyxDQUFELENBQVYsQ0FBY0UsSUFBZCxDQUFtQkMsR0FKbEI7QUFLUDdELFVBQUFBLElBQUksRUFBRTBELFVBQVUsQ0FBQyxDQUFELENBQVYsQ0FBY0UsSUFBZCxDQUFtQkUsR0FMbEI7QUFNUDVELFVBQUFBLElBQUksRUFBRTtBQUFDNkQsWUFBQUEsS0FBSyxFQUFFLElBQVI7QUFBY3hELFlBQUFBLFFBQVEsRUFBRSxDQUFDLENBQXpCO0FBQTRCeUQsWUFBQUEsUUFBUSxFQUFFO0FBQXRDO0FBTkMsU0FGcUQ7QUFVOURDLFFBQUFBLEtBQUssWUFBS1AsVUFBVSxDQUFDLENBQUQsQ0FBVixDQUFjUSxXQUFuQixpQkFBcUNSLFVBQVUsQ0FBQyxDQUFELENBQVYsQ0FBY1EsV0FBbkQ7QUFWeUQsT0FBaEU7QUFhQSxhQUFPO0FBQUM3QyxRQUFBQSxLQUFLLEVBQUUsQ0FBQ0EsS0FBRDtBQUFSLE9BQVA7QUFDRDs7O0VBN0RvQzhDLG9CIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtCcnVzaGluZ0V4dGVuc2lvbn0gZnJvbSAnQGRlY2suZ2wvZXh0ZW5zaW9ucyc7XG5cbmltcG9ydCB7RW5oYW5jZWRMaW5lTGF5ZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvZGVja2dsLWxheWVycyc7XG5pbXBvcnQgTGluZUxheWVySWNvbiBmcm9tICcuL2xpbmUtbGF5ZXItaWNvbic7XG5pbXBvcnQgQXJjTGF5ZXIsIHtBcmNMYXllckNvbmZpZ30gZnJvbSAnLi4vYXJjLWxheWVyL2FyYy1sYXllcic7XG5pbXBvcnQge0xheWVyQ29sdW1ufSBmcm9tICcuLi9iYXNlLWxheWVyJztcbmltcG9ydCB7TEFZRVJfVklTX0NPTkZJR1MsIENvbG9yUmFuZ2UsIFBST0pFQ1RFRF9QSVhFTF9TSVpFX01VTFRJUExJRVJ9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIE1lcmdlLFxuICBSR0JDb2xvcixcbiAgVmlzQ29uZmlnQ29sb3JSYW5nZSxcbiAgVmlzQ29uZmlnQ29sb3JTZWxlY3QsXG4gIFZpc0NvbmZpZ051bWJlcixcbiAgVmlzQ29uZmlnUmFuZ2Vcbn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge2RlZmF1bHQgYXMgS2VwbGVyVGFibGV9IGZyb20gJ0BrZXBsZXIuZ2wvdGFibGUnO1xuaW1wb3J0IHtEYXRhQ29udGFpbmVySW50ZXJmYWNlfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgTGluZUxheWVyVmlzQ29uZmlnU2V0dGluZ3MgPSB7XG4gIG9wYWNpdHk6IFZpc0NvbmZpZ051bWJlcjtcbiAgdGhpY2tuZXNzOiBWaXNDb25maWdOdW1iZXI7XG4gIGNvbG9yUmFuZ2U6IFZpc0NvbmZpZ0NvbG9yUmFuZ2U7XG4gIHNpemVSYW5nZTogVmlzQ29uZmlnUmFuZ2U7XG4gIHRhcmdldENvbG9yOiBWaXNDb25maWdDb2xvclNlbGVjdDtcbiAgZWxldmF0aW9uU2NhbGU6IFZpc0NvbmZpZ051bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIExpbmVMYXllckNvbHVtbnNDb25maWcgPSB7XG4gIGxhdDA6IExheWVyQ29sdW1uO1xuICBsbmcwOiBMYXllckNvbHVtbjtcbiAgbGF0MTogTGF5ZXJDb2x1bW47XG4gIGxuZzE6IExheWVyQ29sdW1uO1xuICBhbHQwPzogTGF5ZXJDb2x1bW47XG4gIGFsdDE/OiBMYXllckNvbHVtbjtcbn07XG5cbmV4cG9ydCB0eXBlIExpbmVMYXllclZpc0NvbmZpZyA9IHtcbiAgY29sb3JSYW5nZTogQ29sb3JSYW5nZTtcbiAgb3BhY2l0eTogbnVtYmVyO1xuICBzaXplUmFuZ2U6IFtudW1iZXIsIG51bWJlcl07XG4gIHRhcmdldENvbG9yOiBSR0JDb2xvcjtcbiAgdGhpY2tuZXNzOiBudW1iZXI7XG4gIGVsZXZhdGlvblNjYWxlOiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBMaW5lTGF5ZXJDb25maWcgPSBNZXJnZTxcbiAgQXJjTGF5ZXJDb25maWcsXG4gIHtjb2x1bW5zOiBMaW5lTGF5ZXJDb2x1bW5zQ29uZmlnOyB2aXNDb25maWc6IExpbmVMYXllclZpc0NvbmZpZ31cbj47XG5cbmV4cG9ydCBjb25zdCBsaW5lUG9zQWNjZXNzb3IgPSAoe2xhdDAsIGxuZzAsIGxhdDEsIGxuZzEsIGFsdDAsIGFsdDF9OiBMaW5lTGF5ZXJDb2x1bW5zQ29uZmlnKSA9PiAoXG4gIGRjOiBEYXRhQ29udGFpbmVySW50ZXJmYWNlXG4pID0+IGQgPT4gW1xuICBkYy52YWx1ZUF0KGQuaW5kZXgsIGxuZzAuZmllbGRJZHgpLFxuICBkYy52YWx1ZUF0KGQuaW5kZXgsIGxhdDAuZmllbGRJZHgpLFxuICBhbHQwICYmIGFsdDAuZmllbGRJZHggPiAtMSA/IGRjLnZhbHVlQXQoZC5pbmRleCwgYWx0MC5maWVsZElkeCkgOiAwLFxuICBkYy52YWx1ZUF0KGQuaW5kZXgsIGxuZzEuZmllbGRJZHgpLFxuICBkYy52YWx1ZUF0KGQuaW5kZXgsIGxhdDEuZmllbGRJZHgpLFxuICBhbHQxICYmIGFsdDE/LmZpZWxkSWR4ID4gLTEgPyBkYy52YWx1ZUF0KGQuaW5kZXgsIGFsdDEuZmllbGRJZHgpIDogMFxuXTtcblxuZXhwb3J0IGNvbnN0IGxpbmVSZXF1aXJlZENvbHVtbnM6IFsnbGF0MCcsICdsbmcwJywgJ2xhdDEnLCAnbG5nMSddID0gW1xuICAnbGF0MCcsXG4gICdsbmcwJyxcbiAgJ2xhdDEnLFxuICAnbG5nMSdcbl07XG5leHBvcnQgY29uc3QgbGluZU9wdGlvbmFsQ29sdW1uczogWydhbHQwJywgJ2FsdDEnXSA9IFsnYWx0MCcsICdhbHQxJ107XG5cbmV4cG9ydCBjb25zdCBsaW5lQ29sdW1uTGFiZWxzID0ge1xuICBsYXQwOiAnYXJjLmxhdDAnLFxuICBsbmcwOiAnYXJjLmxuZzAnLFxuICBsYXQxOiAnYXJjLmxhdDEnLFxuICBsbmcxOiAnYXJjLmxuZzEnLFxuICBhbHQwOiAnbGluZS5hbHQwJyxcbiAgYWx0MTogJ2xpbmUuYWx0MSdcbn07XG5cbmV4cG9ydCBjb25zdCBsaW5lVmlzQ29uZmlnczoge1xuICBvcGFjaXR5OiAnb3BhY2l0eSc7XG4gIHRoaWNrbmVzczogJ3RoaWNrbmVzcyc7XG4gIGNvbG9yUmFuZ2U6ICdjb2xvclJhbmdlJztcbiAgc2l6ZVJhbmdlOiAnc3Ryb2tlV2lkdGhSYW5nZSc7XG4gIHRhcmdldENvbG9yOiAndGFyZ2V0Q29sb3InO1xuICBlbGV2YXRpb25TY2FsZTogVmlzQ29uZmlnTnVtYmVyO1xufSA9IHtcbiAgb3BhY2l0eTogJ29wYWNpdHknLFxuICB0aGlja25lc3M6ICd0aGlja25lc3MnLFxuICBjb2xvclJhbmdlOiAnY29sb3JSYW5nZScsXG4gIHNpemVSYW5nZTogJ3N0cm9rZVdpZHRoUmFuZ2UnLFxuICB0YXJnZXRDb2xvcjogJ3RhcmdldENvbG9yJyxcbiAgZWxldmF0aW9uU2NhbGU6IHtcbiAgICAuLi5MQVlFUl9WSVNfQ09ORklHUy5lbGV2YXRpb25TY2FsZSxcbiAgICBkZWZhdWx0VmFsdWU6IDFcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGluZUxheWVyIGV4dGVuZHMgQXJjTGF5ZXIge1xuICBkZWNsYXJlIHZpc0NvbmZpZ1NldHRpbmdzOiBMaW5lTGF5ZXJWaXNDb25maWdTZXR0aW5ncztcbiAgZGVjbGFyZSBjb25maWc6IExpbmVMYXllckNvbmZpZztcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMucmVnaXN0ZXJWaXNDb25maWcobGluZVZpc0NvbmZpZ3MpO1xuICAgIHRoaXMuZ2V0UG9zaXRpb25BY2Nlc3NvciA9IChkYXRhQ29udGFpbmVyOiBEYXRhQ29udGFpbmVySW50ZXJmYWNlKSA9PlxuICAgICAgbGluZVBvc0FjY2Vzc29yKHRoaXMuY29uZmlnLmNvbHVtbnMpKGRhdGFDb250YWluZXIpO1xuICB9XG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuICdsaW5lJztcbiAgfVxuXG4gIGdldCBsYXllckljb24oKSB7XG4gICAgcmV0dXJuIExpbmVMYXllckljb247XG4gIH1cblxuICBnZXQgcmVxdWlyZWRMYXllckNvbHVtbnMoKSB7XG4gICAgcmV0dXJuIGxpbmVSZXF1aXJlZENvbHVtbnM7XG4gIH1cblxuICBnZXQgb3B0aW9uYWxDb2x1bW5zKCkge1xuICAgIHJldHVybiBsaW5lT3B0aW9uYWxDb2x1bW5zO1xuICB9XG5cbiAgZ2V0IGNvbHVtbkxhYmVscygpIHtcbiAgICByZXR1cm4gbGluZUNvbHVtbkxhYmVscztcbiAgfVxuXG4gIGdldCB2aXN1YWxDaGFubmVscygpIHtcbiAgICBjb25zdCB2aXN1YWxDaGFubmVscyA9IHN1cGVyLnZpc3VhbENoYW5uZWxzO1xuICAgIHJldHVybiB7XG4gICAgICAuLi52aXN1YWxDaGFubmVscyxcbiAgICAgIHNvdXJjZUNvbG9yOiB7XG4gICAgICAgIC4uLnZpc3VhbENoYW5uZWxzLnNvdXJjZUNvbG9yLFxuICAgICAgICBhY2Nlc3NvcjogJ2dldENvbG9yJ1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZmluZERlZmF1bHRMYXllclByb3BzKHtmaWVsZFBhaXJzID0gW119OiBLZXBsZXJUYWJsZSkge1xuICAgIGlmIChmaWVsZFBhaXJzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiB7cHJvcHM6IFtdfTtcbiAgICB9XG4gICAgY29uc3QgcHJvcHM6IHtjb2x1bW5zOiBMaW5lTGF5ZXJDb2x1bW5zQ29uZmlnOyBsYWJlbDogc3RyaW5nfSA9IHtcbiAgICAgIC8vIGNvbm5lY3QgdGhlIGZpcnN0IHR3byBwb2ludCBsYXllciB3aXRoIGxpbmVcbiAgICAgIGNvbHVtbnM6IHtcbiAgICAgICAgbGF0MDogZmllbGRQYWlyc1swXS5wYWlyLmxhdCxcbiAgICAgICAgbG5nMDogZmllbGRQYWlyc1swXS5wYWlyLmxuZyxcbiAgICAgICAgYWx0MDoge3ZhbHVlOiBudWxsLCBmaWVsZElkeDogLTEsIG9wdGlvbmFsOiB0cnVlfSxcbiAgICAgICAgbGF0MTogZmllbGRQYWlyc1sxXS5wYWlyLmxhdCxcbiAgICAgICAgbG5nMTogZmllbGRQYWlyc1sxXS5wYWlyLmxuZyxcbiAgICAgICAgYWx0MToge3ZhbHVlOiBudWxsLCBmaWVsZElkeDogLTEsIG9wdGlvbmFsOiB0cnVlfVxuICAgICAgfSxcbiAgICAgIGxhYmVsOiBgJHtmaWVsZFBhaXJzWzBdLmRlZmF1bHROYW1lfSAtPiAke2ZpZWxkUGFpcnNbMV0uZGVmYXVsdE5hbWV9IGxpbmVgXG4gICAgfTtcblxuICAgIHJldHVybiB7cHJvcHM6IFtwcm9wc119O1xuICB9XG5cbiAgcmVuZGVyTGF5ZXIob3B0cykge1xuICAgIGNvbnN0IHtkYXRhLCBncHVGaWx0ZXIsIG9iamVjdEhvdmVyZWQsIGludGVyYWN0aW9uQ29uZmlnfSA9IG9wdHM7XG5cbiAgICBjb25zdCBsYXllclByb3BzID0ge1xuICAgICAgd2lkdGhTY2FsZTogdGhpcy5jb25maWcudmlzQ29uZmlnLnRoaWNrbmVzcyAqIFBST0pFQ1RFRF9QSVhFTF9TSVpFX01VTFRJUExJRVIsXG4gICAgICBlbGV2YXRpb25TY2FsZTogdGhpcy5jb25maWcudmlzQ29uZmlnLmVsZXZhdGlvblNjYWxlXG4gICAgfTtcblxuICAgIGNvbnN0IHVwZGF0ZVRyaWdnZXJzID0ge1xuICAgICAgZ2V0UG9zaXRpb246IHRoaXMuY29uZmlnLmNvbHVtbnMsXG4gICAgICBnZXRGaWx0ZXJWYWx1ZTogZ3B1RmlsdGVyLmZpbHRlclZhbHVlVXBkYXRlVHJpZ2dlcnMsXG4gICAgICAuLi50aGlzLmdldFZpc3VhbENoYW5uZWxVcGRhdGVUcmlnZ2VycygpXG4gICAgfTtcbiAgICBjb25zdCBkZWZhdWx0TGF5ZXJQcm9wcyA9IHRoaXMuZ2V0RGVmYXVsdERlY2tMYXllclByb3BzKG9wdHMpO1xuICAgIGNvbnN0IGhvdmVyZWRPYmplY3QgPSB0aGlzLmhhc0hvdmVyZWRPYmplY3Qob2JqZWN0SG92ZXJlZCk7XG5cbiAgICByZXR1cm4gW1xuICAgICAgLy8gYmFzZSBsYXllclxuICAgICAgbmV3IEVuaGFuY2VkTGluZUxheWVyKHtcbiAgICAgICAgLi4uZGVmYXVsdExheWVyUHJvcHMsXG4gICAgICAgIC4uLnRoaXMuZ2V0QnJ1c2hpbmdFeHRlbnNpb25Qcm9wcyhpbnRlcmFjdGlvbkNvbmZpZywgJ3NvdXJjZV90YXJnZXQnKSxcbiAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgLi4ubGF5ZXJQcm9wcyxcbiAgICAgICAgdXBkYXRlVHJpZ2dlcnMsXG4gICAgICAgIGV4dGVuc2lvbnM6IFsuLi5kZWZhdWx0TGF5ZXJQcm9wcy5leHRlbnNpb25zLCBuZXcgQnJ1c2hpbmdFeHRlbnNpb24oKV1cbiAgICAgIH0pLFxuICAgICAgLy8gaG92ZXIgbGF5ZXJcbiAgICAgIC4uLihob3ZlcmVkT2JqZWN0XG4gICAgICAgID8gW1xuICAgICAgICAgICAgbmV3IEVuaGFuY2VkTGluZUxheWVyKHtcbiAgICAgICAgICAgICAgLi4udGhpcy5nZXREZWZhdWx0SG92ZXJMYXllclByb3BzKCksXG4gICAgICAgICAgICAgIC4uLmxheWVyUHJvcHMsXG4gICAgICAgICAgICAgIGRhdGE6IFtob3ZlcmVkT2JqZWN0XSxcbiAgICAgICAgICAgICAgZ2V0Q29sb3I6IHRoaXMuY29uZmlnLmhpZ2hsaWdodENvbG9yLFxuICAgICAgICAgICAgICBnZXRUYXJnZXRDb2xvcjogdGhpcy5jb25maWcuaGlnaGxpZ2h0Q29sb3IsXG4gICAgICAgICAgICAgIGdldFdpZHRoOiBkYXRhLmdldFdpZHRoXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF1cbiAgICAgICAgOiBbXSlcbiAgICBdO1xuICB9XG59XG4iXX0=