import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import Tar from './tar';
var TAR_BUILDER_OPTIONS = {
  recordsPerBlock: 20
};

var TARBuilder = function () {
  _createClass(TARBuilder, null, [{
    key: "properties",
    get: function get() {
      return {
        id: 'tar',
        name: 'TAR',
        extensions: ['tar'],
        mimeType: 'application/x-tar',
        builder: TARBuilder,
        options: TAR_BUILDER_OPTIONS
      };
    }
  }]);

  function TARBuilder(options) {
    _classCallCheck(this, TARBuilder);

    _defineProperty(this, "tape", void 0);

    _defineProperty(this, "count", void 0);

    this.options = _objectSpread(_objectSpread({}, TAR_BUILDER_OPTIONS), options);
    this.tape = new Tar(this.options.recordsPerBlock);
    this.count = 0;
  }

  _createClass(TARBuilder, [{
    key: "addFile",
    value: function addFile(buffer, filename) {
      this.tape.append(filename, new Uint8Array(buffer));
      this.count++;
    }
  }, {
    key: "build",
    value: function () {
      var _build = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", new Response(this.tape.save()).arrayBuffer());

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function build() {
        return _build.apply(this, arguments);
      }

      return build;
    }()
  }]);

  return TARBuilder;
}();

export { TARBuilder as default };
//# sourceMappingURL=tar-builder.js.map