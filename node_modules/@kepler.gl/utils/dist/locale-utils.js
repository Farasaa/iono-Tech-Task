"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeMessages = exports.flattenMessages = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("./utils");

var _console = _interopRequireDefault(require("global/console"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Flat messages since react-intl does not seem to support nested structures
// Adapted from https://medium.com/siren-apparel-press/internationalization-and-localization-of-sirenapparel-eu-sirenapparel-us-and-sirenapparel-asia-ddee266066a2
var flattenMessages = function flattenMessages(nestedMessages) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return Object.keys(nestedMessages).reduce(function (messages, key) {
    var value = nestedMessages[key];
    var prefixedKey = prefix ? "".concat(prefix, ".").concat(key) : key;

    if (typeof value === 'string') {
      messages[prefixedKey] = value;
    } else {
      Object.assign(messages, flattenMessages(value, prefixedKey));
    }

    return messages;
  }, {});
};

exports.flattenMessages = flattenMessages;

var mergeMessages = function mergeMessages(defaultMessages, userMessages) {
  if (!(0, _utils.isObject)(userMessages) || !(0, _utils.isObject)(userMessages.en)) {
    _console["default"].error('message should be an object and contain at least the `en` translation. Read more at https://docs.kepler.gl/docs/api-reference/localization');

    return defaultMessages;
  }

  var userEnFlat = flattenMessages(userMessages.en);
  return Object.keys(defaultMessages).reduce(function (acc, key) {
    return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, key, key === 'en' ? _objectSpread(_objectSpread({}, defaultMessages.en), userEnFlat) : _objectSpread(_objectSpread(_objectSpread({}, defaultMessages[key]), userEnFlat), flattenMessages(userMessages[key] || {}))));
  }, {});
};

exports.mergeMessages = mergeMessages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2NhbGUtdXRpbHMudHMiXSwibmFtZXMiOlsiZmxhdHRlbk1lc3NhZ2VzIiwibmVzdGVkTWVzc2FnZXMiLCJwcmVmaXgiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwibWVzc2FnZXMiLCJrZXkiLCJ2YWx1ZSIsInByZWZpeGVkS2V5IiwiYXNzaWduIiwibWVyZ2VNZXNzYWdlcyIsImRlZmF1bHRNZXNzYWdlcyIsInVzZXJNZXNzYWdlcyIsImVuIiwiQ29uc29sZSIsImVycm9yIiwidXNlckVuRmxhdCIsImFjYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7Ozs7O0FBRUE7QUFDQTtBQUNPLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ0MsY0FBRCxFQUFpQztBQUFBLE1BQWhCQyxNQUFnQix1RUFBUCxFQUFPO0FBQzlELFNBQU9DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxjQUFaLEVBQTRCSSxNQUE1QixDQUFtQyxVQUFDQyxRQUFELEVBQVdDLEdBQVgsRUFBbUI7QUFDM0QsUUFBTUMsS0FBSyxHQUFHUCxjQUFjLENBQUNNLEdBQUQsQ0FBNUI7QUFDQSxRQUFNRSxXQUFXLEdBQUdQLE1BQU0sYUFBTUEsTUFBTixjQUFnQkssR0FBaEIsSUFBd0JBLEdBQWxEOztBQUNBLFFBQUksT0FBT0MsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUM3QkYsTUFBQUEsUUFBUSxDQUFDRyxXQUFELENBQVIsR0FBd0JELEtBQXhCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xMLE1BQUFBLE1BQU0sQ0FBQ08sTUFBUCxDQUFjSixRQUFkLEVBQXdCTixlQUFlLENBQUNRLEtBQUQsRUFBUUMsV0FBUixDQUF2QztBQUNEOztBQUNELFdBQU9ILFFBQVA7QUFDRCxHQVRNLEVBU0osRUFUSSxDQUFQO0FBVUQsQ0FYTTs7OztBQWFBLElBQU1LLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsZUFBRCxFQUFrQkMsWUFBbEIsRUFBbUM7QUFDOUQsTUFBSSxDQUFDLHFCQUFTQSxZQUFULENBQUQsSUFBMkIsQ0FBQyxxQkFBU0EsWUFBWSxDQUFDQyxFQUF0QixDQUFoQyxFQUEyRDtBQUN6REMsd0JBQVFDLEtBQVIsQ0FDRSw0SUFERjs7QUFJQSxXQUFPSixlQUFQO0FBQ0Q7O0FBRUQsTUFBTUssVUFBVSxHQUFHakIsZUFBZSxDQUFDYSxZQUFZLENBQUNDLEVBQWQsQ0FBbEM7QUFDQSxTQUFPWCxNQUFNLENBQUNDLElBQVAsQ0FBWVEsZUFBWixFQUE2QlAsTUFBN0IsQ0FDTCxVQUFDYSxHQUFELEVBQU1YLEdBQU47QUFBQSwyQ0FDS1csR0FETCw0Q0FFR1gsR0FGSCxFQUdJQSxHQUFHLEtBQUssSUFBUixtQ0FDUUssZUFBZSxDQUFDRSxFQUR4QixHQUMrQkcsVUFEL0Isa0RBRVFMLGVBQWUsQ0FBQ0wsR0FBRCxDQUZ2QixHQUVpQ1UsVUFGakMsR0FFZ0RqQixlQUFlLENBQUNhLFlBQVksQ0FBQ04sR0FBRCxDQUFaLElBQXFCLEVBQXRCLENBRi9ELENBSEo7QUFBQSxHQURLLEVBUUwsRUFSSyxDQUFQO0FBVUQsQ0FwQk0iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge2lzT2JqZWN0fSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBDb25zb2xlIGZyb20gJ2dsb2JhbC9jb25zb2xlJztcblxuLy8gRmxhdCBtZXNzYWdlcyBzaW5jZSByZWFjdC1pbnRsIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCBuZXN0ZWQgc3RydWN0dXJlc1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vbWVkaXVtLmNvbS9zaXJlbi1hcHBhcmVsLXByZXNzL2ludGVybmF0aW9uYWxpemF0aW9uLWFuZC1sb2NhbGl6YXRpb24tb2Ytc2lyZW5hcHBhcmVsLWV1LXNpcmVuYXBwYXJlbC11cy1hbmQtc2lyZW5hcHBhcmVsLWFzaWEtZGRlZTI2NjA2NmEyXG5leHBvcnQgY29uc3QgZmxhdHRlbk1lc3NhZ2VzID0gKG5lc3RlZE1lc3NhZ2VzLCBwcmVmaXggPSAnJykgPT4ge1xuICByZXR1cm4gT2JqZWN0LmtleXMobmVzdGVkTWVzc2FnZXMpLnJlZHVjZSgobWVzc2FnZXMsIGtleSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gbmVzdGVkTWVzc2FnZXNba2V5XTtcbiAgICBjb25zdCBwcmVmaXhlZEtleSA9IHByZWZpeCA/IGAke3ByZWZpeH0uJHtrZXl9YCA6IGtleTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgbWVzc2FnZXNbcHJlZml4ZWRLZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24obWVzc2FnZXMsIGZsYXR0ZW5NZXNzYWdlcyh2YWx1ZSwgcHJlZml4ZWRLZXkpKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9LCB7fSk7XG59O1xuXG5leHBvcnQgY29uc3QgbWVyZ2VNZXNzYWdlcyA9IChkZWZhdWx0TWVzc2FnZXMsIHVzZXJNZXNzYWdlcykgPT4ge1xuICBpZiAoIWlzT2JqZWN0KHVzZXJNZXNzYWdlcykgfHwgIWlzT2JqZWN0KHVzZXJNZXNzYWdlcy5lbikpIHtcbiAgICBDb25zb2xlLmVycm9yKFxuICAgICAgJ21lc3NhZ2Ugc2hvdWxkIGJlIGFuIG9iamVjdCBhbmQgY29udGFpbiBhdCBsZWFzdCB0aGUgYGVuYCB0cmFuc2xhdGlvbi4gUmVhZCBtb3JlIGF0IGh0dHBzOi8vZG9jcy5rZXBsZXIuZ2wvZG9jcy9hcGktcmVmZXJlbmNlL2xvY2FsaXphdGlvbidcbiAgICApO1xuXG4gICAgcmV0dXJuIGRlZmF1bHRNZXNzYWdlcztcbiAgfVxuXG4gIGNvbnN0IHVzZXJFbkZsYXQgPSBmbGF0dGVuTWVzc2FnZXModXNlck1lc3NhZ2VzLmVuKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRlZmF1bHRNZXNzYWdlcykucmVkdWNlKFxuICAgIChhY2MsIGtleSkgPT4gKHtcbiAgICAgIC4uLmFjYyxcbiAgICAgIFtrZXldOlxuICAgICAgICBrZXkgPT09ICdlbidcbiAgICAgICAgICA/IHsuLi5kZWZhdWx0TWVzc2FnZXMuZW4sIC4uLnVzZXJFbkZsYXR9XG4gICAgICAgICAgOiB7Li4uZGVmYXVsdE1lc3NhZ2VzW2tleV0sIC4uLnVzZXJFbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyh1c2VyTWVzc2FnZXNba2V5XSB8fCB7fSl9XG4gICAgfSksXG4gICAge31cbiAgKTtcbn07XG4iXX0=