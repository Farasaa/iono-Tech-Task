"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maybeToDate = maybeToDate;
exports.findPointFieldPairs = findPointFieldPairs;
exports.sortDatasetByColumn = sortDatasetByColumn;
exports.pinTableColumns = pinTableColumns;
exports.copyTable = copyTable;
exports.copyTableAndUpdate = copyTableAndUpdate;
exports.getFieldValueAccessor = getFieldValueAccessor;
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _console = require("global/console");

var _d3Array = require("d3-array");

var _constants = require("@kepler.gl/constants");

var _gpuFilterUtils = require("./gpu-filter-utils");

var _utils = require("@kepler.gl/utils");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Unique identifier of each field
var FID_KEY = 'name';

function maybeToDate(isTime, fieldIdx, format, dc, d) {
  if (isTime) {
    return (0, _utils.timeToUnixMilli)(dc.valueAt(d.index, fieldIdx), format);
  }

  return dc.valueAt(d.index, fieldIdx);
}

var KeplerTable = /*#__PURE__*/function () {
  // fields and data
  // table-injected metadata
  // table-injected metadata
  function KeplerTable(_ref) {
    var info = _ref.info,
        data = _ref.data,
        color = _ref.color,
        metadata = _ref.metadata,
        _ref$supportedFilterT = _ref.supportedFilterTypes,
        supportedFilterTypes = _ref$supportedFilterT === void 0 ? null : _ref$supportedFilterT,
        _ref$disableDataOpera = _ref.disableDataOperation,
        disableDataOperation = _ref$disableDataOpera === void 0 ? false : _ref$disableDataOpera;
    (0, _classCallCheck2["default"])(this, KeplerTable);
    (0, _defineProperty2["default"])(this, "id", void 0);
    (0, _defineProperty2["default"])(this, "type", void 0);
    (0, _defineProperty2["default"])(this, "label", void 0);
    (0, _defineProperty2["default"])(this, "color", void 0);
    (0, _defineProperty2["default"])(this, "fields", void 0);
    (0, _defineProperty2["default"])(this, "dataContainer", void 0);
    (0, _defineProperty2["default"])(this, "allIndexes", void 0);
    (0, _defineProperty2["default"])(this, "filteredIndex", void 0);
    (0, _defineProperty2["default"])(this, "filteredIdxCPU", void 0);
    (0, _defineProperty2["default"])(this, "filteredIndexForDomain", void 0);
    (0, _defineProperty2["default"])(this, "fieldPairs", void 0);
    (0, _defineProperty2["default"])(this, "gpuFilter", void 0);
    (0, _defineProperty2["default"])(this, "filterRecord", void 0);
    (0, _defineProperty2["default"])(this, "filterRecordCPU", void 0);
    (0, _defineProperty2["default"])(this, "changedFilters", void 0);
    (0, _defineProperty2["default"])(this, "sortColumn", void 0);
    (0, _defineProperty2["default"])(this, "sortOrder", void 0);
    (0, _defineProperty2["default"])(this, "pinnedColumns", void 0);
    (0, _defineProperty2["default"])(this, "supportedFilterTypes", void 0);
    (0, _defineProperty2["default"])(this, "disableDataOperation", void 0);
    (0, _defineProperty2["default"])(this, "metadata", void 0);
    // TODO - what to do if validation fails? Can kepler handle exceptions?
    // const validatedData = validateInputData(data);
    // if (!validatedData) {
    //   return this;
    // }
    var dataContainerData = data.cols ? data.cols : data.rows;
    var inputDataFormat = data.cols ? _utils.DataForm.COLS_ARRAY : _utils.DataForm.ROWS_ARRAY;
    var dataContainer = (0, _utils.createDataContainer)(dataContainerData, {
      // @ts-expect-error ProtoDataset field missing property fieldIdx, valueAccessor
      fields: data.fields,
      inputDataFormat: inputDataFormat
    });

    var datasetInfo = _objectSpread({
      id: (0, _utils.generateHashId)(4),
      label: 'new dataset',
      type: ''
    }, info);

    var dataId = datasetInfo.id; // @ts-expect-error

    var fields = data.fields.map(function (f, i) {
      return _objectSpread(_objectSpread({}, f), {}, {
        fieldIdx: i,
        id: f.name,
        displayName: f.displayName || f.name,
        valueAccessor: getFieldValueAccessor(f, i, dataContainer)
      });
    });
    var allIndexes = dataContainer.getPlainIndex();
    var defaultMetadata = {
      id: datasetInfo.id,
      // @ts-ignore
      format: datasetInfo.format || '',
      label: datasetInfo.label || ''
    };
    this.id = datasetInfo.id;
    this.type = datasetInfo.type;
    this.label = datasetInfo.label;
    this.color = color;
    this.metadata = _objectSpread(_objectSpread({}, defaultMetadata), metadata);
    this.dataContainer = dataContainer;
    this.allIndexes = allIndexes;
    this.filteredIndex = allIndexes;
    this.filteredIndexForDomain = allIndexes;
    this.fieldPairs = findPointFieldPairs(fields);
    this.fields = fields;
    this.gpuFilter = (0, _gpuFilterUtils.getGpuFilterProps)([], dataId, fields);
    this.supportedFilterTypes = supportedFilterTypes;
    this.disableDataOperation = disableDataOperation;
  }
  /**
   * update table with new data
   * @param data - new data e.g. the arrow data with new batches loaded
   */


  (0, _createClass2["default"])(KeplerTable, [{
    key: "update",
    value: function update(data) {
      var _this$dataContainer$u, _this$dataContainer;

      var dataContainerData = data.cols ? data.cols : data.rows;
      (_this$dataContainer$u = (_this$dataContainer = this.dataContainer).update) === null || _this$dataContainer$u === void 0 ? void 0 : _this$dataContainer$u.call(_this$dataContainer, dataContainerData);
      this.allIndexes = this.dataContainer.getPlainIndex();
      this.filteredIndex = this.allIndexes;
      this.filteredIndexForDomain = this.allIndexes;
    }
  }, {
    key: "length",
    get: function get() {
      return this.dataContainer.numRows();
    }
    /**
     * Get field
     * @param columnName
     */

  }, {
    key: "getColumnField",
    value: function getColumnField(columnName) {
      var field = this.fields.find(function (fd) {
        return fd[FID_KEY] === columnName;
      });

      this._assetField(columnName, field);

      return field;
    }
    /**
     * Get fieldIdx
     * @param columnName
     */

  }, {
    key: "getColumnFieldIdx",
    value: function getColumnFieldIdx(columnName) {
      var fieldIdx = this.fields.findIndex(function (fd) {
        return fd[FID_KEY] === columnName;
      });

      this._assetField(columnName, Boolean(fieldIdx > -1));

      return fieldIdx;
    }
    /**
     * Get displayFormat
     * @param columnName
     */

  }, {
    key: "getColumnDisplayFormat",
    value: function getColumnDisplayFormat(columnName) {
      var field = this.fields.find(function (fd) {
        return fd[FID_KEY] === columnName;
      });

      this._assetField(columnName, field);

      return field === null || field === void 0 ? void 0 : field.displayFormat;
    }
    /**
     * Get the value of a cell
     */

  }, {
    key: "getValue",
    value: function getValue(columnName, rowIdx) {
      var field = this.getColumnField(columnName);
      return field ? field.valueAccessor({
        index: rowIdx
      }) : null;
    }
    /**
     * Updates existing field with a new object
     * @param fieldIdx
     * @param newField
     */

  }, {
    key: "updateColumnField",
    value: function updateColumnField(fieldIdx, newField) {
      this.fields = Object.assign((0, _toConsumableArray2["default"])(this.fields), (0, _defineProperty2["default"])({}, fieldIdx, newField));
    }
    /**
     * Update dataset color by custom color
     * @param newColor
     */

  }, {
    key: "updateTableColor",
    value: function updateTableColor(newColor) {
      this.color = newColor;
    }
    /**
     * Save filterProps to field and retrieve it
     * @param columnName
     */

  }, {
    key: "getColumnFilterProps",
    value: function getColumnFilterProps(columnName) {
      var fieldIdx = this.getColumnFieldIdx(columnName);

      if (fieldIdx < 0) {
        return null;
      }

      var field = this.fields[fieldIdx];

      if (field.hasOwnProperty('filterProps')) {
        return field.filterProps;
      }

      var fieldDomain = this.getColumnFilterDomain(field);

      if (!fieldDomain) {
        return null;
      }

      var filterProps = (0, _utils.getFilterProps)(field, fieldDomain);

      var newField = _objectSpread(_objectSpread({}, field), {}, {
        filterProps: filterProps
      });

      this.updateColumnField(fieldIdx, newField);
      return filterProps;
    }
    /**
     * Apply filters to dataset, return the filtered dataset with updated `gpuFilter`, `filterRecord`, `filteredIndex`, `filteredIndexForDomain`
     * @param filters
     * @param layers
     * @param opt
     */

  }, {
    key: "filterTable",
    value: function filterTable(filters, layers, opt) {
      var _this = this;

      var dataContainer = this.dataContainer,
          dataId = this.id,
          oldFilterRecord = this.filterRecord,
          fields = this.fields; // if there is no filters

      var filterRecord = (0, _utils.getFilterRecord)(dataId, filters, opt || {});
      this.filterRecord = filterRecord;
      this.gpuFilter = (0, _gpuFilterUtils.getGpuFilterProps)(filters, dataId, fields); // const newDataset = set(['filterRecord'], filterRecord, dataset);

      if (!filters.length) {
        this.filteredIndex = this.allIndexes;
        this.filteredIndexForDomain = this.allIndexes;
        return this;
      }

      this.changedFilters = (0, _utils.diffFilters)(filterRecord, oldFilterRecord); // generate 2 sets of filter result
      // filteredIndex used to calculate layer data
      // filteredIndexForDomain used to calculate layer Domain

      var shouldCalDomain = Boolean(this.changedFilters.dynamicDomain);
      var shouldCalIndex = Boolean(this.changedFilters.cpu);
      var filterResult = {};

      if (shouldCalDomain || shouldCalIndex) {
        var dynamicDomainFilters = shouldCalDomain ? filterRecord.dynamicDomain : null;
        var cpuFilters = shouldCalIndex ? filterRecord.cpu : null;
        var filterFuncs = filters.reduce(function (acc, filter) {
          var fieldIndex = (0, _gpuFilterUtils.getDatasetFieldIndexForFilter)(_this.id, filter);
          var field = fieldIndex !== -1 ? fields[fieldIndex] : null;
          return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, filter.id, (0, _utils.getFilterFunction)(field, _this.id, filter, layers, dataContainer)));
        }, {});
        filterResult = (0, _utils.filterDataByFilterTypes)({
          dynamicDomainFilters: dynamicDomainFilters,
          cpuFilters: cpuFilters,
          filterFuncs: filterFuncs
        }, dataContainer);
      }

      this.filteredIndex = filterResult.filteredIndex || this.filteredIndex;
      this.filteredIndexForDomain = filterResult.filteredIndexForDomain || this.filteredIndexForDomain;
      return this;
    }
    /**
     * Apply filters to a dataset all on CPU, assign to `filteredIdxCPU`, `filterRecordCPU`
     * @param filters
     * @param layers
     */

  }, {
    key: "filterTableCPU",
    value: function filterTableCPU(filters, layers) {
      var opt = {
        cpuOnly: true,
        ignoreDomain: true
      }; // no filter

      if (!filters.length) {
        this.filteredIdxCPU = this.allIndexes;
        this.filterRecordCPU = (0, _utils.getFilterRecord)(this.id, filters, opt);
        return this;
      } // no gpu filter


      if (!filters.find(function (f) {
        return f.gpu;
      })) {
        this.filteredIdxCPU = this.filteredIndex;
        this.filterRecordCPU = (0, _utils.getFilterRecord)(this.id, filters, opt);
        return this;
      } // make a copy for cpu filtering


      var copied = copyTable(this);
      copied.filterRecord = this.filterRecordCPU;
      copied.filteredIndex = this.filteredIdxCPU || [];
      var filtered = copied.filterTable(filters, layers, opt);
      this.filteredIdxCPU = filtered.filteredIndex;
      this.filterRecordCPU = filtered.filterRecord;
      return this;
    }
    /**
     * Calculate field domain based on field type and data
     * for Filter
     */

  }, {
    key: "getColumnFilterDomain",
    value: function getColumnFilterDomain(field) {
      var dataContainer = this.dataContainer;
      var valueAccessor = field.valueAccessor;
      var domain;

      switch (field.type) {
        case _constants.ALL_FIELD_TYPES.real:
        case _constants.ALL_FIELD_TYPES.integer:
          // calculate domain and step
          return (0, _utils.getNumericFieldDomain)(dataContainer, valueAccessor);

        case _constants.ALL_FIELD_TYPES["boolean"]:
          return {
            domain: [true, false]
          };

        case _constants.ALL_FIELD_TYPES.string:
        case _constants.ALL_FIELD_TYPES.date:
          domain = (0, _utils.getOrdinalDomain)(dataContainer, valueAccessor);
          return {
            domain: domain
          };

        case _constants.ALL_FIELD_TYPES.timestamp:
          return (0, _utils.getTimestampFieldDomain)(dataContainer, valueAccessor);

        default:
          return {
            domain: (0, _utils.getOrdinalDomain)(dataContainer, valueAccessor)
          };
      }
    }
    /**
     *  Get the domain of this column based on scale type
     */

  }, {
    key: "getColumnLayerDomain",
    value: function getColumnLayerDomain(field, scaleType) {
      var dataContainer = this.dataContainer,
          filteredIndexForDomain = this.filteredIndexForDomain;

      if (!_constants.SCALE_TYPES[scaleType]) {
        _console.console.error("scale type ".concat(scaleType, " not supported"));

        return null;
      }

      var valueAccessor = field.valueAccessor;

      var indexValueAccessor = function indexValueAccessor(i) {
        return valueAccessor({
          index: i
        });
      };

      var sortFunction = (0, _utils.getSortingFunction)(field.type);

      switch (scaleType) {
        case _constants.SCALE_TYPES.ordinal:
        case _constants.SCALE_TYPES.point:
          // do not recalculate ordinal domain based on filtered data
          // don't need to update ordinal domain every time
          return (0, _utils.getOrdinalDomain)(dataContainer, valueAccessor);

        case _constants.SCALE_TYPES.quantile:
          return (0, _utils.getQuantileDomain)(filteredIndexForDomain, indexValueAccessor, sortFunction);

        case _constants.SCALE_TYPES.log:
          return (0, _utils.getLogDomain)(filteredIndexForDomain, indexValueAccessor);

        case _constants.SCALE_TYPES.quantize:
        case _constants.SCALE_TYPES.linear:
        case _constants.SCALE_TYPES.sqrt:
        default:
          return (0, _utils.getLinearDomain)(filteredIndexForDomain, indexValueAccessor);
      }
    }
    /**
     * Get a sample of rows to calculate layer boundaries
     */
    // getSampleData(rows)

    /**
     * Parse cell value based on column type and return a string representation
     * Value the field value, type the field type
     */
    // parseFieldValue(value, type)
    // sortDatasetByColumn()

    /**
     * Assert whether field exist
     * @param fieldName
     * @param condition
     */

  }, {
    key: "_assetField",
    value: function _assetField(fieldName, condition) {
      if (!condition) {
        _console.console.error("".concat(fieldName, " doesnt exist in dataset ").concat(this.id));
      }
    }
  }]);
  return KeplerTable;
}();

// HELPER FUNCTIONS (MAINLY EXPORTED FOR TEST...)
// have to double excape
var specialCharacterSet = "[#_&@\\.\\-\\ ]";

function foundMatchingFields(re, suffixPair, allNames, fieldName) {
  var partnerIdx = allNames.findIndex(function (d) {
    return d === fieldName.replace(re, function (match) {
      return match.replace(suffixPair[0], suffixPair[1]);
    });
  });
  var altIdx = -1;

  if (partnerIdx > -1) {
    // if found partner, go on and look for altitude
    _constants.ALTITUDE_FIELDS.some(function (alt) {
      altIdx = allNames.findIndex(function (d) {
        return d === fieldName.replace(re, function (match) {
          return match.replace(suffixPair[0], alt);
        });
      });
      return altIdx > -1;
    });
  }

  return {
    partnerIdx: partnerIdx,
    altIdx: altIdx
  };
}
/**
 * Find point fields pairs from fields
 *
 * @param fields
 * @returns found point fields
 */


function findPointFieldPairs(fields) {
  var allNames = fields.map(function (f) {
    return f.name.toLowerCase();
  }); // get list of all fields with matching suffixes

  var acc = [];
  return allNames.reduce(function (carry, fieldName, idx) {
    // This search for pairs will early exit if found.
    var _iterator = _createForOfIteratorHelper(_constants.TRIP_POINT_FIELDS),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var suffixPair = _step.value;
        // match first suffix
        // (^|[#_&@\.\-\ ])lat([#_&@\.\-\ ]|$)
        var re = new RegExp("(^|".concat(specialCharacterSet, ")").concat(suffixPair[0], "(").concat(specialCharacterSet, "|$)"));

        if (re.test(fieldName)) {
          var _foundMatchingFields = foundMatchingFields(re, suffixPair, allNames, fieldName),
              partnerIdx = _foundMatchingFields.partnerIdx,
              altIdx = _foundMatchingFields.altIdx;

          if (partnerIdx > -1) {
            var trimName = fieldName.replace(re, '').trim();
            carry.push({
              defaultName: trimName || 'point',
              pair: _objectSpread({
                lat: {
                  fieldIdx: idx,
                  value: fields[idx].name
                },
                lng: {
                  fieldIdx: partnerIdx,
                  value: fields[partnerIdx].name
                }
              }, altIdx > -1 ? {
                alt: {
                  fieldIdx: altIdx,
                  value: fields[altIdx].name
                }
              } : {}),
              suffix: suffixPair
            });
            return carry;
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return carry;
  }, acc);
}
/**
 *
 * @param dataset
 * @param column
 * @param mode
 * @type
 */


function sortDatasetByColumn(dataset, column, mode) {
  var allIndexes = dataset.allIndexes,
      fields = dataset.fields,
      dataContainer = dataset.dataContainer;
  var fieldIndex = fields.findIndex(function (f) {
    return f.name === column;
  });

  if (fieldIndex < 0) {
    return dataset;
  }

  var sortBy = _constants.SORT_ORDER[mode || ''] || _constants.SORT_ORDER.ASCENDING;

  if (sortBy === _constants.SORT_ORDER.UNSORT) {
    dataset.sortColumn = {};
    dataset.sortOrder = null;
    return dataset;
  }

  var sortFunction = sortBy === _constants.SORT_ORDER.ASCENDING ? _d3Array.ascending : _d3Array.descending;
  var sortOrder = allIndexes.slice().sort(function (a, b) {
    var value1 = dataContainer.valueAt(a, fieldIndex);
    var value2 = dataContainer.valueAt(b, fieldIndex);

    if (!(0, _utils.notNullorUndefined)(value1) && (0, _utils.notNullorUndefined)(value2)) {
      return 1;
    } else if ((0, _utils.notNullorUndefined)(value1) && !(0, _utils.notNullorUndefined)(value2)) {
      return -1;
    }

    return sortFunction(value1, value2);
  });
  dataset.sortColumn = (0, _defineProperty2["default"])({}, column, sortBy);
  dataset.sortOrder = sortOrder;
  return dataset;
}

function pinTableColumns(dataset, column) {
  var field = dataset.getColumnField(column);

  if (!field) {
    return dataset;
  }

  var pinnedColumns;

  if (Array.isArray(dataset.pinnedColumns) && dataset.pinnedColumns.includes(field.name)) {
    // unpin it
    pinnedColumns = dataset.pinnedColumns.filter(function (co) {
      return co !== field.name;
    });
  } else {
    pinnedColumns = (dataset.pinnedColumns || []).concat(field.name);
  } // @ts-ignore


  return copyTableAndUpdate(dataset, {
    pinnedColumns: pinnedColumns
  });
}

function copyTable(original) {
  return Object.assign(Object.create(Object.getPrototypeOf(original)), original);
}
/**
 * @type
 * @returns
 */


function copyTableAndUpdate(original) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Object.entries(options).reduce(function (acc, entry) {
    acc[entry[0]] = entry[1];
    return acc;
  }, copyTable(original));
}

function getFieldValueAccessor(f, i, dc) {
  return maybeToDate.bind(null, // is time
  f.type === _constants.ALL_FIELD_TYPES.timestamp, i, f.format || '', dc);
}

var _default = KeplerTable;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,