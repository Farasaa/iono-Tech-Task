{"version":3,"sources":["../../../../src/encoders/utils/preview-encoder.js"],"names":["FrameEncoder","PreviewEncoder","af","cancelAnimationFrame","canvas","animationFrame","Promise","resolve","requestAnimationFrame"],"mappings":";;;;;;;;;;;;;;AAoBA,OAAOA,YAAP,MAAyB,kBAAzB;;IACqBC,c;;;;;;;;;;;;;;;;;;;;;;;4BAEX;AACN,UAAI,KAAKC,EAAT,EAAa;AACXC,QAAAA,oBAAoB,CAAC,KAAKD,EAAN,CAApB;AACD;AACF;;;;6EACSE,M;;;;;;;;AACFC,gBAAAA,c,GAAiB,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5C,sBAAI,MAAI,CAACL,EAAT,EAAa;AACXC,oBAAAA,oBAAoB,CAAC,MAAI,CAACD,EAAN,CAApB;AACD;;AACD,kBAAA,MAAI,CAACA,EAAL,GAAUM,qBAAqB,CAACD,OAAD,CAA/B;AACD,iBALsB,C;iDAMhBF,c;;;;;;;;;;;;;;;;;;;;;;;;AAGP,oBAAI,KAAKH,EAAT,EAAa;AACXC,kBAAAA,oBAAoB,CAAC,KAAKD,EAAN,CAApB;AACD;;;uBACKI,OAAO,CAACC,OAAR,E;;;;;;;;;;;;;;;;;;;EApBkCP,Y;;SAAvBC,c","sourcesContent":["// Copyright (c) 2020 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport FrameEncoder from '../frame-encoder';\nexport default class PreviewEncoder extends FrameEncoder {\n  af;\n  start() {\n    if (this.af) {\n      cancelAnimationFrame(this.af);\n    }\n  }\n  async add(canvas) {\n    const animationFrame = new Promise(resolve => {\n      if (this.af) {\n        cancelAnimationFrame(this.af);\n      }\n      this.af = requestAnimationFrame(resolve);\n    });\n    return animationFrame;\n  }\n  async save() {\n    if (this.af) {\n      cancelAnimationFrame(this.af);\n    }\n    await Promise.resolve();\n  }\n}\n"],"file":"preview-encoder.js"}