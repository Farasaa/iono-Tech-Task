{"version":3,"file":"row-table-batch-aggregator.js","names":["convertToArrayRow","convertToObjectRow","inferHeadersFromArrayRow","inferHeadersFromObjectRow","DEFAULT_ROW_COUNT","RowTableBatchAggregator","constructor","schema","options","length","objectRows","arrayRows","cursor","_headers","key","index","name","rowCount","addArrayRow","row","Number","isFinite","shape","rowObject","addObjectRow","Array","rowArray","getBatch","rows","slice","batchType","data"],"sources":["../../../../src/lib/table/batches/row-table-batch-aggregator.ts"],"sourcesContent":["// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Schema} from '../../../types/schema';\nimport type {TableBatch} from '../../../types/category-table';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\nimport {\n  convertToArrayRow,\n  convertToObjectRow,\n  inferHeadersFromArrayRow,\n  inferHeadersFromObjectRow\n} from '../simple-table/row-utils';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema | null;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  objectRows: {[columnName: string]: unknown}[] | null = null;\n  arrayRows: unknown[][] | null = null;\n  cursor: number = 0;\n  private _headers: string[] | null = null;\n\n  constructor(schema: Schema | null, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (schema) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // TODO - infer schema at a higher level, instead of hacking headers here?\n    this._headers ||= inferHeadersFromArrayRow(row);\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'object-row-table':\n        const rowObject = convertToObjectRow(row, this._headers);\n        this.addObjectRow(rowObject, cursor);\n        break;\n      case 'array-row-table':\n        this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n        this.arrayRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // TODO - infer schema at a higher level, instead of hacking headers here?\n    this._headers ||= inferHeadersFromObjectRow(row);\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'array-row-table':\n        const rowArray = convertToArrayRow(row, this._headers);\n        this.addArrayRow(rowArray, cursor);\n        break;\n      case 'object-row-table':\n        this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n        this.objectRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.arrayRows || this.objectRows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.arrayRows = null;\n    this.objectRows = null;\n\n    return {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      // @ts-expect-error we should infer a schema\n      schema: this.schema,\n      cursor: this.cursor\n    };\n  }\n}\n"],"mappings":"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"}