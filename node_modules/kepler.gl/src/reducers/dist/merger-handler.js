"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidMerger = isValidMerger;
exports.mergeStateFromMergers = mergeStateFromMergers;
exports.hasPropsToMerge = hasPropsToMerge;
exports.getPropValueToMerger = getPropValueToMerger;
exports.resetStateToMergeProps = resetStateToMergeProps;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _tasks = require("react-palm/tasks");

var _utils = require("@kepler.gl/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function isValidMerger(merger) {
  return (0, _utils.isObject)(merger) && typeof merger.merge === 'function' && (typeof merger.prop === 'string' || Array.isArray(merger.prop));
}
/**
 * Call state updater, return the tasks created by the state update with withTask()
 */


function callFunctionGetTask(fn) {
  var before = (0, _tasks.getGlobalTaskQueue)();
  var ret = fn();
  var after = (0, _tasks.getGlobalTaskQueue)();
  var diff = after.filter(function (t) {
    return !before.includes(t);
  });
  return [ret, diff];
}

function mergeStateFromMergers(state, initialState, mergers, postMergerPayload) {
  // const newDataIds = Object.keys(postMergerPayload.newDataEntries);
  var mergedState = state; // merge state with config to be merged

  var mergerQueue = (0, _toConsumableArray2["default"])(mergers);

  var _loop = function _loop() {
    var merger = mergerQueue.shift();

    if (merger && isValidMerger(merger) && merger.toMergeProp && hasPropsToMerge(state, merger.toMergeProp)) {
      // put the rest of mergers and payload for postMergeUpdater in mergerActionPayload
      // and pass it to current merger, which (if async) knows to continue merging
      var mergerActionPayload = {
        mergers: mergerQueue,
        postMergerPayload: postMergerPayload
      }; // reset toMerge

      var toMerge = getPropValueToMerger(mergedState, merger.toMergeProp, merger.toMergeProp);
      mergedState = resetStateToMergeProps(mergedState, initialState, merger.toMergeProp); // call merger
      // eslint-disable-next-line no-loop-func

      var mergeFunc = function mergeFunc() {
        return merger.merge(mergedState, toMerge, false, mergerActionPayload);
      };

      var _callFunctionGetTask = callFunctionGetTask(mergeFunc),
          _callFunctionGetTask2 = (0, _slicedToArray2["default"])(_callFunctionGetTask, 2),
          updatedState = _callFunctionGetTask2[0],
          newTasks = _callFunctionGetTask2[1];

      mergedState = updatedState; // check if asyncTask was created (time consuming tasks)

      if (newTasks.length && merger.waitToFinish) {
        // skip rest, the async merger will call applyMergerupdater() to continue
        return {
          v: {
            mergedState: mergedState,
            allMerged: false
          }
        };
      }
    }
  };

  while (mergerQueue.length) {
    var _ret = _loop();

    if ((0, _typeof2["default"])(_ret) === "object") return _ret.v;
  } // we merged all mergers in the queue, and we can call post merger now


  return {
    mergedState: mergedState,
    allMerged: true
  };
}

function hasPropsToMerge(state, mergerProps) {
  return Array.isArray(mergerProps) ? Boolean(mergerProps.some(function (p) {
    return state.hasOwnProperty(p);
  })) : typeof mergerProps === 'string' && state.hasOwnProperty(mergerProps);
}

function getPropValueToMerger(state, mergerProps, toMergeProps) {
  return Array.isArray(mergerProps) ? mergerProps.reduce(function (accu, p, i) {
    if (!toMergeProps) return accu;
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, toMergeProps[i], state[p]));
  }, {}) : state[mergerProps];
}

function resetStateToMergeProps(state, initialState, mergerProps) {
  return (0, _utils.toArray)(mergerProps).reduce(function (accu, prop) {
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, prop, initialState[prop]));
  }, state);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXJnZXItaGFuZGxlci50cyJdLCJuYW1lcyI6WyJpc1ZhbGlkTWVyZ2VyIiwibWVyZ2VyIiwibWVyZ2UiLCJwcm9wIiwiQXJyYXkiLCJpc0FycmF5IiwiY2FsbEZ1bmN0aW9uR2V0VGFzayIsImZuIiwiYmVmb3JlIiwicmV0IiwiYWZ0ZXIiLCJkaWZmIiwiZmlsdGVyIiwidCIsImluY2x1ZGVzIiwibWVyZ2VTdGF0ZUZyb21NZXJnZXJzIiwic3RhdGUiLCJpbml0aWFsU3RhdGUiLCJtZXJnZXJzIiwicG9zdE1lcmdlclBheWxvYWQiLCJtZXJnZWRTdGF0ZSIsIm1lcmdlclF1ZXVlIiwic2hpZnQiLCJ0b01lcmdlUHJvcCIsImhhc1Byb3BzVG9NZXJnZSIsIm1lcmdlckFjdGlvblBheWxvYWQiLCJ0b01lcmdlIiwiZ2V0UHJvcFZhbHVlVG9NZXJnZXIiLCJyZXNldFN0YXRlVG9NZXJnZVByb3BzIiwibWVyZ2VGdW5jIiwidXBkYXRlZFN0YXRlIiwibmV3VGFza3MiLCJsZW5ndGgiLCJ3YWl0VG9GaW5pc2giLCJhbGxNZXJnZWQiLCJtZXJnZXJQcm9wcyIsIkJvb2xlYW4iLCJzb21lIiwicCIsImhhc093blByb3BlcnR5IiwidG9NZXJnZVByb3BzIiwicmVkdWNlIiwiYWNjdSIsImkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOzs7Ozs7QUFJTyxTQUFTQSxhQUFULENBQXVCQyxNQUF2QixFQUFxRDtBQUMxRCxTQUNFLHFCQUFTQSxNQUFULEtBQ0EsT0FBT0EsTUFBTSxDQUFDQyxLQUFkLEtBQXdCLFVBRHhCLEtBRUMsT0FBT0QsTUFBTSxDQUFDRSxJQUFkLEtBQXVCLFFBQXZCLElBQW1DQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0osTUFBTSxDQUFDRSxJQUFyQixDQUZwQyxDQURGO0FBS0Q7QUFFRDtBQUNBO0FBQ0E7OztBQUNBLFNBQVNHLG1CQUFULENBQTZCQyxFQUE3QixFQUF3RDtBQUN0RCxNQUFNQyxN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V0FBVyxDQUFDTSxNQUFaLENBQW1CLFVBQUNDLElBQUQsRUFBT0osQ0FBUCxFQUFVSyxDQUFWLEVBQWdCO0FBQ2pDLFFBQUksQ0FBQ0gsWUFBTCxFQUFtQixPQUFPRSxJQUFQO0FBQ25CLDJDQUFXQSxJQUFYLDRDQUFrQkYsWUFBWSxDQUFDRyxDQUFELENBQTlCLEVBQW9DM0IsS0FBSyxDQUFDc0IsQ0FBRCxDQUF6QztBQUNELEdBSEQsRUFHRyxFQUhILENBREcsR0FLSHRCLEtBQUssQ0FBQ21CLFdBQUQsQ0FMVDtBQU1EOztBQUVNLFNBQVNQLHNCQUFULENBQ0xaLEtBREssRUFFTEMsWUFGSyxFQUdMa0IsV0FISyxFQUlMO0FBQ0EsU0FBTyxvQkFBUUEsV0FBUixFQUFxQk0sTUFBckIsQ0FDTCxVQUFDQyxJQUFELEVBQU92QyxJQUFQO0FBQUEsMkNBQ0t1QyxJQURMLDRDQUVHdkMsSUFGSCxFQUVVYyxZQUFZLENBQUNkLElBQUQsQ0FGdEI7QUFBQSxHQURLLEVBS0xhLEtBTEssQ0FBUDtBQU9EIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtnZXRHbG9iYWxUYXNrUXVldWV9IGZyb20gJ3JlYWN0LXBhbG0vdGFza3MnO1xuaW1wb3J0IHtpc09iamVjdCwgdG9BcnJheX0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5pbXBvcnQge1ZhbHVlT2Z9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IHtWaXNTdGF0ZSwgTWVyZ2VyLCBQb3N0TWVyZ2VyUGF5bG9hZH0gZnJvbSAnQGtlcGxlci5nbC9zY2hlbWFzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRNZXJnZXIobWVyZ2VyOiBNZXJnZXI8YW55Pik6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIGlzT2JqZWN0KG1lcmdlcikgJiZcbiAgICB0eXBlb2YgbWVyZ2VyLm1lcmdlID09PSAnZnVuY3Rpb24nICYmXG4gICAgKHR5cGVvZiBtZXJnZXIucHJvcCA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShtZXJnZXIucHJvcCkpXG4gICk7XG59XG5cbi8qKlxuICogQ2FsbCBzdGF0ZSB1cGRhdGVyLCByZXR1cm4gdGhlIHRhc2tzIGNyZWF0ZWQgYnkgdGhlIHN0YXRlIHVwZGF0ZSB3aXRoIHdpdGhUYXNrKClcbiAqL1xuZnVuY3Rpb24gY2FsbEZ1bmN0aW9uR2V0VGFzayhmbjogKCkgPT4gYW55KTogW2FueSwgYW55XSB7XG4gIGNvbnN0IGJlZm9yZSA9IGdldEdsb2JhbFRhc2tRdWV1ZSgpO1xuICBjb25zdCByZXQgPSBmbigpO1xuICBjb25zdCBhZnRlciA9IGdldEdsb2JhbFRhc2tRdWV1ZSgpO1xuICBjb25zdCBkaWZmID0gYWZ0ZXIuZmlsdGVyKHQgPT4gIWJlZm9yZS5pbmNsdWRlcyh0KSk7XG4gIHJldHVybiBbcmV0LCBkaWZmXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU3RhdGVGcm9tTWVyZ2VyczxTdGF0ZSBleHRlbmRzIFZpc1N0YXRlPihcbiAgc3RhdGU6IFN0YXRlLFxuICBpbml0aWFsU3RhdGU6IFN0YXRlLFxuICBtZXJnZXJzOiBNZXJnZXI8YW55PltdLFxuICBwb3N0TWVyZ2VyUGF5bG9hZDogUG9zdE1lcmdlclBheWxvYWRcbik6IHtcbiAgbWVyZ2VkU3RhdGU6IFN0YXRlO1xuICBhbGxNZXJnZWQ6IGJvb2xlYW47XG59IHtcbiAgLy8gY29uc3QgbmV3RGF0YUlkcyA9IE9iamVjdC5rZXlzKHBvc3RNZXJnZXJQYXlsb2FkLm5ld0RhdGFFbnRyaWVzKTtcbiAgbGV0IG1lcmdlZFN0YXRlID0gc3RhdGU7XG4gIC8vIG1lcmdlIHN0YXRlIHdpdGggY29uZmlnIHRvIGJlIG1lcmdlZFxuICBjb25zdCBtZXJnZXJRdWV1ZSA9IFsuLi5tZXJnZXJzXTtcblxuICB3aGlsZSAobWVyZ2VyUXVldWUubGVuZ3RoKSB7XG4gICAgY29uc3QgbWVyZ2VyID0gbWVyZ2VyUXVldWUuc2hpZnQoKTtcblxuICAgIGlmIChcbiAgICAgIG1lcmdlciAmJlxuICAgICAgaXNWYWxpZE1lcmdlcihtZXJnZXIpICYmXG4gICAgICBtZXJnZXIudG9NZXJnZVByb3AgJiZcbiAgICAgIGhhc1Byb3BzVG9NZXJnZShzdGF0ZSwgbWVyZ2VyLnRvTWVyZ2VQcm9wKVxuICAgICkge1xuICAgICAgLy8gcHV0IHRoZSByZXN0IG9mIG1lcmdlcnMgYW5kIHBheWxvYWQgZm9yIHBvc3RNZXJnZVVwZGF0ZXIgaW4gbWVyZ2VyQWN0aW9uUGF5bG9hZFxuICAgICAgLy8gYW5kIHBhc3MgaXQgdG8gY3VycmVudCBtZXJnZXIsIHdoaWNoIChpZiBhc3luYykga25vd3MgdG8gY29udGludWUgbWVyZ2luZ1xuICAgICAgY29uc3QgbWVyZ2VyQWN0aW9uUGF5bG9hZCA9IHtcbiAgICAgICAgbWVyZ2VyczogbWVyZ2VyUXVldWUsXG4gICAgICAgIHBvc3RNZXJnZXJQYXlsb2FkXG4gICAgICB9O1xuICAgICAgLy8gcmVzZXQgdG9NZXJnZVxuICAgICAgY29uc3QgdG9NZXJnZSA9IGdldFByb3BWYWx1ZVRvTWVyZ2VyKG1lcmdlZFN0YXRlLCBtZXJnZXIudG9NZXJnZVByb3AsIG1lcmdlci50b01lcmdlUHJvcCk7XG5cbiAgICAgIG1lcmdlZFN0YXRlID0gcmVzZXRTdGF0ZVRvTWVyZ2VQcm9wcyhtZXJnZWRTdGF0ZSwgaW5pdGlhbFN0YXRlLCBtZXJnZXIudG9NZXJnZVByb3ApO1xuICAgICAgLy8gY2FsbCBtZXJnZXJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIGNvbnN0IG1lcmdlRnVuYyA9ICgpID0+IG1lcmdlci5tZXJnZShtZXJnZWRTdGF0ZSwgdG9NZXJnZSwgZmFsc2UsIG1lcmdlckFjdGlvblBheWxvYWQpO1xuICAgICAgY29uc3QgW3VwZGF0ZWRTdGF0ZSwgbmV3VGFza3NdID0gY2FsbEZ1bmN0aW9uR2V0VGFzayhtZXJnZUZ1bmMpO1xuXG4gICAgICBtZXJnZWRTdGF0ZSA9IHVwZGF0ZWRTdGF0ZTtcblxuICAgICAgLy8gY2hlY2sgaWYgYXN5bmNUYXNrIHdhcyBjcmVhdGVkICh0aW1lIGNvbnN1bWluZyB0YXNrcylcbiAgICAgIGlmIChuZXdUYXNrcy5sZW5ndGggJiYgbWVyZ2VyLndhaXRUb0ZpbmlzaCkge1xuICAgICAgICAvLyBza2lwIHJlc3QsIHRoZSBhc3luYyBtZXJnZXIgd2lsbCBjYWxsIGFwcGx5TWVyZ2VydXBkYXRlcigpIHRvIGNvbnRpbnVlXG4gICAgICAgIHJldHVybiB7bWVyZ2VkU3RhdGUsIGFsbE1lcmdlZDogZmFsc2V9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHdlIG1lcmdlZCBhbGwgbWVyZ2VycyBpbiB0aGUgcXVldWUsIGFuZCB3ZSBjYW4gY2FsbCBwb3N0IG1lcmdlciBub3dcbiAgcmV0dXJuIHttZXJnZWRTdGF0ZSwgYWxsTWVyZ2VkOiB0cnVlfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3BzVG9NZXJnZTxTdGF0ZSBleHRlbmRzIHt9PihcbiAgc3RhdGU6IFN0YXRlLFxuICBtZXJnZXJQcm9wczogc3RyaW5nIHwgc3RyaW5nW11cbik6IGJvb2xlYW4ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShtZXJnZXJQcm9wcylcbiAgICA/IEJvb2xlYW4obWVyZ2VyUHJvcHMuc29tZShwID0+IHN0YXRlLmhhc093blByb3BlcnR5KHApKSlcbiAgICA6IHR5cGVvZiBtZXJnZXJQcm9wcyA9PT0gJ3N0cmluZycgJiYgc3RhdGUuaGFzT3duUHJvcGVydHkobWVyZ2VyUHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcFZhbHVlVG9NZXJnZXI8U3RhdGUgZXh0ZW5kcyB7fT4oXG4gIHN0YXRlOiBTdGF0ZSxcbiAgbWVyZ2VyUHJvcHM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICB0b01lcmdlUHJvcHM/OiBzdHJpbmcgfCBzdHJpbmdbXVxuKTogUGFydGlhbDxTdGF0ZT4gfCBWYWx1ZU9mPFN0YXRlPiB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1lcmdlclByb3BzKVxuICAgID8gbWVyZ2VyUHJvcHMucmVkdWNlKChhY2N1LCBwLCBpKSA9PiB7XG4gICAgICAgIGlmICghdG9NZXJnZVByb3BzKSByZXR1cm4gYWNjdTtcbiAgICAgICAgcmV0dXJuIHsuLi5hY2N1LCBbdG9NZXJnZVByb3BzW2ldXTogc3RhdGVbcF19O1xuICAgICAgfSwge30pXG4gICAgOiBzdGF0ZVttZXJnZXJQcm9wc107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldFN0YXRlVG9NZXJnZVByb3BzPFN0YXRlIGV4dGVuZHMgVmlzU3RhdGU+KFxuICBzdGF0ZTogU3RhdGUsXG4gIGluaXRpYWxTdGF0ZTogU3RhdGUsXG4gIG1lcmdlclByb3BzOiBzdHJpbmcgfCBzdHJpbmdbXVxuKSB7XG4gIHJldHVybiB0b0FycmF5KG1lcmdlclByb3BzKS5yZWR1Y2UoXG4gICAgKGFjY3UsIHByb3ApID0+ICh7XG4gICAgICAuLi5hY2N1LFxuICAgICAgW3Byb3BdOiBpbml0aWFsU3RhdGVbcHJvcF1cbiAgICB9KSxcbiAgICBzdGF0ZVxuICApO1xufVxuIl19