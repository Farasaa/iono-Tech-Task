"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canvasToArrayBuffer = canvasToArrayBuffer;
exports.checkIfBlank = checkIfBlank;
exports.pad = pad;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function pad(n) {
  return String("0000000".concat(n)).slice(-7);
}

function canvasToArrayBuffer(_x, _x2) {
  return _canvasToArrayBuffer.apply(this, arguments);
}

function _canvasToArrayBuffer() {
  _canvasToArrayBuffer = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(canvas, type) {
    var quality,
        base64,
        response,
        _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            quality = _args.length > 2 && _args[2] !== undefined ? _args[2] : undefined;
            base64 = canvas.toDataURL(type, quality);
            _context.next = 4;
            return fetch(base64);

          case 4:
            response = _context.sent;
            _context.next = 7;
            return response.arrayBuffer();

          case 7:
            return _context.abrupt("return", _context.sent);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _canvasToArrayBuffer.apply(this, arguments);
}

function checkIfBlank(b64) {
  if (b64.length < 100000) {
    console.warn('Possibly blank image!', b64, b64.length);
    return true;
  }

  return false;
}
//# sourceMappingURL=index.js.map