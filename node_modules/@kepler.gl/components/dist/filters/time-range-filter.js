"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeRangeSliderFieldsSelector = timeRangeSliderFieldsSelector;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _timeRangeSlider = _interopRequireDefault(require("../common/time-range-slider"));

var _constants = require("@kepler.gl/constants");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/*
 * TimeRangeFilter -> TimeRangeSlider -> RangeSlider
 */
function timeRangeSliderFieldsSelector(filter) {
  var hasUserFormat = typeof filter.timeFormat === 'string';
  var timeFormat = (hasUserFormat ? filter.timeFormat : filter.defaultTimeFormat) || _constants.DEFAULT_TIME_FORMAT;
  return {
    id: filter.id,
    domain: filter.domain,
    bins: filter.bins,
    value: filter.value,
    plotType: filter.plotType,
    lineChart: filter.lineChart,
    yAxis: filter.yAxis,
    step: filter.step,
    speed: filter.speed,
    histogram: filter.view === _constants.FILTER_VIEW_TYPES.enlarged ? filter.enlargedHistogram : filter.histogram,
    animationWindow: filter.animationWindow,
    isAnimating: filter.isAnimating,
    timezone: filter.timezone,
    timeFormat: timeFormat,
    isMinified: filter.view === _constants.FILTER_VIEW_TYPES.minified,
    isEnlarged: filter.view === _constants.FILTER_VIEW_TYPES.enlarged
  };
}

TimeRangeFilterFactory.deps = [_timeRangeSlider["default"]];

function TimeRangeFilterFactory(TimeRangeSlider) {
  var TimeRangeFilterComponent = function TimeRangeFilterComponent(_ref) {
    var filter = _ref.filter,
        setFilter = _ref.setFilter,
        isAnimatable = _ref.isAnimatable,
        toggleAnimation = _ref.toggleAnimation,
        hideTimeTitle = _ref.hideTimeTitle,
        timeline = _ref.timeline;
    return /*#__PURE__*/_react["default"].createElement(TimeRangeSlider, (0, _extends2["default"])({}, timeRangeSliderFieldsSelector(filter), {
      onChange: setFilter,
      toggleAnimation: toggleAnimation,
      isAnimatable: isAnimatable,
      hideTimeTitle: hideTimeTitle,
      timeline: timeline
    }));
  };

  return TimeRangeFilterComponent;
}

var _default = TimeRangeFilterFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maWx0ZXJzL3RpbWUtcmFuZ2UtZmlsdGVyLnRzeCJdLCJuYW1lcyI6WyJ0aW1lUmFuZ2VTbGlkZXJGaWVsZHNTZWxlY3RvciIsImZpbHRlciIsImhhc1VzZXJGb3JtYXQiLCJ0aW1lRm9ybWF0IiwiZGVmYXVsdFRpbWVGb3JtYXQiLCJERUZBVUxUX1RJTUVfRk9STUFUIiwiaWQiLCJkb21haW4iLCJiaW5zIiwidmFsdWUiLCJwbG90VHlwZSIsImxpbmVDaGFydCIsInlBeGlzIiwic3RlcCIsInNwZWVkIiwiaGlzdG9ncmFtIiwidmlldyIsIkZJTFRFUl9WSUVXX1RZUEVTIiwiZW5sYXJnZWQiLCJlbmxhcmdlZEhpc3RvZ3JhbSIsImFuaW1hdGlvbldpbmRvdyIsImlzQW5pbWF0aW5nIiwidGltZXpvbmUiLCJpc01pbmlmaWVkIiwibWluaWZpZWQiLCJpc0VubGFyZ2VkIiwiVGltZVJhbmdlRmlsdGVyRmFjdG9yeSIsImRlcHMiLCJUaW1lUmFuZ2VTbGlkZXJGYWN0b3J5IiwiVGltZVJhbmdlU2xpZGVyIiwiVGltZVJhbmdlRmlsdGVyQ29tcG9uZW50Iiwic2V0RmlsdGVyIiwiaXNBbmltYXRhYmxlIiwidG9nZ2xlQW5pbWF0aW9uIiwiaGlkZVRpbWVUaXRsZSIsInRpbWVsaW5lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFMQTtBQUNBOztBQU9BO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLDZCQUFULENBQXVDQyxNQUF2QyxFQUFnRTtBQUNyRSxNQUFNQyxhQUFhLEdBQUcsT0FBT0QsTUFBTSxDQUFDRSxVQUFkLEtBQTZCLFFBQW5EO0FBQ0EsTUFBTUEsVUFBVSxHQUNkLENBQUNELGFBQWEsR0FBR0QsTUFBTSxDQUFDRSxVQUFWLEdBQXVCRixNQUFNLENBQUNHLGlCQUE1QyxLQUFrRUMsOEJBRHBFO0FBR0EsU0FBTztBQUNMQyxJQUFBQSxFQUFFLEVBQUVMLE1BQU0sQ0FBQ0ssRUFETjtBQUVMQyxJQUFBQSxNQUFNLEVBQUVOLE1BQU0sQ0FBQ00sTUFGVjtBQUdMQyxJQUFBQSxJQUFJLEVBQUVQLE1BQU0sQ0FBQ08sSUFIUjtBQUlMQyxJQUFBQSxLQUFLLEVBQUVSLE1BQU0sQ0FBQ1EsS0FKVDtBQUtMQyxJQUFBQSxRQUFRLEVBQUVULE1BQU0sQ0FBQ1MsUUFMWjtBQU1MQyxJQUFBQSxTQUFTLEVBQUVWLE1BQU0sQ0FBQ1UsU0FOYjtBQU9MQyxJQUFBQSxLQUFLLEVBQUVYLE1BQU0sQ0FBQ1csS0FQVDtBQVFMQyxJQUFBQSxJQUFJLEVBQUVaLE1BQU0sQ0FBQ1ksSUFSUjtBQVNMQyxJQUFBQSxLQUFLLEVBQUViLE1BQU0sQ0FBQ2EsS0FUVDtBQVVMQyxJQUFBQSxTQUFTLEVBQ1BkLE1BQU0sQ0FBQ2UsSUFBUCxLQUFnQkMsNkJBQWtCQyxRQUFsQyxHQUE2Q2pCLE1BQU0sQ0FBQ2tCLGlCQUFwRCxHQUF3RWxCLE1BQU0sQ0FBQ2MsU0FYNUU7QUFZTEssSUFBQUEsZUFBZSxFQUFFbkIsTUFBTSxDQUFDbUIsZUFabkI7QUFhTEMsSUFBQUEsV0FBVyxFQUFFcEIsTUFBTSxDQUFDb0IsV0FiZjtBQWNMQyxJQUFBQSxRQUFRLEVBQUVyQixNQUFNLENBQUNxQixRQWRaO0FBZUxuQixJQUFBQSxVQUFVLEVBQVZBLFVBZks7QUFnQkxvQixJQUFBQSxVQUFVLEVBQUV0QixNQUFNLENBQUNlLElBQVAsS0FBZ0JDLDZCQUFrQk8sUUFoQnpDO0FBaUJMQyxJQUFBQSxVQUFVLEVBQUV4QixNQUFNLENBQUNlLElBQVAsS0FBZ0JDLDZCQUFrQkM7QUFqQnpDLEdBQVA7QUFtQkQ7O0FBRURRLHNCQUFzQixDQUFDQyxJQUF2QixHQUE4QixDQUFDQywyQkFBRCxDQUE5Qjs7QUFFQSxTQUFTRixzQkFBVCxDQUFnQ0csZUFBaEMsRUFBNEY7QUFDMUYsTUFBTUMsd0JBQXdELEdBQUcsU0FBM0RBLHdCQUEyRDtBQUFBLFFBQy9EN0IsTUFEK0QsUUFDL0RBLE1BRCtEO0FBQUEsUUFFL0Q4QixTQUYrRCxRQUUvREEsU0FGK0Q7QUFBQSxRQUcvREMsWUFIK0QsUUFHL0RBLFlBSCtEO0FBQUEsUUFJL0RDLGVBSitELFFBSS9EQSxlQUorRDtBQUFBLFFBSy9EQyxhQUwrRCxRQUsvREEsYUFMK0Q7QUFBQSxRQU0vREMsUUFOK0QsUUFNL0RBLFFBTitEO0FBQUEsd0JBUS9ELGdDQUFDLGVBQUQsZ0NBQ01uQyw2QkFBNkIsQ0FBQ0MsTUFBRCxDQURuQztBQUVFLE1BQUEsUUFBUSxFQUFFOEIsU0FGWjtBQUdFLE1BQUEsZUFBZSxFQUFFRSxlQUhuQjtBQUlFLE1BQUEsWUFBWSxFQUFFRCxZQUpoQjtBQUtFLE1BQUEsYUFBYSxFQUFFRSxhQUxqQjtBQU1FLE1BQUEsUUFBUSxFQUFFQztBQU5aLE9BUitEO0FBQUEsR0FBakU7O0FBa0JBLFNBQU9MLHdCQUFQO0FBQ0Q7O2VBRWNKLHNCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaW1lUmFuZ2VTbGlkZXJGYWN0b3J5IGZyb20gJy4uL2NvbW1vbi90aW1lLXJhbmdlLXNsaWRlcic7XG5pbXBvcnQge0RFRkFVTFRfVElNRV9GT1JNQVQsIEZJTFRFUl9WSUVXX1RZUEVTfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge1RpbWVSYW5nZUZpbHRlcn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge1RpbWVSYW5nZUZpbHRlclByb3BzfSBmcm9tICcuL3R5cGVzJztcbi8qXG4gKiBUaW1lUmFuZ2VGaWx0ZXIgLT4gVGltZVJhbmdlU2xpZGVyIC0+IFJhbmdlU2xpZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lUmFuZ2VTbGlkZXJGaWVsZHNTZWxlY3RvcihmaWx0ZXI6IFRpbWVSYW5nZUZpbHRlcikge1xuICBjb25zdCBoYXNVc2VyRm9ybWF0ID0gdHlwZW9mIGZpbHRlci50aW1lRm9ybWF0ID09PSAnc3RyaW5nJztcbiAgY29uc3QgdGltZUZvcm1hdCA9XG4gICAgKGhhc1VzZXJGb3JtYXQgPyBmaWx0ZXIudGltZUZvcm1hdCA6IGZpbHRlci5kZWZhdWx0VGltZUZvcm1hdCkgfHwgREVGQVVMVF9USU1FX0ZPUk1BVDtcblxuICByZXR1cm4ge1xuICAgIGlkOiBmaWx0ZXIuaWQsXG4gICAgZG9tYWluOiBmaWx0ZXIuZG9tYWluLFxuICAgIGJpbnM6IGZpbHRlci5iaW5zLFxuICAgIHZhbHVlOiBmaWx0ZXIudmFsdWUsXG4gICAgcGxvdFR5cGU6IGZpbHRlci5wbG90VHlwZSxcbiAgICBsaW5lQ2hhcnQ6IGZpbHRlci5saW5lQ2hhcnQsXG4gICAgeUF4aXM6IGZpbHRlci55QXhpcyxcbiAgICBzdGVwOiBmaWx0ZXIuc3RlcCxcbiAgICBzcGVlZDogZmlsdGVyLnNwZWVkLFxuICAgIGhpc3RvZ3JhbTpcbiAgICAgIGZpbHRlci52aWV3ID09PSBGSUxURVJfVklFV19UWVBFUy5lbmxhcmdlZCA/IGZpbHRlci5lbmxhcmdlZEhpc3RvZ3JhbSA6IGZpbHRlci5oaXN0b2dyYW0sXG4gICAgYW5pbWF0aW9uV2luZG93OiBmaWx0ZXIuYW5pbWF0aW9uV2luZG93LFxuICAgIGlzQW5pbWF0aW5nOiBmaWx0ZXIuaXNBbmltYXRpbmcsXG4gICAgdGltZXpvbmU6IGZpbHRlci50aW1lem9uZSxcbiAgICB0aW1lRm9ybWF0LFxuICAgIGlzTWluaWZpZWQ6IGZpbHRlci52aWV3ID09PSBGSUxURVJfVklFV19UWVBFUy5taW5pZmllZCxcbiAgICBpc0VubGFyZ2VkOiBmaWx0ZXIudmlldyA9PT0gRklMVEVSX1ZJRVdfVFlQRVMuZW5sYXJnZWRcbiAgfTtcbn1cblxuVGltZVJhbmdlRmlsdGVyRmFjdG9yeS5kZXBzID0gW1RpbWVSYW5nZVNsaWRlckZhY3RvcnldO1xuXG5mdW5jdGlvbiBUaW1lUmFuZ2VGaWx0ZXJGYWN0b3J5KFRpbWVSYW5nZVNsaWRlcjogUmV0dXJuVHlwZTx0eXBlb2YgVGltZVJhbmdlU2xpZGVyRmFjdG9yeT4pIHtcbiAgY29uc3QgVGltZVJhbmdlRmlsdGVyQ29tcG9uZW50OiBSZWFjdC5GQzxUaW1lUmFuZ2VGaWx0ZXJQcm9wcz4gPSAoe1xuICAgIGZpbHRlcixcbiAgICBzZXRGaWx0ZXIsXG4gICAgaXNBbmltYXRhYmxlLFxuICAgIHRvZ2dsZUFuaW1hdGlvbixcbiAgICBoaWRlVGltZVRpdGxlLFxuICAgIHRpbWVsaW5lXG4gIH0pID0+IChcbiAgICA8VGltZVJhbmdlU2xpZGVyXG4gICAgICB7Li4udGltZVJhbmdlU2xpZGVyRmllbGRzU2VsZWN0b3IoZmlsdGVyKX1cbiAgICAgIG9uQ2hhbmdlPXtzZXRGaWx0ZXJ9XG4gICAgICB0b2dnbGVBbmltYXRpb249e3RvZ2dsZUFuaW1hdGlvbn1cbiAgICAgIGlzQW5pbWF0YWJsZT17aXNBbmltYXRhYmxlfVxuICAgICAgaGlkZVRpbWVUaXRsZT17aGlkZVRpbWVUaXRsZX1cbiAgICAgIHRpbWVsaW5lPXt0aW1lbGluZX1cbiAgICAvPlxuICApO1xuXG4gIHJldHVybiBUaW1lUmFuZ2VGaWx0ZXJDb21wb25lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRpbWVSYW5nZUZpbHRlckZhY3Rvcnk7XG4iXX0=