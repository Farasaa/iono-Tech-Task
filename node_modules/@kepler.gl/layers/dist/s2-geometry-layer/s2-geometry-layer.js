"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.S2VisConfigs = exports.defaultLineWidth = exports.defaultElevation = exports.S2TokenAccessor = exports.s2RequiredColumns = exports.S2_TOKEN_FIELDS = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _geoLayers = require("@deck.gl/geo-layers");

var _constants = require("@kepler.gl/constants");

var _baseLayer = _interopRequireDefault(require("../base-layer"));

var _s2LayerIcon = _interopRequireDefault(require("./s2-layer-icon"));

var _s2Utils = require("./s2-utils");

var _utils = require("@kepler.gl/utils");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var zoomFactorValue = 8;
var S2_TOKEN_FIELDS = {
  token: ['s2', 's2_token']
};
exports.S2_TOKEN_FIELDS = S2_TOKEN_FIELDS;
var s2RequiredColumns = ['token'];
exports.s2RequiredColumns = s2RequiredColumns;

var S2TokenAccessor = function S2TokenAccessor(_ref) {
  var token = _ref.token;
  return function (dc) {
    return function (d) {
      return dc.valueAt(d.index, token.fieldIdx);
    };
  };
};

exports.S2TokenAccessor = S2TokenAccessor;
var defaultElevation = 500;
exports.defaultElevation = defaultElevation;
var defaultLineWidth = 1;
exports.defaultLineWidth = defaultLineWidth;
var S2VisConfigs = {
  // Filled color
  opacity: 'opacity',
  colorRange: 'colorRange',
  filled: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.filled), {}, {
    type: 'boolean',
    label: 'Fill Color',
    defaultValue: true,
    property: 'filled'
  }),
  // stroke
  thickness: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.thickness), {}, {
    defaultValue: 0.5
  }),
  strokeColor: 'strokeColor',
  strokeColorRange: 'strokeColorRange',
  sizeRange: 'strokeWidthRange',
  stroked: 'stroked',
  // height
  enable3d: 'enable3d',
  elevationScale: 'elevationScale',
  enableElevationZoomFactor: 'enableElevationZoomFactor',
  heightRange: 'elevationRange',
  // wireframe
  wireframe: 'wireframe'
};
exports.S2VisConfigs = S2VisConfigs;

var S2GeometryLayer = /*#__PURE__*/function (_Layer) {
  (0, _inherits2["default"])(S2GeometryLayer, _Layer);

  var _super = _createSuper(S2GeometryLayer);

  function S2GeometryLayer(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, S2GeometryLayer);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "dataToFeature", void 0);

    _this.registerVisConfig(S2VisConfigs);

    _this.getPositionAccessor = function (dataContainer) {
      return S2TokenAccessor(_this.config.columns)(dataContainer);
    };

    return _this;
  }

  (0, _createClass2["default"])(S2GeometryLayer, [{
    key: "type",
    get: function get() {
      return 's2';
    }
  }, {
    key: "name",
    get: function get() {
      return 'S2';
    }
  }, {
    key: "requiredLayerColumns",
    get: function get() {
      return s2RequiredColumns;
    }
  }, {
    key: "layerIcon",
    get: function get() {
      return _s2LayerIcon["default"];
    }
  }, {
    key: "visualChannels",
    get: function get() {
      var visualChannels = (0, _get2["default"])((0, _getPrototypeOf2["default"])(S2GeometryLayer.prototype), "visualChannels", this);
      return {
        color: _objectSpread(_objectSpread({}, visualChannels.color), {}, {
          accessor: 'getFillColor'
        }),
        size: _objectSpread(_objectSpread({}, visualChannels.size), {}, {
          property: 'stroke',
          accessor: 'getLineWidth',
          condition: function condition(config) {
            return config.visConfig.stroked;
          },
          defaultValue: defaultLineWidth
        }),
        strokeColor: {
          property: 'strokeColor',
          field: 'strokeColorField',
          scale: 'strokeColorScale',
          domain: 'strokeColorDomain',
          range: 'strokeColorRange',
          key: 'strokeColor',
          channelScaleType: _constants.CHANNEL_SCALES.color,
          accessor: 'getLineColor',
          condition: function condition(config) {
            return config.visConfig.stroked;
          },
          nullValue: visualChannels.color.nullValue,
          defaultValue: function defaultValue(config) {
            return config.visConfig.strokeColor || config.color;
          }
        },
        height: {
          property: 'height',
          field: 'heightField',
          scale: 'heightScale',
          domain: 'heightDomain',
          range: 'heightRange',
          key: 'height',
          channelScaleType: _constants.CHANNEL_SCALES.size,
          accessor: 'getElevation',
          condition: function condition(config) {
            return config.visConfig.enable3d;
          },
          nullValue: 0,
          defaultValue: defaultElevation
        }
      };
    }
  }, {
    key: "getDefaultLayerConfig",
    value: function getDefaultLayerConfig(props) {
      return _objectSpread(_objectSpread({}, (0, _get2["default"])((0, _getPrototypeOf2["default"])(S2GeometryLayer.prototype), "getDefaultLayerConfig", this).call(this, props)), {}, {
        // add height visual channel
        heightField: null,
        heightDomain: [0, 1],
        heightScale: 'linear',
        // add stroke color visual channel
        strokeColorField: null,
        strokeColorDomain: [0, 1],
        strokeColorScale: 'quantile'
      });
    }
  }, {
    key: "calculateDataAttribute",
    value: function calculateDataAttribute(_ref2, getS2Token) {
      var dataContainer = _ref2.dataContainer,
          filteredIndex = _ref2.filteredIndex;
      var data = [];

      for (var i = 0; i < filteredIndex.length; i++) {
        var index = filteredIndex[i];
        var token = getS2Token({
          index: index
        });

        if ((0, _s2Utils.validS2Token)(token)) {
          data.push({
            index: index,
            token: token
          });
        }
      }

      return data;
    }
  }, {
    key: "updateLayerMeta",
    value: function updateLayerMeta(dataContainer, getS2Token) {
      // add safe row flag
      var centroids = dataContainer.reduce(function (acc, entry, index) {
        var s2Token = getS2Token({
          index: index
        });

        if ((0, _s2Utils.validS2Token)(s2Token)) {
          acc.push((0, _s2Utils.getS2Center)(s2Token));
        }

        return acc;
      }, [], true);
      var centroidsDataContainer = (0, _utils.createDataContainer)(centroids);
      var bounds = this.getPointsBounds(centroidsDataContainer, function (d, dc) {
        return [dc.valueAt(d.index, 0), dc.valueAt(d.index, 1)];
      });
      this.dataToFeature = {
        centroids: centroids
      };
      this.updateMeta({
        bounds: bounds
      });
    }
  }, {
    key: "formatLayerData",
    value: function formatLayerData(datasets, oldLayerData) {
      var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (this.config.dataId === null) {
        return {};
      }

      var _datasets$this$config = datasets[this.config.dataId],
          gpuFilter = _datasets$this$config.gpuFilter,
          dataContainer = _datasets$this$config.dataContainer;
      var getS2Token = this.getPositionAccessor(dataContainer);

      var _this$updateData = this.updateData(datasets, oldLayerData),
          data = _this$updateData.data;

      var accessors = this.getAttributeAccessors({
        dataContainer: dataContainer
      });
      return _objectSpread({
        data: data,
        getS2Token: getS2Token,
        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)()
      }, accessors);
    }
  }, {
    key: "renderLayer",
    value: function renderLayer(opts) {
      var data = opts.data,
          gpuFilter = opts.gpuFilter,
          interactionConfig = opts.interactionConfig,
          mapState = opts.mapState;
      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);
      var eleZoomFactor = this.getElevationZoomFactor(mapState);
      var zoomFactor = this.getZoomFactor(mapState);
      var config = this.config;
      var visConfig = config.visConfig;

      var updateTriggers = _objectSpread(_objectSpread({}, this.getVisualChannelUpdateTriggers()), {}, {
        getFilterValue: gpuFilter.filterValueUpdateTriggers
      });

      return [new _geoLayers.S2Layer(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), interactionConfig), data), {}, {
        getS2Token: function getS2Token(d) {
          return d.token;
        },
        autoHighlight: visConfig.enable3d,
        highlightColor: _constants.HIGHLIGH_COLOR_3D,
        // stroke
        lineWidthScale: visConfig.thickness * zoomFactor * zoomFactorValue,
        stroked: visConfig.stroked,
        lineMiterLimit: 2,
        // Filled color
        filled: visConfig.filled,
        opacity: visConfig.opacity,
        wrapLongitude: false,
        // Elevation
        elevationScale: visConfig.elevationScale * eleZoomFactor,
        extruded: visConfig.enable3d,
        wireframe: visConfig.wireframe,
        pickable: true,
        updateTriggers: updateTriggers
      }))];
    }
  }], [{
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(_ref3) {
      var _ref3$fields = _ref3.fields,
          fields = _ref3$fields === void 0 ? [] : _ref3$fields;
      var foundColumns = this.findDefaultColumnField(S2_TOKEN_FIELDS, fields);

      if (!foundColumns || !foundColumns.length) {
        return {
          props: []
        };
      }

      return {
        props: foundColumns.map(function (columns) {
          return {
            isVisible: true,
            label: 'S2',
            columns: columns
          };
        })
      };
    }
  }]);
  return S2GeometryLayer;
}(_baseLayer["default"]);

exports["default"] = S2GeometryLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zMi1nZW9tZXRyeS1sYXllci9zMi1nZW9tZXRyeS1sYXllci50cyJdLCJuYW1lcyI6WyJ6b29tRmFjdG9yVmFsdWUiLCJTMl9UT0tFTl9GSUVMRFMiLCJ0b2tlbiIsInMyUmVxdWlyZWRDb2x1bW5zIiwiUzJUb2tlbkFjY2Vzc29yIiwiZGMiLCJkIiwidmFsdWVBdCIsImluZGV4IiwiZmllbGRJZHgiLCJkZWZhdWx0RWxldmF0aW9uIiwiZGVmYXVsdExpbmVXaWR0aCIsIlMyVmlzQ29uZmlncyIsIm9wYWNpdHkiLCJjb2xvclJhbmdlIiwiZmlsbGVkIiwiTEFZRVJfVklTX0NPTkZJR1MiLCJ0eXBlIiwibGFiZWwiLCJkZWZhdWx0VmFsdWUiLCJwcm9wZXJ0eSIsInRoaWNrbmVzcyIsInN0cm9rZUNvbG9yIiwic3Ryb2tlQ29sb3JSYW5nZSIsInNpemVSYW5nZSIsInN0cm9rZWQiLCJlbmFibGUzZCIsImVsZXZhdGlvblNjYWxlIiwiZW5hYmxlRWxldmF0aW9uWm9vbUZhY3RvciIsImhlaWdodFJhbmdlIiwid2lyZWZyYW1lIiwiUzJHZW9tZXRyeUxheWVyIiwicHJvcHMiLCJyZWdpc3RlclZpc0NvbmZpZyIsImdldFBvc2l0aW9uQWNjZXNzb3IiLCJkYXRhQ29udGFpbmVyIiwiY29uZmlnIiwiY29sdW1ucyIsIlMyTGF5ZXJJY29uIiwidmlzdWFsQ2hhbm5lbHMiLCJjb2xvciIsImFjY2Vzc29yIiwic2l6ZSIsImNvbmRpdGlvbiIsInZpc0NvbmZpZyIsImZpZWxkIiwic2NhbGUiLCJkb21haW4iLCJyYW5nZSIsImtleSIsImNoYW5uZWxTY2FsZVR5cGUiLCJDSEFOTkVMX1NDQUxFUyIsIm51bGxWYWx1ZSIsImhlaWdodCIsImhlaWdodEZpZWxkIiwiaGVpZ2h0RG9tYWluIiwiaGVpZ2h0U2NhbGUiLCJzdHJva2VDb2xvckZpZWxkIiwic3Ryb2tlQ29sb3JEb21haW4iLCJzdHJva2VDb2xvclNjYWxlIiwiZ2V0UzJUb2tlbiIsImZpbHRlcmVkSW5kZXgiLCJkYXRhIiwiaSIsImxlbmd0aCIsInB1c2giLCJjZW50cm9pZHMiLCJyZWR1Y2UiLCJhY2MiLCJlbnRyeSIsInMyVG9rZW4iLCJjZW50cm9pZHNEYXRhQ29udGFpbmVyIiwiYm91bmRzIiwiZ2V0UG9pbnRzQm91bmRzIiwiZGF0YVRvRmVhdHVyZSIsInVwZGF0ZU1ldGEiLCJkYXRhc2V0cyIsIm9sZExheWVyRGF0YSIsIm9wdCIsImRhdGFJZCIsImdwdUZpbHRlciIsInVwZGF0ZURhdGEiLCJhY2Nlc3NvcnMiLCJnZXRBdHRyaWJ1dGVBY2Nlc3NvcnMiLCJnZXRGaWx0ZXJWYWx1ZSIsImZpbHRlclZhbHVlQWNjZXNzb3IiLCJvcHRzIiwiaW50ZXJhY3Rpb25Db25maWciLCJtYXBTdGF0ZSIsImRlZmF1bHRMYXllclByb3BzIiwiZ2V0RGVmYXVsdERlY2tMYXllclByb3BzIiwiZWxlWm9vbUZhY3RvciIsImdldEVsZXZhdGlvblpvb21GYWN0b3IiLCJ6b29tRmFjdG9yIiwiZ2V0Wm9vbUZhY3RvciIsInVwZGF0ZVRyaWdnZXJzIiwiZ2V0VmlzdWFsQ2hhbm5lbFVwZGF0ZVRyaWdnZXJzIiwiZmlsdGVyVmFsdWVVcGRhdGVUcmlnZ2VycyIsIlMyTGF5ZXIiLCJhdXRvSGlnaGxpZ2h0IiwiaGlnaGxpZ2h0Q29sb3IiLCJISUdITElHSF9DT0xPUl8zRCIsImxpbmVXaWR0aFNjYWxlIiwibGluZU1pdGVyTGltaXQiLCJ3cmFwTG9uZ2l0dWRlIiwiZXh0cnVkZWQiLCJwaWNrYWJsZSIsImZpZWxkcyIsImZvdW5kQ29sdW1ucyIsImZpbmREZWZhdWx0Q29sdW1uRmllbGQiLCJtYXAiLCJpc1Zpc2libGUiLCJMYXllciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQU9BOztBQWtCQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQXFEQSxJQUFNQSxlQUFlLEdBQUcsQ0FBeEI7QUFFTyxJQUFNQyxlQUVaLEdBQUc7QUFDRkMsRUFBQUEsS0FBSyxFQUFF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SUFEdUI7QUFFbEM3RixZQUFBQSxLQUFLLEVBQUUsSUFGMkI7QUFHbENtQixZQUFBQSxPQUFPLEVBQVBBO0FBSGtDLFdBQUw7QUFBQSxTQUF4QjtBQURGLE9BQVA7QUFPRDs7O0VBbkcwQzJFLHFCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtTMkxheWVyfSBmcm9tICdAZGVjay5nbC9nZW8tbGF5ZXJzJztcbmltcG9ydCB7XG4gIEhJR0hMSUdIX0NPTE9SXzNELFxuICBDSEFOTkVMX1NDQUxFUyxcbiAgQ29sb3JSYW5nZSxcbiAgTEFZRVJfVklTX0NPTkZJR1Ncbn0gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtkZWZhdWx0IGFzIEtlcGxlclRhYmxlfSBmcm9tICdAa2VwbGVyLmdsL3RhYmxlJztcbmltcG9ydCBMYXllciwge1xuICBMYXllckJhc2VDb25maWcsXG4gIExheWVyQmFzZUNvbmZpZ1BhcnRpYWwsXG4gIExheWVyQ29sb3JDb25maWcsXG4gIExheWVyQ29sdW1uLFxuICBMYXllclNpemVDb25maWcsXG4gIExheWVyU3Ryb2tlQ29sb3JDb25maWcsXG4gIExheWVySGVpZ2h0Q29uZmlnXG59IGZyb20gJy4uL2Jhc2UtbGF5ZXInO1xuaW1wb3J0IHtcbiAgTWVyZ2UsXG4gIFJHQkNvbG9yLFxuICBWaXNDb25maWdCb29sZWFuLFxuICBWaXNDb25maWdDb2xvclJhbmdlLFxuICBWaXNDb25maWdDb2xvclNlbGVjdCxcbiAgVmlzQ29uZmlnTnVtYmVyLFxuICBWaXNDb25maWdSYW5nZVxufSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCBTMkxheWVySWNvbiBmcm9tICcuL3MyLWxheWVyLWljb24nO1xuaW1wb3J0IHtnZXRTMkNlbnRlciwgdmFsaWRTMlRva2VufSBmcm9tICcuL3MyLXV0aWxzJztcbmltcG9ydCB7RGF0YUNvbnRhaW5lckludGVyZmFjZSwgY3JlYXRlRGF0YUNvbnRhaW5lcn0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFMyR2VvbWV0cnlMYXllclZpc0NvbmZpZ1NldHRpbmdzID0ge1xuICBvcGFjaXR5OiBWaXNDb25maWdOdW1iZXI7XG4gIGNvbG9yUmFuZ2U6IFZpc0NvbmZpZ0NvbG9yUmFuZ2U7XG4gIGZpbGxlZDogVmlzQ29uZmlnQm9vbGVhbjtcbiAgdGhpY2tuZXNzOiBWaXNDb25maWdOdW1iZXI7XG4gIHN0cm9rZUNvbG9yOiBWaXNDb25maWdDb2xvclNlbGVjdDtcbiAgc3Ryb2tlQ29sb3JSYW5nZTogVmlzQ29uZmlnQ29sb3JSYW5nZTtcbiAgc2l6ZVJhbmdlOiBWaXNDb25maWdSYW5nZTtcbiAgc3Ryb2tlZDogVmlzQ29uZmlnQm9vbGVhbjtcbiAgZW5hYmxlM2Q6IFZpc0NvbmZpZ0Jvb2xlYW47XG4gIGVsZXZhdGlvblNjYWxlOiBWaXNDb25maWdOdW1iZXI7XG4gIGVuYWJsZUVsZXZhdGlvblpvb21GYWN0b3I6IFZpc0NvbmZpZ0Jvb2xlYW47XG4gIGhlaWdodFJhbmdlOiBWaXNDb25maWdSYW5nZTtcbiAgd2lyZWZyYW1lOiBWaXNDb25maWdCb29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgUzJHZW9tZXRyeUxheWVyQ29sdW1uc0NvbmZpZyA9IHtcbiAgdG9rZW46IExheWVyQ29sdW1uO1xufTtcblxuZXhwb3J0IHR5cGUgUzJHZW9tZXRyeUxheWVyVmlzQ29uZmlnID0ge1xuICBvcGFjaXR5OiBudW1iZXI7XG4gIGNvbG9yUmFuZ2U6IENvbG9yUmFuZ2U7XG4gIGZpbGxlZDogYm9vbGVhbjtcbiAgdGhpY2tuZXNzOiBudW1iZXI7XG4gIHN0cm9rZUNvbG9yOiBSR0JDb2xvcjtcbiAgc3Ryb2tlQ29sb3JSYW5nZTogQ29sb3JSYW5nZTtcbiAgc2l6ZVJhbmdlOiBbbnVtYmVyLCBudW1iZXJdO1xuICBzdHJva2VkOiBib29sZWFuO1xuICBlbmFibGUzZDogYm9vbGVhbjtcbiAgZWxldmF0aW9uU2NhbGU6IG51bWJlcjtcbiAgZW5hYmxlRWxldmF0aW9uWm9vbUZhY3RvcjogYm9vbGVhbjtcbiAgaGVpZ2h0UmFuZ2U6IFtudW1iZXIsIG51bWJlcl07XG4gIHdpcmVmcmFtZTogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIFMyR2VvbWV0cnlMYXllclZpc3VhbENoYW5uZWxDb25maWcgPSBMYXllckNvbG9yQ29uZmlnICZcbiAgTGF5ZXJTaXplQ29uZmlnICZcbiAgTGF5ZXJTdHJva2VDb2xvckNvbmZpZyAmXG4gIExheWVySGVpZ2h0Q29uZmlnO1xuZXhwb3J0IHR5cGUgUzJHZW9tZXRyeUxheWVyQ29uZmlnID0gTWVyZ2U8XG4gIExheWVyQmFzZUNvbmZpZyxcbiAge2NvbHVtbnM6IFMyR2VvbWV0cnlMYXllckNvbHVtbnNDb25maWc7IHZpc0NvbmZpZzogUzJHZW9tZXRyeUxheWVyVmlzQ29uZmlnfVxuPiAmXG4gIFMyR2VvbWV0cnlMYXllclZpc3VhbENoYW5uZWxDb25maWc7XG5cbmV4cG9ydCB0eXBlIFMyR2VvbWV0cnlMYXllckRhdGEgPSB7XG4gIGluZGV4OiBudW1iZXI7XG4gIHRva2VuOiBhbnk7XG59O1xuXG5jb25zdCB6b29tRmFjdG9yVmFsdWUgPSA4O1xuXG5leHBvcnQgY29uc3QgUzJfVE9LRU5fRklFTERTOiB7XG4gIHRva2VuOiBbJ3MyJywgJ3MyX3Rva2VuJ107XG59ID0ge1xuICB0b2tlbjogWydzMicsICdzMl90b2tlbiddXG59O1xuXG5leHBvcnQgY29uc3QgczJSZXF1aXJlZENvbHVtbnM6IFsndG9rZW4nXSA9IFsndG9rZW4nXTtcbmV4cG9ydCBjb25zdCBTMlRva2VuQWNjZXNzb3IgPSAoe3Rva2VufTogUzJHZW9tZXRyeUxheWVyQ29sdW1uc0NvbmZpZykgPT4gKFxuICBkYzogRGF0YUNvbnRhaW5lckludGVyZmFjZVxuKSA9PiBkID0+IGRjLnZhbHVlQXQoZC5pbmRleCwgdG9rZW4uZmllbGRJZHgpO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEVsZXZhdGlvbiA9IDUwMDtcbmV4cG9ydCBjb25zdCBkZWZhdWx0TGluZVdpZHRoID0gMTtcblxuZXhwb3J0IGNvbnN0IFMyVmlzQ29uZmlnczoge1xuICAvLyBGaWxsZWQgY29sb3JcbiAgb3BhY2l0eTogJ29wYWNpdHknO1xuICBjb2xvclJhbmdlOiAnY29sb3JSYW5nZSc7XG4gIGZpbGxlZDogVmlzQ29uZmlnQm9vbGVhbjtcblxuICAvLyBzdHJva2VcbiAgdGhpY2tuZXNzOiBWaXNDb25maWdOdW1iZXI7XG4gIHN0cm9rZUNvbG9yOiAnc3Ryb2tlQ29sb3InO1xuICBzdHJva2VDb2xvclJhbmdlOiAnc3Ryb2tlQ29sb3JSYW5nZSc7XG4gIHNpemVSYW5nZTogJ3N0cm9rZVdpZHRoUmFuZ2UnO1xuICBzdHJva2VkOiAnc3Ryb2tlZCc7XG5cbiAgLy8gaGVpZ2h0XG4gIGVuYWJsZTNkOiAnZW5hYmxlM2QnO1xuICBlbGV2YXRpb25TY2FsZTogJ2VsZXZhdGlvblNjYWxlJztcbiAgZW5hYmxlRWxldmF0aW9uWm9vbUZhY3RvcjogJ2VuYWJsZUVsZXZhdGlvblpvb21GYWN0b3InO1xuICBoZWlnaHRSYW5nZTogJ2VsZXZhdGlvblJhbmdlJztcblxuICAvLyB3aXJlZnJhbWVcbiAgd2lyZWZyYW1lOiAnd2lyZWZyYW1lJztcbn0gPSB7XG4gIC8vIEZpbGxlZCBjb2xvclxuICBvcGFjaXR5OiAnb3BhY2l0eScsXG4gIGNvbG9yUmFuZ2U6ICdjb2xvclJhbmdlJyxcbiAgZmlsbGVkOiB7XG4gICAgLi4uTEFZRVJfVklTX0NPTkZJR1MuZmlsbGVkLFxuICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICBsYWJlbDogJ0ZpbGwgQ29sb3InLFxuICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICBwcm9wZXJ0eTogJ2ZpbGxlZCdcbiAgfSxcblxuICAvLyBzdHJva2VcbiAgdGhpY2tuZXNzOiB7XG4gICAgLi4uTEFZRVJfVklTX0NPTkZJR1MudGhpY2tuZXNzLFxuICAgIGRlZmF1bHRWYWx1ZTogMC41XG4gIH0sXG4gIHN0cm9rZUNvbG9yOiAnc3Ryb2tlQ29sb3InLFxuICBzdHJva2VDb2xvclJhbmdlOiAnc3Ryb2tlQ29sb3JSYW5nZScsXG4gIHNpemVSYW5nZTogJ3N0cm9rZVdpZHRoUmFuZ2UnLFxuICBzdHJva2VkOiAnc3Ryb2tlZCcsXG5cbiAgLy8gaGVpZ2h0XG4gIGVuYWJsZTNkOiAnZW5hYmxlM2QnLFxuICBlbGV2YXRpb25TY2FsZTogJ2VsZXZhdGlvblNjYWxlJyxcbiAgZW5hYmxlRWxldmF0aW9uWm9vbUZhY3RvcjogJ2VuYWJsZUVsZXZhdGlvblpvb21GYWN0b3InLFxuICBoZWlnaHRSYW5nZTogJ2VsZXZhdGlvblJhbmdlJyxcblxuICAvLyB3aXJlZnJhbWVcbiAgd2lyZWZyYW1lOiAnd2lyZWZyYW1lJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUzJHZW9tZXRyeUxheWVyIGV4dGVuZHMgTGF5ZXIge1xuICBkYXRhVG9GZWF0dXJlOiBhbnk7XG4gIGRlY2xhcmUgdmlzQ29uZmlnU2V0dGluZ3M6IFMyR2VvbWV0cnlMYXllclZpc0NvbmZpZ1NldHRpbmdzO1xuICBkZWNsYXJlIGNvbmZpZzogUzJHZW9tZXRyeUxheWVyQ29uZmlnO1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnJlZ2lzdGVyVmlzQ29uZmlnKFMyVmlzQ29uZmlncyk7XG4gICAgdGhpcy5nZXRQb3NpdGlvbkFjY2Vzc29yID0gKGRhdGFDb250YWluZXI6IERhdGFDb250YWluZXJJbnRlcmZhY2UpID0+XG4gICAgICBTMlRva2VuQWNjZXNzb3IodGhpcy5jb25maWcuY29sdW1ucykoZGF0YUNvbnRhaW5lcik7XG4gIH1cblxuICBnZXQgdHlwZSgpOiAnczInIHtcbiAgICByZXR1cm4gJ3MyJztcbiAgfVxuXG4gIGdldCBuYW1lKCk6ICdTMicge1xuICAgIHJldHVybiAnUzInO1xuICB9XG5cbiAgZ2V0IHJlcXVpcmVkTGF5ZXJDb2x1bW5zKCkge1xuICAgIHJldHVybiBzMlJlcXVpcmVkQ29sdW1ucztcbiAgfVxuXG4gIGdldCBsYXllckljb24oKSB7XG4gICAgcmV0dXJuIFMyTGF5ZXJJY29uO1xuICB9XG5cbiAgZ2V0IHZpc3VhbENoYW5uZWxzKCkge1xuICAgIGNvbnN0IHZpc3VhbENoYW5uZWxzID0gc3VwZXIudmlzdWFsQ2hhbm5lbHM7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIC4uLnZpc3VhbENoYW5uZWxzLmNvbG9yLFxuICAgICAgICBhY2Nlc3NvcjogJ2dldEZpbGxDb2xvcidcbiAgICAgIH0sXG4gICAgICBzaXplOiB7XG4gICAgICAgIC4uLnZpc3VhbENoYW5uZWxzLnNpemUsXG4gICAgICAgIHByb3BlcnR5OiAnc3Ryb2tlJyxcbiAgICAgICAgYWNjZXNzb3I6ICdnZXRMaW5lV2lkdGgnLFxuICAgICAgICBjb25kaXRpb246IGNvbmZpZyA9PiBjb25maWcudmlzQ29uZmlnLnN0cm9rZWQsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdExpbmVXaWR0aFxuICAgICAgfSxcbiAgICAgIHN0cm9rZUNvbG9yOiB7XG4gICAgICAgIHByb3BlcnR5OiAnc3Ryb2tlQ29sb3InLFxuICAgICAgICBmaWVsZDogJ3N0cm9rZUNvbG9yRmllbGQnLFxuICAgICAgICBzY2FsZTogJ3N0cm9rZUNvbG9yU2NhbGUnLFxuICAgICAgICBkb21haW46ICdzdHJva2VDb2xvckRvbWFpbicsXG4gICAgICAgIHJhbmdlOiAnc3Ryb2tlQ29sb3JSYW5nZScsXG4gICAgICAgIGtleTogJ3N0cm9rZUNvbG9yJyxcbiAgICAgICAgY2hhbm5lbFNjYWxlVHlwZTogQ0hBTk5FTF9TQ0FMRVMuY29sb3IsXG4gICAgICAgIGFjY2Vzc29yOiAnZ2V0TGluZUNvbG9yJyxcbiAgICAgICAgY29uZGl0aW9uOiBjb25maWcgPT4gY29uZmlnLnZpc0NvbmZpZy5zdHJva2VkLFxuICAgICAgICBudWxsVmFsdWU6IHZpc3VhbENoYW5uZWxzLmNvbG9yLm51bGxWYWx1ZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBjb25maWcgPT4gY29uZmlnLnZpc0NvbmZpZy5zdHJva2VDb2xvciB8fCBjb25maWcuY29sb3JcbiAgICAgIH0sXG4gICAgICBoZWlnaHQ6IHtcbiAgICAgICAgcHJvcGVydHk6ICdoZWlnaHQnLFxuICAgICAgICBmaWVsZDogJ2hlaWdodEZpZWxkJyxcbiAgICAgICAgc2NhbGU6ICdoZWlnaHRTY2FsZScsXG4gICAgICAgIGRvbWFpbjogJ2hlaWdodERvbWFpbicsXG4gICAgICAgIHJhbmdlOiAnaGVpZ2h0UmFuZ2UnLFxuICAgICAgICBrZXk6ICdoZWlnaHQnLFxuICAgICAgICBjaGFubmVsU2NhbGVUeXBlOiBDSEFOTkVMX1NDQUxFUy5zaXplLFxuICAgICAgICBhY2Nlc3NvcjogJ2dldEVsZXZhdGlvbicsXG4gICAgICAgIGNvbmRpdGlvbjogY29uZmlnID0+IGNvbmZpZy52aXNDb25maWcuZW5hYmxlM2QsXG4gICAgICAgIG51bGxWYWx1ZTogMCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0RWxldmF0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGdldERlZmF1bHRMYXllckNvbmZpZyhwcm9wczogTGF5ZXJCYXNlQ29uZmlnUGFydGlhbCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdXBlci5nZXREZWZhdWx0TGF5ZXJDb25maWcocHJvcHMpLFxuXG4gICAgICAvLyBhZGQgaGVpZ2h0IHZpc3VhbCBjaGFubmVsXG4gICAgICBoZWlnaHRGaWVsZDogbnVsbCxcbiAgICAgIGhlaWdodERvbWFpbjogWzAsIDFdLFxuICAgICAgaGVpZ2h0U2NhbGU6ICdsaW5lYXInLFxuXG4gICAgICAvLyBhZGQgc3Ryb2tlIGNvbG9yIHZpc3VhbCBjaGFubmVsXG4gICAgICBzdHJva2VDb2xvckZpZWxkOiBudWxsLFxuICAgICAgc3Ryb2tlQ29sb3JEb21haW46IFswLCAxXSxcbiAgICAgIHN0cm9rZUNvbG9yU2NhbGU6ICdxdWFudGlsZSdcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGZpbmREZWZhdWx0TGF5ZXJQcm9wcyh7ZmllbGRzID0gW119OiBLZXBsZXJUYWJsZSkge1xuICAgIGNvbnN0IGZvdW5kQ29sdW1ucyA9IHRoaXMuZmluZERlZmF1bHRDb2x1bW5GaWVsZChTMl9UT0tFTl9GSUVMRFMsIGZpZWxkcyk7XG4gICAgaWYgKCFmb3VuZENvbHVtbnMgfHwgIWZvdW5kQ29sdW1ucy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7cHJvcHM6IFtdfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcHJvcHM6IGZvdW5kQ29sdW1ucy5tYXAoY29sdW1ucyA9PiAoe1xuICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgIGxhYmVsOiAnUzInLFxuICAgICAgICBjb2x1bW5zXG4gICAgICB9KSlcbiAgICB9O1xuICB9XG5cbiAgY2FsY3VsYXRlRGF0YUF0dHJpYnV0ZSh7ZGF0YUNvbnRhaW5lciwgZmlsdGVyZWRJbmRleH06IEtlcGxlclRhYmxlLCBnZXRTMlRva2VuKSB7XG4gICAgY29uc3QgZGF0YTogUzJHZW9tZXRyeUxheWVyRGF0YVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWx0ZXJlZEluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGZpbHRlcmVkSW5kZXhbaV07XG4gICAgICBjb25zdCB0b2tlbiA9IGdldFMyVG9rZW4oe2luZGV4fSk7XG4gICAgICBpZiAodmFsaWRTMlRva2VuKHRva2VuKSkge1xuICAgICAgICBkYXRhLnB1c2goe1xuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIHRva2VuXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHVwZGF0ZUxheWVyTWV0YShkYXRhQ29udGFpbmVyLCBnZXRTMlRva2VuKSB7XG4gICAgLy8gYWRkIHNhZmUgcm93IGZsYWdcbiAgICBjb25zdCBjZW50cm9pZHMgPSBkYXRhQ29udGFpbmVyLnJlZHVjZShcbiAgICAgIChhY2MsIGVudHJ5LCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBzMlRva2VuID0gZ2V0UzJUb2tlbih7aW5kZXh9KTtcbiAgICAgICAgaWYgKHZhbGlkUzJUb2tlbihzMlRva2VuKSkge1xuICAgICAgICAgIGFjYy5wdXNoKGdldFMyQ2VudGVyKHMyVG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LFxuICAgICAgW10sXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIGNvbnN0IGNlbnRyb2lkc0RhdGFDb250YWluZXIgPSBjcmVhdGVEYXRhQ29udGFpbmVyKGNlbnRyb2lkcyk7XG4gICAgY29uc3QgYm91bmRzID0gdGhpcy5nZXRQb2ludHNCb3VuZHMoY2VudHJvaWRzRGF0YUNvbnRhaW5lciwgKGQsIGRjKSA9PiBbXG4gICAgICBkYy52YWx1ZUF0KGQuaW5kZXgsIDApLFxuICAgICAgZGMudmFsdWVBdChkLmluZGV4LCAxKVxuICAgIF0pO1xuICAgIHRoaXMuZGF0YVRvRmVhdHVyZSA9IHtjZW50cm9pZHN9O1xuICAgIHRoaXMudXBkYXRlTWV0YSh7Ym91bmRzfSk7XG4gIH1cblxuICBmb3JtYXRMYXllckRhdGEoZGF0YXNldHMsIG9sZExheWVyRGF0YSwgb3B0ID0ge30pIHtcbiAgICBpZiAodGhpcy5jb25maWcuZGF0YUlkID09PSBudWxsKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHtncHVGaWx0ZXIsIGRhdGFDb250YWluZXJ9ID0gZGF0YXNldHNbdGhpcy5jb25maWcuZGF0YUlkXTtcbiAgICBjb25zdCBnZXRTMlRva2VuID0gdGhpcy5nZXRQb3NpdGlvbkFjY2Vzc29yKGRhdGFDb250YWluZXIpO1xuICAgIGNvbnN0IHtkYXRhfSA9IHRoaXMudXBkYXRlRGF0YShkYXRhc2V0cywgb2xkTGF5ZXJEYXRhKTtcblxuICAgIGNvbnN0IGFjY2Vzc29ycyA9IHRoaXMuZ2V0QXR0cmlidXRlQWNjZXNzb3JzKHtkYXRhQ29udGFpbmVyfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGF0YSxcbiAgICAgIGdldFMyVG9rZW4sXG4gICAgICBnZXRGaWx0ZXJWYWx1ZTogZ3B1RmlsdGVyLmZpbHRlclZhbHVlQWNjZXNzb3IoZGF0YUNvbnRhaW5lcikoKSxcbiAgICAgIC4uLmFjY2Vzc29yc1xuICAgIH07XG4gIH1cblxuICByZW5kZXJMYXllcihvcHRzKSB7XG4gICAgY29uc3Qge2RhdGEsIGdwdUZpbHRlciwgaW50ZXJhY3Rpb25Db25maWcsIG1hcFN0YXRlfSA9IG9wdHM7XG5cbiAgICBjb25zdCBkZWZhdWx0TGF5ZXJQcm9wcyA9IHRoaXMuZ2V0RGVmYXVsdERlY2tMYXllclByb3BzKG9wdHMpO1xuXG4gICAgY29uc3QgZWxlWm9vbUZhY3RvciA9IHRoaXMuZ2V0RWxldmF0aW9uWm9vbUZhY3RvcihtYXBTdGF0ZSk7XG4gICAgY29uc3Qgem9vbUZhY3RvciA9IHRoaXMuZ2V0Wm9vbUZhY3RvcihtYXBTdGF0ZSk7XG4gICAgY29uc3Qge2NvbmZpZ30gPSB0aGlzO1xuICAgIGNvbnN0IHt2aXNDb25maWd9ID0gY29uZmlnO1xuXG4gICAgY29uc3QgdXBkYXRlVHJpZ2dlcnMgPSB7XG4gICAgICAuLi50aGlzLmdldFZpc3VhbENoYW5uZWxVcGRhdGVUcmlnZ2VycygpLFxuICAgICAgZ2V0RmlsdGVyVmFsdWU6IGdwdUZpbHRlci5maWx0ZXJWYWx1ZVVwZGF0ZVRyaWdnZXJzXG4gICAgfTtcblxuICAgIHJldHVybiBbXG4gICAgICBuZXcgUzJMYXllcih7XG4gICAgICAgIC4uLmRlZmF1bHRMYXllclByb3BzLFxuICAgICAgICAuLi5pbnRlcmFjdGlvbkNvbmZpZyxcbiAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgZ2V0UzJUb2tlbjogKGQ6IGFueSkgPT4gZC50b2tlbixcblxuICAgICAgICBhdXRvSGlnaGxpZ2h0OiB2aXNDb25maWcuZW5hYmxlM2QsXG4gICAgICAgIGhpZ2hsaWdodENvbG9yOiBISUdITElHSF9DT0xPUl8zRCxcblxuICAgICAgICAvLyBzdHJva2VcbiAgICAgICAgbGluZVdpZHRoU2NhbGU6IHZpc0NvbmZpZy50aGlja25lc3MgKiB6b29tRmFjdG9yICogem9vbUZhY3RvclZhbHVlLFxuICAgICAgICBzdHJva2VkOiB2aXNDb25maWcuc3Ryb2tlZCxcbiAgICAgICAgbGluZU1pdGVyTGltaXQ6IDIsXG5cbiAgICAgICAgLy8gRmlsbGVkIGNvbG9yXG4gICAgICAgIGZpbGxlZDogdmlzQ29uZmlnLmZpbGxlZCxcbiAgICAgICAgb3BhY2l0eTogdmlzQ29uZmlnLm9wYWNpdHksXG4gICAgICAgIHdyYXBMb25naXR1ZGU6IGZhbHNlLFxuXG4gICAgICAgIC8vIEVsZXZhdGlvblxuICAgICAgICBlbGV2YXRpb25TY2FsZTogdmlzQ29uZmlnLmVsZXZhdGlvblNjYWxlICogZWxlWm9vbUZhY3RvcixcbiAgICAgICAgZXh0cnVkZWQ6IHZpc0NvbmZpZy5lbmFibGUzZCxcblxuICAgICAgICB3aXJlZnJhbWU6IHZpc0NvbmZpZy53aXJlZnJhbWUsXG5cbiAgICAgICAgcGlja2FibGU6IHRydWUsXG5cbiAgICAgICAgdXBkYXRlVHJpZ2dlcnNcbiAgICAgIH0pXG4gICAgXTtcbiAgfVxufVxuIl19