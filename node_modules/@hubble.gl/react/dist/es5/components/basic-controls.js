"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = BasicControls;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@hubble.gl/core");

var _encoderDropdown = _interopRequireDefault(require("./encoder-dropdown"));

function BasicControls(_ref) {
  var adapter = _ref.adapter,
      busy = _ref.busy,
      setBusy = _ref.setBusy,
      encoderSettings = _ref.encoderSettings,
      _ref$updateCamera = _ref.updateCamera,
      updateCamera = _ref$updateCamera === void 0 ? undefined : _ref$updateCamera;

  var _useState = (0, _react.useState)('gif'),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      encoder = _useState2[0],
      setEncoder = _useState2[1];

  var onRender = function onRender() {
    if (encoder === 'preview') {
      adapter.render(_core.PreviewEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    } else if (encoder === 'webm') {
      adapter.render(_core.WebMEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    } else if (encoder === 'jpeg') {
      adapter.render(_core.JPEGSequenceEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    } else if (encoder === 'png') {
      adapter.render(_core.PNGSequenceEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    } else if (encoder === 'gif') {
      adapter.render(_core.GifEncoder, encoderSettings, function () {
        return setBusy(false);
      }, updateCamera);
    }

    setBusy(true);
  };

  var onStop = function onStop() {
    adapter.stop(function () {
      return setBusy(false);
    });
  };

  return _react["default"].createElement("div", null, _react["default"].createElement(_encoderDropdown["default"], {
    disabled: busy,
    encoder: encoder,
    setEncoder: setEncoder
  }), _react["default"].createElement("button", {
    disabled: busy,
    onClick: onRender
  }, "Render"), _react["default"].createElement("button", {
    onClick: onStop
  }, "Stop"));
}
//# sourceMappingURL=basic-controls.js.map