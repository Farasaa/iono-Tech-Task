import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { GIFBuilder } from '@loaders.gl/video';
import FrameEncoder from '../frame-encoder';

var GifEncoder = function (_FrameEncoder) {
  _inherits(GifEncoder, _FrameEncoder);

  var _super = _createSuper(GifEncoder);

  function GifEncoder(settings) {
    var _this;

    _classCallCheck(this, GifEncoder);

    _this = _super.call(this, settings);
    _this.mimeType = 'image/gif';
    _this.extension = '.gif';
    _this.gifBuilder = null;
    _this.options = {};

    if (settings.gif) {
      _this.options = settings.gif;
    }

    _this.options.width = _this.options.width || 720;
    _this.options.height = _this.options.height || 480;
    _this.options.numWorkers = _this.options.numWorkers || 4;
    _this.options.sampleInterval = _this.options.sampleInterval || 10;
    _this.source = 'images';
    _this.start = _this.start.bind(_assertThisInitialized(_this));
    _this.add = _this.add.bind(_assertThisInitialized(_this));
    _this.save = _this.save.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(GifEncoder, [{
    key: "start",
    value: function start() {
      this.gifBuilder = new GIFBuilder(_objectSpread(_objectSpread({
        source: this.source
      }, this.options), {}, {
        interval: 1 / this.framerate
      }));
    }
  }, {
    key: "add",
    value: function () {
      var _add = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(canvas) {
        var dataUrl;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.source === 'images')) {
                  _context.next = 4;
                  break;
                }

                dataUrl = canvas.toDataURL('image/jpeg', 0.8);
                _context.next = 4;
                return this.gifBuilder.add(dataUrl);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function add(_x) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.gifBuilder.build());

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function save() {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }]);

  return GifEncoder;
}(FrameEncoder);

export { GifEncoder as default };
//# sourceMappingURL=gif-encoder.js.map