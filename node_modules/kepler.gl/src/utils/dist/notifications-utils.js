"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNotification = createNotification;
exports.exportImageError = exports.successNotification = exports.errorNotification = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _utils = require("./utils");

var _constants = require("@kepler.gl/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Creates a notification
 */
function createNotification(_ref) {
  var _ref$message = _ref.message,
      message = _ref$message === void 0 ? _constants.DEFAULT_NOTIFICATION_MESSAGE : _ref$message,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? _constants.DEFAULT_NOTIFICATION_TYPES.info : _ref$type,
      _ref$topic = _ref.topic,
      topic = _ref$topic === void 0 ? _constants.DEFAULT_NOTIFICATION_TOPICS.global : _ref$topic,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? (0, _utils.generateHashId)(_constants.DEFAULT_UUID_COUNT) : _ref$id,
      _ref$count = _ref.count,
      count = _ref$count === void 0 ? 1 : _ref$count,
      options = (0, _objectWithoutProperties2["default"])(_ref, ["message", "type", "topic", "id", "count"]);
  return _objectSpread(_objectSpread({}, options), {}, {
    id: id,
    message: message,
    type: type,
    topic: topic,
    count: count > 99 ? 99 : count // no more than 2 digits

  });
}
/**
 * Creates an error notification
 * @param options
 * @returns {{topic, id, message, type: (null|number)}}
 */


var errorNotification = function errorNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _constants.DEFAULT_NOTIFICATION_TYPES.error
  });
};
/**
 * Creates a success notification
 * @param options
 * @returns {{topic, id, message, type: null}}
 */


exports.errorNotification = errorNotification;

var successNotification = function successNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _constants.DEFAULT_NOTIFICATION_TYPES.success
  });
};

exports.successNotification = successNotification;

var exportImageError = function exportImageError(options) {
  return errorNotification(_objectSpread(_objectSpread({}, options), {}, {
    id: 'EXPORT_IMAGE_ERROR_ID',
    topic: _constants.DEFAULT_NOTIFICATION_TOPICS.global,
    message: "Failed to export image, please take a screenshot of the javascript console, report the with [this link](".concat(_constants.BUG_REPORT_LINK, ") ")
  }));
};

exports.exportImageError = exportImageError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ub3RpZmljYXRpb25zLXV0aWxzLnRzIl0sIm5hbWVzIjpbImNyZWF0ZU5vdGlmaWNhdGlvbiIsIm1lc3NhZ2UiLCJERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFIiwidHlwZSIsIkRFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTIiwiaW5mbyIsInRvcGljIiwiREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTIiwiZ2xvYmFsIiwiaWQiLCJERUZBVUxUX1VVSURfQ09VTlQiLCJjb3VudCIsIm9wdGlvbnMiLCJlcnJvck5vdGlmaWNhdGlvbiIsImVycm9yIiwic3VjY2Vzc05vdGlmaWNhdGlvbiIsInN1Y2Nlc3MiLCJleHBvcnRJbWFnZUVycm9yIiwiQlVHX1JFUE9SVF9MSU5LIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUdBOztBQUVBOzs7Ozs7QUFnQkE7QUFDQTtBQUNBO0FBQ08sU0FBU0Esa0JBQVQsT0FPaUM7QUFBQSwwQkFOdENDLE9BTXNDO0FBQUEsTUFOdENBLE9BTXNDLDZCQU41QkMsdUNBTTRCO0FBQUEsdUJBTHRDQyxJQUtzQztBQUFBLE1BTHRDQSxJQUtzQywwQkFML0JDLHNDQUEyQkMsSUFLSTtBQUFBLHdCQUp0Q0MsS0FJc0M7QUFBQSxNQUp0Q0EsS0FJc0MsMkJBSjlCQyx1Q0FBNEJDLE1BSUU7QUFBQSxxQkFIdENDLEVBR3NDO0FBQUEsTUFIdENBLEVBR3NDLHdCQUhqQywyQkFBZUMsNkJBQWYsQ0FHaUM7QUFBQSx3QkFGdENDLEtBRXNDO0FBQUEsTUFGdENBLEtBRXNDLDJCQUY5QixDQUU4QjtBQUFBLE1BRG5DQyxPQUNtQztBQUN0Qyx5Q0FDS0EsT0FETDtBQUVFSCxJQUFBQSxFQUFFLEVBQUZBLEVBRkY7QUFHRVIsSUFBQUEsT0FBTyxFQUFQQSxPQUhGO0FBSUVFLElBQUFBLElBQUksRUFBSkEsSUFKRjtBQUtFRyxJQUFBQSxLQUFLLEVBQUxBLEtBTEY7QUFNRUssSUFBQUEsS0FBSyxFQUFFQSxLQUFLLEdBQUcsRUFBUixHQUFhLEVBQWIsR0FBa0JBLEtBTjNCLENBTWlDOztBQU5qQztBQVFEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sSUFBTUUsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFBRCxPQUFPO0FBQUEseUNBQ25DWixrQkFBa0IsQ0FBQ1ksT0FBRCxDQURpQjtBQUV0Q1QsSUFBQUEsSUFBSSxFQUFFQyxzQ0FBMkJVO0FBRks7QUFBQSxDQUFqQztBQUtQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ08sSUFBTUMsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUFBSCxPQUFPO0FBQUEseUNBQ3JDWixrQkFBa0IsQ0FBQ1ksT0FBRCxDQURtQjtBQUV4Q1QsSUFBQUEsSUFBSSxFQUFFQyxzQ0FBMkJZO0FBRk87QUFBQSxDQUFuQzs7OztBQUtBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQUwsT0FBTztBQUFBLFNBQ3JDQyxpQkFBaUIsaUNBQ1pELE9BRFk7QUFFZkgsSUFBQUEsRUFBRSxFQUFFLHVCQUZXO0FBR2ZILElBQUFBLEtBQUssRUFBRUMsdUNBQTRCQyxNQUhwQjtBQUlmUCxJQUFBQSxPQUFPLG9IQUE2R2lCLDBCQUE3RztBQUpRLEtBRG9CO0FBQUEsQ0FBaEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge2dlbmVyYXRlSGFzaElkfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHtcbiAgREVGQVVMVF9OT1RJRklDQVRJT05fTUVTU0FHRSxcbiAgREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTLFxuICBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUyxcbiAgREVGQVVMVF9VVUlEX0NPVU5ULFxuICBCVUdfUkVQT1JUX0xJTktcbn0gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuXG5leHBvcnQgdHlwZSBOb3RpZmljYXRpb24gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+ICYge1xuICBpZDogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHR5cGU6ICdpbmZvJyB8ICdlcnJvcicgfCAnd2FybmluZycgfCAnc3VjY2Vzcyc7XG4gIHRvcGljOiAnZ2xvYmFsJyB8ICdmaWxlJztcbiAgY291bnQ6IG51bWJlcjtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5vdGlmaWNhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKHtcbiAgbWVzc2FnZSA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX01FU1NBR0UsXG4gIHR5cGUgPSBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUy5pbmZvLFxuICB0b3BpYyA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUy5nbG9iYWwsXG4gIGlkID0gZ2VuZXJhdGVIYXNoSWQoREVGQVVMVF9VVUlEX0NPVU5UKSxcbiAgY291bnQgPSAxLFxuICAuLi5vcHRpb25zXG59OiBQYXJ0aWFsPE5vdGlmaWNhdGlvbj4pOiBOb3RpZmljYXRpb24ge1xuICByZXR1cm4ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgaWQsXG4gICAgbWVzc2FnZSxcbiAgICB0eXBlLFxuICAgIHRvcGljLFxuICAgIGNvdW50OiBjb3VudCA+IDk5ID8gOTkgOiBjb3VudCAvLyBubyBtb3JlIHRoYW4gMiBkaWdpdHNcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVycm9yIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEByZXR1cm5zIHt7dG9waWMsIGlkLCBtZXNzYWdlLCB0eXBlOiAobnVsbHxudW1iZXIpfX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVycm9yTm90aWZpY2F0aW9uID0gb3B0aW9ucyA9PiAoe1xuICAuLi5jcmVhdGVOb3RpZmljYXRpb24ob3B0aW9ucyksXG4gIHR5cGU6IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTLmVycm9yXG59KTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3VjY2VzcyBub3RpZmljYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7e3RvcGljLCBpZCwgbWVzc2FnZSwgdHlwZTogbnVsbH19XG4gKi9cbmV4cG9ydCBjb25zdCBzdWNjZXNzTm90aWZpY2F0aW9uID0gb3B0aW9ucyA9PiAoe1xuICAuLi5jcmVhdGVOb3RpZmljYXRpb24ob3B0aW9ucyksXG4gIHR5cGU6IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTLnN1Y2Nlc3Ncbn0pO1xuXG5leHBvcnQgY29uc3QgZXhwb3J0SW1hZ2VFcnJvciA9IG9wdGlvbnMgPT5cbiAgZXJyb3JOb3RpZmljYXRpb24oe1xuICAgIC4uLm9wdGlvbnMsXG4gICAgaWQ6ICdFWFBPUlRfSU1BR0VfRVJST1JfSUQnLFxuICAgIHRvcGljOiBERUZBVUxUX05PVElGSUNBVElPTl9UT1BJQ1MuZ2xvYmFsLFxuICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gZXhwb3J0IGltYWdlLCBwbGVhc2UgdGFrZSBhIHNjcmVlbnNob3Qgb2YgdGhlIGphdmFzY3JpcHQgY29uc29sZSwgcmVwb3J0IHRoZSB3aXRoIFt0aGlzIGxpbmtdKCR7QlVHX1JFUE9SVF9MSU5LfSkgYFxuICB9KTtcbiJdfQ==