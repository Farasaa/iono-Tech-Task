import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { KeyFrames as LumaKeyFrames } from '@luma.gl/engine';
import { sanitizeEasings, merge, sanitizeTimings, factorInterpolator } from './utils';

var Keyframes = function (_LumaKeyFrames) {
  _inherits(Keyframes, _LumaKeyFrames);

  var _super = _createSuper(Keyframes);

  function Keyframes(_ref) {
    var _this;

    var features = _ref.features,
        timings = _ref.timings,
        keyframes = _ref.keyframes,
        easings = _ref.easings;

    _classCallCheck(this, Keyframes);

    _this = _super.call(this, []);

    _defineProperty(_assertThisInitialized(_this), "activeFeatures", {});

    _this._setActiveFeatures = _this._setActiveFeatures.bind(_assertThisInitialized(_this));
    _this.getFrame = _this.getFrame.bind(_assertThisInitialized(_this));

    if (keyframes.length === 0) {
      throw new Error('There must be at least one keyframe');
    }

    var _easings = sanitizeEasings(keyframes, easings);

    var _timings = sanitizeTimings(keyframes, timings);

    _this.activeFeatures = features.reduce(function (activeFeatures, feature) {
      activeFeatures[feature] = false;
      return activeFeatures;
    }, {});

    _this._setActiveFeatures(keyframes);

    var _keyframes = merge(_timings, keyframes, _easings);

    _this.setKeyFrames(_keyframes);

    return _this;
  }

  _createClass(Keyframes, [{
    key: "_setActiveFeatures",
    value: function _setActiveFeatures(keyframes) {
      var firstKeyframe = keyframes[0];
      this.activeFeatures = Object.keys(firstKeyframe).reduce(function (activeFeatures, key) {
        if (firstKeyframe[key] !== undefined) {
          activeFeatures[key] = true;
        }

        return activeFeatures;
      }, this.activeFeatures);
    }
  }, {
    key: "getFrame",
    value: function getFrame() {
      var _this2 = this;

      var factor = this.factor;
      var start = this.getStartData();
      var end = this.getEndData();
      var frame = {};
      Object.keys(this.activeFeatures).forEach(function (key) {
        if (_this2.activeFeatures[key]) {
          frame[key] = factorInterpolator(start[key], end[key], end.ease)(factor);
        }
      });
      return frame;
    }
  }]);

  return Keyframes;
}(LumaKeyFrames);

export default Keyframes;
//# sourceMappingURL=keyframes.js.map