"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseGeoJsonRawFeature = parseGeoJsonRawFeature;
exports.getGeojsonLayerMeta = getGeojsonLayerMeta;
exports.getGeojsonDataMaps = getGeojsonDataMaps;
exports.parseGeometryFromString = parseGeometryFromString;
exports.getGeojsonBounds = getGeojsonBounds;
exports.getGeojsonFeatureTypes = getGeojsonFeatureTypes;
exports.featureToDeckGlGeoType = exports.FeatureTypes = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _geojsonNormalize = _interopRequireDefault(require("@mapbox/geojson-normalize"));

var _bbox = _interopRequireDefault(require("@turf/bbox"));

var _center = _interopRequireDefault(require("@turf/center"));

var _core = require("@loaders.gl/core");

var _wkt = require("@loaders.gl/wkt");

var _gis = require("@loaders.gl/gis");

var _utils = require("@kepler.gl/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable */
// TODO: Re-enable eslint when we upgrade to handle enums and type maps
var FeatureTypes;
/* eslint-enable */

exports.FeatureTypes = FeatureTypes;

(function (FeatureTypes) {
  FeatureTypes["Point"] = "Point";
  FeatureTypes["MultiPoint"] = "MultiPoint";
  FeatureTypes["LineString"] = "LineString";
  FeatureTypes["MultiLineString"] = "MultiLineString";
  FeatureTypes["Polygon"] = "Polygon";
  FeatureTypes["MultiPolygon"] = "MultiPolygon";
})(FeatureTypes || (exports.FeatureTypes = FeatureTypes = {}));

function parseGeoJsonRawFeature(rawFeature) {
  if ((0, _typeof2["default"])(rawFeature) === 'object') {
    // Support GeoJson feature as object
    // probably need to normalize it as well
    var normalized = (0, _geojsonNormalize["default"])(rawFeature);

    if (!normalized || !Array.isArray(normalized.features)) {
      // fail to normalize GeoJson
      return null;
    }

    return normalized.features[0];
  } else if (typeof rawFeature === 'string') {
    return parseGeometryFromString(rawFeature);
  } else if (Array.isArray(rawFeature)) {
    // Support GeoJson  LineString as an array of points
    return {
      type: 'Feature',
      geometry: {
        // why do we need to flip it...
        coordinates: rawFeature.map(function (pts) {
          return [pts[1], pts[0]];
        }),
        type: 'LineString'
      },
      properties: {}
    };
  }

  return null;
}

function getGeojsonLayerMeta(_ref) {
  var dataContainer = _ref.dataContainer,
      getFeature = _ref.getFeature;
  var dataToFeature = getGeojsonDataMaps(dataContainer, getFeature); // get bounds from features

  var bounds = getGeojsonBounds(dataToFeature); // if any of the feature has properties.radius set to be true

  var fixedRadius = Boolean(dataToFeature.find(function (d) {
    var _d$properties;

    return d && 'properties' in d && ((_d$properties = d.properties) === null || _d$properties === void 0 ? void 0 : _d$properties.radius);
  })); // keep a record of what type of geometry the collection has

  var featureTypes = getGeojsonFeatureTypes(dataToFeature);
  var meanCenters = [];

  for (var i = 0; i < dataToFeature.length; i++) {
    var feature = dataToFeature[i];

    if (feature) {
      try {
        // TODO: use line interpolate to get center of line for LineString
        var cent = (0, _center["default"])(feature);
        meanCenters.push(cent.geometry.coordinates);
      } catch (e) {
        meanCenters.push(null);
      }
    }
  }

  return {
    dataToFeature: dataToFeature,
    bounds: bounds,
    fixedRadius: fixedRadius,
    featureTypes: featureTypes,
    centroids: meanCenters
  };
}
/**
 * Parse raw data to GeoJson feature
 * @param dataContainer
 * @param getFeature
 * @returns {{}}
 */


function getGeojsonDataMaps(dataContainer, getFeature) {
  var acceptableTypes = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];
  var dataToFeature = [];

  for (var index = 0; index < dataContainer.numRows(); index++) {
    var feature = parseGeoJsonRawFeature(getFeature({
      index: index
    }));

    if (feature && feature.geometry && acceptableTypes.includes(feature.geometry.type)) {
      var cleaned = _objectSpread(_objectSpread({}, feature), {}, {
        // store index of the data in feature properties
        properties: _objectSpread(_objectSpread({}, feature.properties), {}, {
          index: index
        })
      });

      dataToFeature[index] = cleaned;
    } else {
      dataToFeature[index] = null;
    }
  }

  return dataToFeature;
}
/**
 * Parse geojson from string
 * @param {String} geoString
 * @returns {null | Object} geojson object or null if failed
 */


function parseGeometryFromString(geoString) {
  var parsedGeo; // try parse as geojson string
  // {"type":"Polygon","coordinates":[[[-74.158491,40.83594]]]}

  try {
    parsedGeo = JSON.parse(geoString);
  } catch (e) {// keep trying to parse
  } // try parse as wkt using loaders.gl WKTLoader


  if (!parsedGeo) {
    try {
      parsedGeo = (0, _core.parseSync)(geoString, _wkt.WKTLoader);
    } catch (e) {
      return null;
    }
  } // try parse as wkb using loaders.gl WKBLoader


  if (!parsedGeo) {
    try {
      var buffer = Buffer.from(geoString, 'hex');
      var binaryGeo = (0, _core.parseSync)(buffer, _wkt.WKBLoader); // @ts-expect-error

      parsedGeo = (0, _gis.binaryToGeometry)(binaryGeo);
    } catch (e) {
      return null;
    }
  }

  if (!parsedGeo) {
    return null;
  }

  var normalized = (0, _geojsonNormalize["default"])(parsedGeo);

  if (!normalized || !Array.isArray(normalized.features)) {
    // fail to normalize geojson
    return null;
  }

  return normalized.features[0];
}

function getGeojsonBounds() {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  // 70 ms for 10,000 polygons
  // here we only pick couple
  var maxCount = 10000;
  var samples = features.length > maxCount ? (0, _utils.getSampleData)(features, maxCount) : features;
  var nonEmpty = samples.filter(function (d) {
    return d && d.geometry && d.geometry.coordinates && d.geometry.coordinates.length;
  });

  try {
    return (0, _bbox["default"])({
      type: 'FeatureCollection',
      features: nonEmpty
    });
  } catch (e) {
    return null;
  }
}

var featureToDeckGlGeoType = {
  Point: 'point',
  MultiPoint: 'point',
  LineString: 'line',
  MultiLineString: 'line',
  Polygon: 'polygon',
  MultiPolygon: 'polygon'
};
exports.featureToDeckGlGeoType = featureToDeckGlGeoType;

/**
 * Parse geojson from string
 * @param {Array<Object>} allFeatures
 * @returns {Object} mapping of feature type existence
 */
function getGeojsonFeatureTypes(allFeatures) {
  // @ts-expect-error some test cases only have 1 geotype
  var featureTypes = {};

  for (var f = 0; f < allFeatures.length; f++) {
    var feature = allFeatures[f];

    if (feature && 'geometry' in feature) {
      var geoType = featureToDeckGlGeoType[feature.geometry && feature.geometry.type];

      if (geoType) {
        featureTypes[geoType] = true;
      }
    }
  }

  return featureTypes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,