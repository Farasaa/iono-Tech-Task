"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadCloudMapError = exports.loadCloudMapSuccess = exports.loadCloudMap = exports.resetProviderStatus = exports.postSaveLoadSuccess = exports.exportFileError = exports.exportFileSuccess = exports.exportFileToCloud = exports.ActionTypes = void 0;

var _toolkit = require("@reduxjs/toolkit");

var _actionTypes = require("./action-types");

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// eslint-disable-next-line prettier/prettier
var assignType = function assignType(obj) {
  return obj;
};

var ActionTypes = assignType({
  EXPORT_FILE_TO_CLOUD: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_TO_CLOUD"),
  EXPORT_FILE_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_SUCCESS"),
  EXPORT_FILE_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_ERROR"),
  RESET_PROVIDER_STATUS: "".concat(_actionTypes.ACTION_PREFIX, "RESET_PROVIDER_STATUS"),
  POST_SAVE_LOAD_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "POST_SAVE_LOAD_SUCCESS"),
  LOAD_CLOUD_MAP: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP"),
  LOAD_CLOUD_MAP_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP_SUCCESS"),
  LOAD_CLOUD_MAP_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP_ERROR")
});
/**
 * Call provider to upload file to cloud
 * @param mapData
 * @param provider
 * @param options
 * @param onSuccess
 * @param onError
 * @param closeModal
 */

exports.ActionTypes = ActionTypes;
var exportFileToCloud = (0, _toolkit.createAction)(ActionTypes.EXPORT_FILE_TO_CLOUD, function (payload) {
  return {
    payload: payload
  };
});
/** EXPORT_FILE_SUCCESS */

exports.exportFileToCloud = exportFileToCloud;
var exportFileSuccess = (0, _toolkit.createAction)(ActionTypes.EXPORT_FILE_SUCCESS, function (payload) {
  return {
    payload: payload
  };
});
/** EXPORT_FILE_ERROR */

exports.exportFileSuccess = exportFileSuccess;
var exportFileError = (0, _toolkit.createAction)(ActionTypes.EXPORT_FILE_ERROR, function (payload) {
  return {
    payload: payload
  };
});
/** POST_SAVE_LOAD_SUCCESS */

exports.exportFileError = exportFileError;
var postSaveLoadSuccess = (0, _toolkit.createAction)(ActionTypes.POST_SAVE_LOAD_SUCCESS, function (message) {
  return {
    payload: message
  };
});
exports.postSaveLoadSuccess = postSaveLoadSuccess;
var resetProviderStatus = (0, _toolkit.createAction)(ActionTypes.RESET_PROVIDER_STATUS);
/** LOAD_CLOUD_MAP */

exports.resetProviderStatus = resetProviderStatus;
var loadCloudMap = (0, _toolkit.createAction)(ActionTypes.LOAD_CLOUD_MAP, function (payload) {
  return {
    payload: payload
  };
});
/** LOAD_CLOUD_MAP_SUCCESS */

exports.loadCloudMap = loadCloudMap;
var loadCloudMapSuccess = (0, _toolkit.createAction)(ActionTypes.LOAD_CLOUD_MAP_SUCCESS, function (payload) {
  return {
    payload: payload
  };
});
/** LOAD_CLOUD_MAP_ERROR */

exports.loadCloudMapSuccess = loadCloudMapSuccess;
var loadCloudMapError = (0, _toolkit.createAction)(ActionTypes.LOAD_CLOUD_MAP_ERROR, function (payload) {
  return {
    payload: payload
  };
});
exports.loadCloudMapError = loadCloudMapError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,