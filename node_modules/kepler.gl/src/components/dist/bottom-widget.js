"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = BottomWidgetFactory;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

var _styles = require("@kepler.gl/styles");

var _timeWidget = _interopRequireDefault(require("./filters/time-widget"));

var _filterAnimationController = _interopRequireDefault(require("./filter-animation-controller"));

var _layerAnimationController = _interopRequireDefault(require("./layer-animation-controller"));

var _animationControl = _interopRequireDefault(require("./common/animation-control/animation-control"));

var _templateObject, _templateObject2, _templateObject3;

var maxWidth = 1080;

var BottomWidgetContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  padding-top: ", "px;\n  padding-right: ", "px;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  pointer-events: none !important; /* prevent padding from blocking input */\n  & > * {\n    /* all children should allow input */\n    pointer-events: all;\n  }\n  width: ", "px;\n  z-index: 1;\n  ", "\n"])), function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingTop : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingRight : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingBottom : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingLeft : 0;
}, function (props) {
  return props.width;
}, _styles.media.portable(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["padding: 0;"]))));

BottomWidgetFactory.deps = [_timeWidget["default"], _animationControl["default"], _filterAnimationController["default"], _layerAnimationController["default"]];
/* eslint-disable complexity */

function BottomWidgetFactory(TimeWidget, AnimationControl, FilterAnimationController, LayerAnimationController) {
  var LayerAnimationControl = (0, _styledComponents["default"])(AnimationControl)(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n    background-color: ", ";\n  "])), function (props) {
    return props.theme.sidePanelBg;
  });

  var BottomWidget = function BottomWidget(props) {
    var _uiState$mapControls, _uiState$mapControls$, _uiState$mapControls2, _uiState$mapControls3, _theme$mapControl, _theme$mapControl2, _theme$mapControl2$ma, _theme$mapControl2$ma2;

    var datasets = props.datasets,
        filters = props.filters,
        animationConfig = props.animationConfig,
        visStateActions = props.visStateActions,
        containerW = props.containerW,
        uiState = props.uiState,
        sidePanelWidth = props.sidePanelWidth,
        layers = props.layers,
        rootRef = props.rootRef,
        theme = props.theme;
    var activeSidePanel = uiState.activeSidePanel,
        readOnly = uiState.readOnly;
    var isOpen = Boolean(activeSidePanel);
    var enlargedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return !(0, _utils.isSideFilter)(f);
      });
    }, [filters]);
    var isMobile = (0, _utils.hasPortableWidth)(_styles.breakPointValues);
    var animatedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.isAnimating;
      });
    }, [filters]);
    var animatedFilter = animatedFilterIdx > -1 ? filters[animatedFilterIdx] : null;
    var isLegendPinned = ((_uiState$mapControls = uiState.mapControls) === null || _uiState$mapControls === void 0 ? void 0 : (_uiState$mapControls$ = _uiState$mapControls.mapLegend) === null || _uiState$mapControls$ === void 0 ? void 0 : _uiState$mapControls$.show) && ((_uiState$mapControls2 = uiState.mapControls) === null || _uiState$mapControls2 === void 0 ? void 0 : (_uiState$mapControls3 = _uiState$mapControls2.mapLegend) === null || _uiState$mapControls3 === void 0 ? void 0 : _uiState$mapControls3.active);
    var spaceForLegendWidth = isLegendPinned ? ((_theme$mapControl = theme.mapControl) === null || _theme$mapControl === void 0 ? void 0 : _theme$mapControl.width) + ((_theme$mapControl2 = theme.mapControl) === null || _theme$mapControl2 === void 0 ? void 0 : (_theme$mapControl2$ma = _theme$mapControl2.mapLegend) === null || _theme$mapControl2$ma === void 0 ? void 0 : (_theme$mapControl2$ma2 = _theme$mapControl2$ma.pinned) === null || _theme$mapControl2$ma2 === void 0 ? void 0 : _theme$mapControl2$ma2.right) * 2 - theme.bottomWidgetPaddingRight : 0;
    var enlargedFilterWidth = (isOpen && !isMobile ? containerW - sidePanelWidth : containerW) - spaceForLegendWidth; // show playback control if layers contain trip layer & at least one trip layer is visible

    var animatableLayer = (0, _react.useMemo)(function () {
      return layers.filter(function (l) {
        return l.config.animation && l.config.animation.enabled && l.config.isVisible;
      });
    }, [layers]);
    var readyToAnimation = Array.isArray(animationConfig.domain) && Number.isFinite(animationConfig.currentTime); // if animation control is showing, hide time display in time slider

    var showFloatingTimeDisplay = !animatableLayer.length;
    var showAnimationControl = animatableLayer.length && readyToAnimation && !animationConfig.hideControl;
    var showTimeWidget = enlargedFilterIdx > -1 && Object.keys(datasets).length > 0; // if filter is not animating, pass in enlarged filter here because
    // animation controller needs to call reset on it

    var filter = animatedFilter || filters[enlargedFilterIdx];
    var onClose = (0, _react.useCallback)(function () {
      return visStateActions.setFilterView(enlargedFilterIdx, _constants.FILTER_VIEW_TYPES.side);
    }, [visStateActions, enlargedFilterIdx]);
    return /*#__PURE__*/_react["default"].createElement(BottomWidgetContainer, {
      width: Math.min(maxWidth, enlargedFilterWidth),
      style: {
        marginRight: spaceForLegendWidth
      },
      className: "bottom-widget--container",
      hasPadding: showAnimationControl || showTimeWidget,
      ref: rootRef
    }, /*#__PURE__*/_react["default"].createElement(LayerAnimationController, {
      animationConfig: animationConfig,
      setLayerAnimationTime: visStateActions.setLayerAnimationTime
    }, function (isAnimating, start, pause, resetAnimation, timeline, setTimelineValue) {
      return showAnimationControl ? /*#__PURE__*/_react["default"].createElement(LayerAnimationControl, {
        updateAnimationSpeed: visStateActions.updateLayerAnimationSpeed,
        toggleAnimation: visStateActions.toggleLayerAnimation,
        isAnimatable: !animatedFilter,
        isAnimating: isAnimating,
        resetAnimation: resetAnimation,
        setTimelineValue: setTimelineValue,
        timeline: timeline
      }) : null;
    }), filter ? /*#__PURE__*/_react["default"].createElement(FilterAnimationController, {
      filter: filter,
      filterIdx: animatedFilterIdx > -1 ? animatedFilterIdx : enlargedFilterIdx,
      setFilterAnimationTime: visStateActions.setFilterAnimationTime
    }, function (isAnimating, start, pause, resetAnimation, timeline, setTimelineValue) {
      return showTimeWidget && timeline ? /*#__PURE__*/_react["default"].createElement(TimeWidget // TimeWidget uses React.memo, here we pass width
      // even though it doesnt use it, to force rerender
      , {
        filter: filters[enlargedFilterIdx],
        index: enlargedFilterIdx,
        datasets: datasets,
        readOnly: readOnly,
        showTimeDisplay: showFloatingTimeDisplay,
        setFilterPlot: visStateActions.setFilterPlot,
        setFilterAnimationTime: setTimelineValue,
        setFilterAnimationWindow: visStateActions.setFilterAnimationWindow,
        toggleAnimation: visStateActions.toggleFilterAnimation,
        updateAnimationSpeed: visStateActions.updateFilterAnimationSpeed,
        resetAnimation: resetAnimation,
        isAnimatable: !animationConfig || !animationConfig.isAnimating,
        onClose: onClose,
        timeline: timeline
      }) : null;
    }) : null);
  };
  /* eslint-disable react/display-name */


  return (0, _styledComponents.withTheme)(
  /*#__PURE__*/
  // @ts-ignore
  (0, _react.forwardRef)(function (props, ref) {
    return /*#__PURE__*/_react["default"].createElement(BottomWidget, (0, _extends2["default"])({}, props, {
      rootRef: ref
    }));
  }));
  /* eslint-enable react/display-name */
}
/* eslint-enable complexity */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ib3R0b20td2lkZ2V0LnRzeCJdLCJuYW1lcyI6WyJtYXhXaWR0aCIsIkJvdHRvbVdpZGdldENvbnRhaW5lciIsInN0eWxlZCIsImRpdiIsInByb3BzIiwiaGFzUGFkZGluZyIsInRoZW1lIiwiYm90dG9tV2lkZ2V0UGFkZGluZ1RvcCIsImJvdHRvbVdpZGdldFBhZGRpbmdSaWdodCIsImJvdHRvbVdpZGdldFBhZGRpbmdCb3R0b20iLCJib3R0b21XaWRnZXRQYWRkaW5nTGVmdCIsIndpZHRoIiwibWVkaWEiLCJwb3J0YWJsZSIsIkJvdHRvbVdpZGdldEZhY3RvcnkiLCJkZXBzIiwiVGltZVdpZGdldEZhY3RvcnkiLCJBbmltYXRpb25Db250cm9sRmFjdG9yeSIsIkZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IiwiTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSIsIlRpbWVXaWRnZXQiLCJBbmltYXRpb25Db250cm9sIiwiRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlciIsIkxheWVyQW5pbWF0aW9uQ29udHJvbGxlciIsIkxheWVyQW5pbWF0aW9uQ29udHJvbCIsInNpZGVQYW5lbEJnIiwiQm90dG9tV2lkZ2V0IiwiZGF0YXNldHMiLCJmaWx0ZXJzIiwiYW5pbWF0aW9uQ29uZmlnIiwidmlzU3RhdGVBY3Rpb25zIiwiY29udGFpbmVyVyIsInVpU3RhdGUiLCJzaWRlUGFuZWxXaWR0aCIsImxheWVycyIsInJvb3RSZWYiLCJhY3RpdmVTaWRlUGFuZWwiLCJyZWFkT25seSIsImlzT3BlbiIsIkJvb2xlYW4iLCJlbmxhcmdlZEZpbHRlcklkeCIsImZpbmRJbmRleCIsImYiLCJpc01vYmlsZSIsImJyZWFrUG9pbnRWYWx1ZXMiLCJhbmltYXRlZEZpbHRlcklkeCIsImlzQW5pbWF0aW5nIiwiYW5pbWF0ZWRGaWx0ZXIiLCJpc0xlZ2VuZFBpbm5lZCIsIm1hcENvbnRyb2xzIiwibWFwTGVnZW5kIiwic2hvdyIsImFjdGl2ZSIsInNwYWNlRm9yTGVnZW5kV2lkdGgiLCJtYXBDb250cm9sIiwicGlubmVkIiwicmlnaHQiLCJlbmxhcmdlZEZpbHRlcldpZHRoIiwiYW5pbWF0YWJsZUxheWVyIiwiZmlsdGVyIiwibCIsImNvbmZpZyIsImFuaW1hdGlvbiIsImVuYWJsZWQiLCJpc1Zpc2libGUiLCJyZWFkeVRvQW5pbWF0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZG9tYWluIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJjdXJyZW50VGltZSIsInNob3dGbG9hdGluZ1RpbWVEaXNwbGF5IiwibGVuZ3RoIiwic2hvd0FuaW1hdGlvbkNvbnRyb2wiLCJoaWRlQ29udHJvbCIsInNob3dUaW1lV2lkZ2V0IiwiT2JqZWN0Iiwia2V5cyIsIm9uQ2xvc2UiLCJzZXRGaWx0ZXJWaWV3IiwiRklMVEVSX1ZJRVdfVFlQRVMiLCJzaWRlIiwiTWF0aCIsIm1pbiIsIm1hcmdpblJpZ2h0Iiwic2V0TGF5ZXJBbmltYXRpb25UaW1lIiwic3RhcnQiLCJwYXVzZSIsInJlc2V0QW5pbWF0aW9uIiwidGltZWxpbmUiLCJzZXRUaW1lbGluZVZhbHVlIiwidXBkYXRlTGF5ZXJBbmltYXRpb25TcGVlZCIsInRvZ2dsZUxheWVyQW5pbWF0aW9uIiwic2V0RmlsdGVyQW5pbWF0aW9uVGltZSIsInNldEZpbHRlclBsb3QiLCJzZXRGaWx0ZXJBbmltYXRpb25XaW5kb3ciLCJ0b2dnbGVGaWx0ZXJBbmltYXRpb24iLCJ1cGRhdGVGaWx0ZXJBbmltYXRpb25TcGVlZCIsInJlZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQUcsSUFBakI7O0FBT0EsSUFBTUMscUJBQXFCLEdBQUdDLDZCQUFPQyxHQUFWLHdiQUdWLFVBQUFDLEtBQUs7QUFBQSxTQUFLQSxLQUFLLENBQUNDLFVBQU4sR0FBbUJELEtBQUssQ0FBQ0UsS0FBTixDQUFZQyxzQkFB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QWMsRUFBRVQsY0FibEI7QUFjRSxRQUFBLFlBQVksRUFBRSxDQUFDNUQsZUFBRCxJQUFvQixDQUFDQSxlQUFlLENBQUNpQixXQWRyRDtBQWVFLFFBQUEsT0FBTyxFQUFFaUMsT0FmWDtBQWdCRSxRQUFBLFFBQVEsRUFBRVc7QUFoQlosUUFERixHQW1CSSxJQXBCTDtBQUFBLEtBTEgsQ0FESyxHQTZCSCxJQXRETixDQURGO0FBMERELEdBckhEO0FBdUhBOzs7QUFDQSxTQUFPO0FBQUE7QUFDTDtBQUNBLHlCQUFXLFVBQUN0RixLQUFELEVBQWlDK0YsR0FBakM7QUFBQSx3QkFBeUMsZ0NBQUMsWUFBRCxnQ0FBa0IvRixLQUFsQjtBQUF5QixNQUFBLE9BQU8sRUFBRStGO0FBQWxDLE9BQXpDO0FBQUEsR0FBWCxDQUZLLENBQVA7QUFJQTtBQUNEO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHtmb3J3YXJkUmVmLCB1c2VNZW1vLCB1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwge3dpdGhUaGVtZX0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQge0ZJTFRFUl9WSUVXX1RZUEVTfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge2hhc1BvcnRhYmxlV2lkdGgsIGlzU2lkZUZpbHRlcn0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5pbXBvcnQge21lZGlhLCBicmVha1BvaW50VmFsdWVzfSBmcm9tICdAa2VwbGVyLmdsL3N0eWxlcyc7XG5pbXBvcnQge1RpbWVSYW5nZUZpbHRlcn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5cbmltcG9ydCBUaW1lV2lkZ2V0RmFjdG9yeSBmcm9tICcuL2ZpbHRlcnMvdGltZS13aWRnZXQnO1xuaW1wb3J0IHtib3R0b21XaWRnZXRTZWxlY3Rvcn0gZnJvbSAnLi9rZXBsZXItZ2wnO1xuaW1wb3J0IEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IGZyb20gJy4vZmlsdGVyLWFuaW1hdGlvbi1jb250cm9sbGVyJztcbmltcG9ydCBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IGZyb20gJy4vbGF5ZXItYW5pbWF0aW9uLWNvbnRyb2xsZXInO1xuaW1wb3J0IEFuaW1hdGlvbkNvbnRyb2xGYWN0b3J5IGZyb20gJy4vY29tbW9uL2FuaW1hdGlvbi1jb250cm9sL2FuaW1hdGlvbi1jb250cm9sJztcblxuY29uc3QgbWF4V2lkdGggPSAxMDgwO1xuXG5pbnRlcmZhY2UgQm90dG9tV2lkZ2V0Q29udGFpbmVyUHJvcHMge1xuICBoYXNQYWRkaW5nPzogYm9vbGVhbjtcbiAgd2lkdGg/OiBudW1iZXI7XG59XG5cbmNvbnN0IEJvdHRvbVdpZGdldENvbnRhaW5lciA9IHN0eWxlZC5kaXY8Qm90dG9tV2lkZ2V0Q29udGFpbmVyUHJvcHM+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nLXRvcDogJHtwcm9wcyA9PiAocHJvcHMuaGFzUGFkZGluZyA/IHByb3BzLnRoZW1lLmJvdHRvbVdpZGdldFBhZGRpbmdUb3AgOiAwKX1weDtcbiAgcGFkZGluZy1yaWdodDogJHtwcm9wcyA9PiAocHJvcHMuaGFzUGFkZGluZyA/IHByb3BzLnRoZW1lLmJvdHRvbVdpZGdldFBhZGRpbmdSaWdodCA6IDApfXB4O1xuICBwYWRkaW5nLWJvdHRvbTogJHtwcm9wcyA9PiAocHJvcHMuaGFzUGFkZGluZyA/IHByb3BzLnRoZW1lLmJvdHRvbVdpZGdldFBhZGRpbmdCb3R0b20gOiAwKX1weDtcbiAgcGFkZGluZy1sZWZ0OiAke3Byb3BzID0+IChwcm9wcy5oYXNQYWRkaW5nID8gcHJvcHMudGhlbWUuYm90dG9tV2lkZ2V0UGFkZGluZ0xlZnQgOiAwKX1weDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmUgIWltcG9ydGFudDsgLyogcHJldmVudCBwYWRkaW5nIGZyb20gYmxvY2tpbmcgaW5wdXQgKi9cbiAgJiA+ICoge1xuICAgIC8qIGFsbCBjaGlsZHJlbiBzaG91bGQgYWxsb3cgaW5wdXQgKi9cbiAgICBwb2ludGVyLWV2ZW50czogYWxsO1xuICB9XG4gIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLndpZHRofXB4O1xuICB6LWluZGV4OiAxO1xuICAke21lZGlhLnBvcnRhYmxlYHBhZGRpbmc6IDA7YH1cbmA7XG5cbmV4cG9ydCB0eXBlIEJvdHRvbVdpZGdldFByb3BzID0ge1xuICByb290UmVmOiBSZWFjdC5Gb3J3YXJkZWRSZWY8SFRNTERpdkVsZW1lbnQ+O1xuICBjb250YWluZXJXOiBudW1iZXI7XG59ICYgUmV0dXJuVHlwZTx0eXBlb2YgYm90dG9tV2lkZ2V0U2VsZWN0b3I+O1xudHlwZSBUaGVtZVByb3AgPSB7XG4gIHRoZW1lOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xufTtcbnR5cGUgQm90dG9tV2lkZ2V0VGhlbWVkUHJvcHMgPSBCb3R0b21XaWRnZXRQcm9wcyAmIFRoZW1lUHJvcDtcblxuQm90dG9tV2lkZ2V0RmFjdG9yeS5kZXBzID0gW1xuICBUaW1lV2lkZ2V0RmFjdG9yeSxcbiAgQW5pbWF0aW9uQ29udHJvbEZhY3RvcnksXG4gIEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5LFxuICBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5XG5dO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21wbGV4aXR5ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCb3R0b21XaWRnZXRGYWN0b3J5KFxuICBUaW1lV2lkZ2V0OiBSZXR1cm5UeXBlPHR5cGVvZiBUaW1lV2lkZ2V0RmFjdG9yeT4sXG4gIEFuaW1hdGlvbkNvbnRyb2w6IFJldHVyblR5cGU8dHlwZW9mIEFuaW1hdGlvbkNvbnRyb2xGYWN0b3J5PixcbiAgRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlcjogUmV0dXJuVHlwZTx0eXBlb2YgRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3Rvcnk+LFxuICBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXI6IFJldHVyblR5cGU8dHlwZW9mIExheWVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3Rvcnk+XG4pOiBSZWFjdC5GQzxCb3R0b21XaWRnZXRUaGVtZWRQcm9wcz4ge1xuICBjb25zdCBMYXllckFuaW1hdGlvbkNvbnRyb2wgPSBzdHlsZWQoQW5pbWF0aW9uQ29udHJvbClgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5zaWRlUGFuZWxCZ307XG4gIGA7XG5cbiAgY29uc3QgQm90dG9tV2lkZ2V0OiBSZWFjdC5GQzxCb3R0b21XaWRnZXRUaGVtZWRQcm9wcz4gPSAocHJvcHM6IEJvdHRvbVdpZGdldFRoZW1lZFByb3BzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZGF0YXNldHMsXG4gICAgICBmaWx0ZXJzLFxuICAgICAgYW5pbWF0aW9uQ29uZmlnLFxuICAgICAgdmlzU3RhdGVBY3Rpb25zLFxuICAgICAgY29udGFpbmVyVyxcbiAgICAgIHVpU3RhdGUsXG4gICAgICBzaWRlUGFuZWxXaWR0aCxcbiAgICAgIGxheWVycyxcbiAgICAgIHJvb3RSZWYsXG4gICAgICB0aGVtZVxuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IHthY3RpdmVTaWRlUGFuZWwsIHJlYWRPbmx5fSA9IHVpU3RhdGU7XG4gICAgY29uc3QgaXNPcGVuID0gQm9vbGVhbihhY3RpdmVTaWRlUGFuZWwpO1xuXG4gICAgY29uc3QgZW5sYXJnZWRGaWx0ZXJJZHggPSB1c2VNZW1vKCgpID0+IGZpbHRlcnMuZmluZEluZGV4KGYgPT4gIWlzU2lkZUZpbHRlcihmKSksIFtmaWx0ZXJzXSk7XG5cbiAgICBjb25zdCBpc01vYmlsZSA9IGhhc1BvcnRhYmxlV2lkdGgoYnJlYWtQb2ludFZhbHVlcyk7XG5cbiAgICBjb25zdCBhbmltYXRlZEZpbHRlcklkeCA9IHVzZU1lbW8oKCkgPT4gZmlsdGVycy5maW5kSW5kZXgoZiA9PiBmLmlzQW5pbWF0aW5nKSwgW2ZpbHRlcnNdKTtcbiAgICBjb25zdCBhbmltYXRlZEZpbHRlciA9IGFuaW1hdGVkRmlsdGVySWR4ID4gLTEgPyBmaWx0ZXJzW2FuaW1hdGVkRmlsdGVySWR4XSA6IG51bGw7XG5cbiAgICBjb25zdCBpc0xlZ2VuZFBpbm5lZCA9XG4gICAgICB1aVN0YXRlLm1hcENvbnRyb2xzPy5tYXBMZWdlbmQ/LnNob3cgJiYgdWlTdGF0ZS5tYXBDb250cm9scz8ubWFwTGVnZW5kPy5hY3RpdmU7XG4gICAgY29uc3Qgc3BhY2VGb3JMZWdlbmRXaWR0aCA9IGlzTGVnZW5kUGlubmVkXG4gICAgICA/IHRoZW1lLm1hcENvbnRyb2w/LndpZHRoICtcbiAgICAgICAgdGhlbWUubWFwQ29udHJvbD8ubWFwTGVnZW5kPy5waW5uZWQ/LnJpZ2h0ICogMiAtXG4gICAgICAgIHRoZW1lLmJvdHRvbVdpZGdldFBhZGRpbmdSaWdodFxuICAgICAgOiAwO1xuXG4gICAgY29uc3QgZW5sYXJnZWRGaWx0ZXJXaWR0aCA9XG4gICAgICAoaXNPcGVuICYmICFpc01vYmlsZSA/IGNvbnRhaW5lclcgLSBzaWRlUGFuZWxXaWR0aCA6IGNvbnRhaW5lclcpIC0gc3BhY2VGb3JMZWdlbmRXaWR0aDtcblxuICAgIC8vIHNob3cgcGxheWJhY2sgY29udHJvbCBpZiBsYXllcnMgY29udGFpbiB0cmlwIGxheWVyICYgYXQgbGVhc3Qgb25lIHRyaXAgbGF5ZXIgaXMgdmlzaWJsZVxuICAgIGNvbnN0IGFuaW1hdGFibGVMYXllciA9IHVzZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICBsYXllcnMuZmlsdGVyKGwgPT4gbC5jb25maWcuYW5pbWF0aW9uICYmIGwuY29uZmlnLmFuaW1hdGlvbi5lbmFibGVkICYmIGwuY29uZmlnLmlzVmlzaWJsZSksXG4gICAgICBbbGF5ZXJzXVxuICAgICk7XG5cbiAgICBjb25zdCByZWFkeVRvQW5pbWF0aW9uID1cbiAgICAgIEFycmF5LmlzQXJyYXkoYW5pbWF0aW9uQ29uZmlnLmRvbWFpbikgJiYgTnVtYmVyLmlzRmluaXRlKGFuaW1hdGlvbkNvbmZpZy5jdXJyZW50VGltZSk7XG4gICAgLy8gaWYgYW5pbWF0aW9uIGNvbnRyb2wgaXMgc2hvd2luZywgaGlkZSB0aW1lIGRpc3BsYXkgaW4gdGltZSBzbGlkZXJcbiAgICBjb25zdCBzaG93RmxvYXRpbmdUaW1lRGlzcGxheSA9ICFhbmltYXRhYmxlTGF5ZXIubGVuZ3RoO1xuICAgIGNvbnN0IHNob3dBbmltYXRpb25Db250cm9sID1cbiAgICAgIGFuaW1hdGFibGVMYXllci5sZW5ndGggJiYgcmVhZHlUb0FuaW1hdGlvbiAmJiAhYW5pbWF0aW9uQ29uZmlnLmhpZGVDb250cm9sO1xuICAgIGNvbnN0IHNob3dUaW1lV2lkZ2V0ID0gZW5sYXJnZWRGaWx0ZXJJZHggPiAtMSAmJiBPYmplY3Qua2V5cyhkYXRhc2V0cykubGVuZ3RoID4gMDtcblxuICAgIC8vIGlmIGZpbHRlciBpcyBub3QgYW5pbWF0aW5nLCBwYXNzIGluIGVubGFyZ2VkIGZpbHRlciBoZXJlIGJlY2F1c2VcbiAgICAvLyBhbmltYXRpb24gY29udHJvbGxlciBuZWVkcyB0byBjYWxsIHJlc2V0IG9uIGl0XG4gICAgY29uc3QgZmlsdGVyID0gKGFuaW1hdGVkRmlsdGVyIGFzIFRpbWVSYW5nZUZpbHRlcikgfHwgZmlsdGVyc1tlbmxhcmdlZEZpbHRlcklkeF07XG5cbiAgICBjb25zdCBvbkNsb3NlID0gdXNlQ2FsbGJhY2soXG4gICAgICAoKSA9PiB2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyVmlldyhlbmxhcmdlZEZpbHRlcklkeCwgRklMVEVSX1ZJRVdfVFlQRVMuc2lkZSksXG4gICAgICBbdmlzU3RhdGVBY3Rpb25zLCBlbmxhcmdlZEZpbHRlcklkeF1cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3R0b21XaWRnZXRDb250YWluZXJcbiAgICAgICAgd2lkdGg9e01hdGgubWluKG1heFdpZHRoLCBlbmxhcmdlZEZpbHRlcldpZHRoKX1cbiAgICAgICAgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2VGb3JMZWdlbmRXaWR0aH19XG4gICAgICAgIGNsYXNzTmFtZT1cImJvdHRvbS13aWRnZXQtLWNvbnRhaW5lclwiXG4gICAgICAgIGhhc1BhZGRpbmc9e3Nob3dBbmltYXRpb25Db250cm9sIHx8IHNob3dUaW1lV2lkZ2V0fVxuICAgICAgICByZWY9e3Jvb3RSZWZ9XG4gICAgICA+XG4gICAgICAgIDxMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJcbiAgICAgICAgICBhbmltYXRpb25Db25maWc9e2FuaW1hdGlvbkNvbmZpZ31cbiAgICAgICAgICBzZXRMYXllckFuaW1hdGlvblRpbWU9e3Zpc1N0YXRlQWN0aW9ucy5zZXRMYXllckFuaW1hdGlvblRpbWV9XG4gICAgICAgID5cbiAgICAgICAgICB7KGlzQW5pbWF0aW5nLCBzdGFydCwgcGF1c2UsIHJlc2V0QW5pbWF0aW9uLCB0aW1lbGluZSwgc2V0VGltZWxpbmVWYWx1ZSkgPT5cbiAgICAgICAgICAgIHNob3dBbmltYXRpb25Db250cm9sID8gKFxuICAgICAgICAgICAgICA8TGF5ZXJBbmltYXRpb25Db250cm9sXG4gICAgICAgICAgICAgICAgdXBkYXRlQW5pbWF0aW9uU3BlZWQ9e3Zpc1N0YXRlQWN0aW9ucy51cGRhdGVMYXllckFuaW1hdGlvblNwZWVkfVxuICAgICAgICAgICAgICAgIHRvZ2dsZUFuaW1hdGlvbj17dmlzU3RhdGVBY3Rpb25zLnRvZ2dsZUxheWVyQW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgIGlzQW5pbWF0YWJsZT17IWFuaW1hdGVkRmlsdGVyfVxuICAgICAgICAgICAgICAgIGlzQW5pbWF0aW5nPXtpc0FuaW1hdGluZ31cbiAgICAgICAgICAgICAgICByZXNldEFuaW1hdGlvbj17cmVzZXRBbmltYXRpb259XG4gICAgICAgICAgICAgICAgc2V0VGltZWxpbmVWYWx1ZT17c2V0VGltZWxpbmVWYWx1ZX1cbiAgICAgICAgICAgICAgICB0aW1lbGluZT17dGltZWxpbmV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApIDogbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgPC9MYXllckFuaW1hdGlvbkNvbnRyb2xsZXI+XG4gICAgICAgIHtmaWx0ZXIgPyAoXG4gICAgICAgICAgPEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJcbiAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgICAgZmlsdGVySWR4PXthbmltYXRlZEZpbHRlcklkeCA+IC0xID8gYW5pbWF0ZWRGaWx0ZXJJZHggOiBlbmxhcmdlZEZpbHRlcklkeH1cbiAgICAgICAgICAgIHNldEZpbHRlckFuaW1hdGlvblRpbWU9e3Zpc1N0YXRlQWN0aW9ucy5zZXRGaWx0ZXJBbmltYXRpb25UaW1lfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHsoaXNBbmltYXRpbmcsIHN0YXJ0LCBwYXVzZSwgcmVzZXRBbmltYXRpb24sIHRpbWVsaW5lLCBzZXRUaW1lbGluZVZhbHVlKSA9PlxuICAgICAgICAgICAgICBzaG93VGltZVdpZGdldCAmJiB0aW1lbGluZSA/IChcbiAgICAgICAgICAgICAgICA8VGltZVdpZGdldFxuICAgICAgICAgICAgICAgICAgLy8gVGltZVdpZGdldCB1c2VzIFJlYWN0Lm1lbW8sIGhlcmUgd2UgcGFzcyB3aWR0aFxuICAgICAgICAgICAgICAgICAgLy8gZXZlbiB0aG91Z2ggaXQgZG9lc250IHVzZSBpdCwgdG8gZm9yY2UgcmVyZW5kZXJcbiAgICAgICAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyc1tlbmxhcmdlZEZpbHRlcklkeF0gYXMgVGltZVJhbmdlRmlsdGVyfVxuICAgICAgICAgICAgICAgICAgaW5kZXg9e2VubGFyZ2VkRmlsdGVySWR4fVxuICAgICAgICAgICAgICAgICAgZGF0YXNldHM9e2RhdGFzZXRzfVxuICAgICAgICAgICAgICAgICAgcmVhZE9ubHk9e3JlYWRPbmx5fVxuICAgICAgICAgICAgICAgICAgc2hvd1RpbWVEaXNwbGF5PXtzaG93RmxvYXRpbmdUaW1lRGlzcGxheX1cbiAgICAgICAgICAgICAgICAgIHNldEZpbHRlclBsb3Q9e3Zpc1N0YXRlQWN0aW9ucy5zZXRGaWx0ZXJQbG90fVxuICAgICAgICAgICAgICAgICAgc2V0RmlsdGVyQW5pbWF0aW9uVGltZT17c2V0VGltZWxpbmVWYWx1ZX1cbiAgICAgICAgICAgICAgICAgIHNldEZpbHRlckFuaW1hdGlvbldpbmRvdz17dmlzU3RhdGVBY3Rpb25zLnNldEZpbHRlckFuaW1hdGlvbldpbmRvd31cbiAgICAgICAgICAgICAgICAgIHRvZ2dsZUFuaW1hdGlvbj17dmlzU3RhdGVBY3Rpb25zLnRvZ2dsZUZpbHRlckFuaW1hdGlvbn1cbiAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuaW1hdGlvblNwZWVkPXt2aXNTdGF0ZUFjdGlvbnMudXBkYXRlRmlsdGVyQW5pbWF0aW9uU3BlZWR9XG4gICAgICAgICAgICAgICAgICByZXNldEFuaW1hdGlvbj17cmVzZXRBbmltYXRpb259XG4gICAgICAgICAgICAgICAgICBpc0FuaW1hdGFibGU9eyFhbmltYXRpb25Db25maWcgfHwgIWFuaW1hdGlvbkNvbmZpZy5pc0FuaW1hdGluZ31cbiAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICAgICAgICAgICAgICB0aW1lbGluZT17dGltZWxpbmV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L0ZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXI+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Cb3R0b21XaWRnZXRDb250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9kaXNwbGF5LW5hbWUgKi9cbiAgcmV0dXJuIHdpdGhUaGVtZShcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yd2FyZFJlZigocHJvcHM6IEJvdHRvbVdpZGdldFRoZW1lZFByb3BzLCByZWYpID0+IDxCb3R0b21XaWRnZXQgey4uLnByb3BzfSByb290UmVmPXtyZWZ9IC8+KVxuICApO1xuICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L2Rpc3BsYXktbmFtZSAqL1xufVxuLyogZXNsaW50LWVuYWJsZSBjb21wbGV4aXR5ICovXG4iXX0=