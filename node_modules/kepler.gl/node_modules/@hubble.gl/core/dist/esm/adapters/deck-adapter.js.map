{"version":3,"sources":["../../../src/adapters/deck-adapter.js"],"names":["PreviewEncoder","DeckScene","VideoCapture","DeckAdapter","sceneBuilder","glContext","undefined","videoCapture","shouldAnimate","enabled","getProps","bind","render","stop","_deckOnLoad","_getViewState","_getLayers","_applyScene","deckRef","setReady","onNextFrame","props","onLoad","current","deck","then","_animate","onAfterRender","scene","keyframes","camera","controller","viewState","hasLayers","layers","width","height","gl","Encoder","encoderSettings","onStop","updateCamera","animationLoop","timeline","detachAnimation","currentCamera","attachAnimation","innerOnStop","lengthMs","setTime","startOffsetMs","callback","pause","Promise","resolve","frame","getFrame","renderLayers","proceedToNextFrame","capture","canvas","nextTimeMs"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable no-console */\nimport {PreviewEncoder} from '../encoders';\n// eslint-disable-next-line no-unused-vars\nimport {DeckScene} from '../scene';\nimport {VideoCapture} from '../capture/video-capture';\n\nexport default class DeckAdapter {\n  /** @type {DeckScene} */\n  scene;\n  /** @type {(animationLoop: any) => Promise<DeckScene> | DeckScene} */\n  sceneBuilder;\n  /** @type {boolean} */\n  shouldAnimate;\n  /** @type {boolean} */\n  enabled;\n  /** @type {WebGL2RenderingContext} */\n  glContext;\n\n  /**\n   * @param {(animationLoop: any) => DeckScene | Promise<DeckScene>} sceneBuilder\n   * @param {WebGL2RenderingContext} glContext\n   */\n  constructor(sceneBuilder, glContext = undefined) {\n    this.sceneBuilder = sceneBuilder;\n    this.glContext = glContext;\n    this.videoCapture = new VideoCapture();\n    this.shouldAnimate = true;\n    this.enabled = false;\n    this.getProps = this.getProps.bind(this);\n    this.render = this.render.bind(this);\n    this.stop = this.stop.bind(this);\n    this._deckOnLoad = this._deckOnLoad.bind(this);\n    this._getViewState = this._getViewState.bind(this);\n    this._getLayers = this._getLayers.bind(this);\n    this._applyScene = this._applyScene.bind(this);\n  }\n\n  /**\n   * @param {{ current: { deck: any; }; }} deckRef\n   * @param {(ready: boolean) => void} setReady\n   * @param {(nextTimeMs: number) => void} onNextFrame\n   */\n  getProps(deckRef, setReady, onNextFrame = undefined) {\n    const props = {\n      onLoad: () =>\n        this._deckOnLoad(deckRef.current.deck).then(() => {\n          setReady(true);\n        }),\n      _animate: this.shouldAnimate\n    };\n\n    if (onNextFrame) {\n      // Remove the underscore to make it public? Please verify\n      props.onAfterRender = () => this.onAfterRender(onNextFrame);\n    }\n\n    // Animating the camera is optional, but if a keyframe is defined then viewState is controlled by camera keyframe.\n    if (this.scene && this.scene.keyframes.camera && this.enabled) {\n      props.controller = false;\n      props.viewState = this._getViewState();\n    }\n\n    // Only replace layers when use defines scene layers\n    // TODO: Could potentially concat instead of replace, but layers are supposed to be static.\n    if (this.scene && this.scene.hasLayers()) {\n      props.layers = this._getLayers();\n    }\n\n    if (this.scene) {\n      props.width = this.scene.width;\n      props.height = this.scene.height;\n    }\n\n    if (this.glContext) {\n      props.gl = this.glContext;\n    }\n    return props;\n  }\n\n  /**\n   * @param {typeof import('../encoders').FrameEncoder} Encoder\n   * @param {import('types').FrameEncoderSettings} encoderSettings\n   * @param {() => void} onStop\n   * @param {(prevCamera: import('../keyframes').CameraKeyframes) => void} updateCamera\n   */\n  render(\n    Encoder = PreviewEncoder,\n    encoderSettings = {},\n    onStop = undefined,\n    updateCamera = undefined\n  ) {\n    if (updateCamera) {\n      // Optional camera and keyframes defined by the user at runtime\n      this.scene.animationLoop.timeline.detachAnimation(this.scene.currentCamera);\n      this.scene.keyframes.camera = updateCamera(this.scene.keyframes.camera);\n      this.scene.currentCamera = this.scene.animationLoop.timeline.attachAnimation(\n        this.scene.keyframes.camera\n      );\n    }\n\n    const innerOnStop = () => {\n      this.enabled = false;\n      if (onStop) {\n        onStop();\n      }\n    };\n    this.shouldAnimate = true;\n    this.videoCapture.render(Encoder, encoderSettings, this.scene.lengthMs, innerOnStop);\n    this.scene.animationLoop.timeline.setTime(this.videoCapture.encoderSettings.startOffsetMs);\n    this.enabled = true;\n  }\n\n  /**\n   * @param {() => void} callback\n   */\n  stop(callback) {\n    this.enabled = false;\n    this.shouldAnimate = false;\n    this.videoCapture.stop(callback);\n  }\n\n  async _deckOnLoad(deck) {\n    this.deck = deck;\n\n    const animationLoop = deck.animationLoop;\n    animationLoop.timeline.pause();\n    animationLoop.timeline.setTime(0);\n\n    await Promise.resolve(this.sceneBuilder(animationLoop)).then(scene => {\n      this._applyScene(scene);\n    });\n  }\n\n  // TODO: allow user to change scenes at runtime.\n  _applyScene(scene) {\n    this.scene = scene;\n  }\n\n  _getViewState() {\n    if (!this.scene) {\n      return null;\n    }\n    const frame = this.scene.keyframes.camera.getFrame();\n    return frame;\n  }\n\n  _getLayers() {\n    if (!this.scene) {\n      return [];\n    }\n    return this.scene.renderLayers();\n  }\n\n  /**\n   * @param {(nextTimeMs: number) => void} proceedToNextFrame\n   */\n  onAfterRender(proceedToNextFrame) {\n    this.videoCapture.capture(this.deck.canvas, nextTimeMs => {\n      this.scene.animationLoop.timeline.setTime(nextTimeMs);\n      proceedToNextFrame(nextTimeMs);\n    });\n  }\n}\n"],"file":"deck-adapter.js"}