"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unique = unique;
exports.getLatLngBounds = getLatLngBounds;
exports.clamp = clamp;
exports.getSampleData = getSampleData;
exports.timeToUnixMilli = timeToUnixMilli;
exports.notNullorUndefined = notNullorUndefined;
exports.isNumber = isNumber;
exports.hasOwnProperty = hasOwnProperty;
exports.numberSort = numberSort;
exports.getSortingFunction = getSortingFunction;
exports.preciseRound = preciseRound;
exports.roundToFour = roundToFour;
exports.getRoundingDecimalFromStep = getRoundingDecimalFromStep;
exports.normalizeSliderValue = normalizeSliderValue;
exports.roundValToStep = roundValToStep;
exports.getFormatter = getFormatter;
exports.getColumnFormatter = getColumnFormatter;
exports.applyValueMap = applyValueMap;
exports.applyDefaultFormat = applyDefaultFormat;
exports.getBooleanFormatter = getBooleanFormatter;
exports.applyCustomFormat = applyCustomFormat;
exports.formatNumber = formatNumber;
exports.datetimeFormatter = datetimeFormatter;
exports.arrayMove = exports.parseFieldValue = exports.FIELD_DISPLAY_FORMAT = exports.floatFormatter = exports.defaultFormatter = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _assert = _interopRequireDefault(require("assert"));

var _d3Format = require("d3-format");

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _constants = require("@kepler.gl/constants");

var _plot = require("./plot");

var _utils = require("./utils");

var _FIELD_DISPLAY_FORMAT;

/**
 * simple getting unique values of an array
 *
 * @param values
 * @returns unique values
 */
function unique(values) {
  var results = [];
  var uniqueSet = new Set(values);
  uniqueSet.forEach(function (v) {
    if (notNullorUndefined(v)) {
      results.push(v);
    }
  });
  return results;
}

function getLatLngBounds(points, idx, limit) {
  var lats = points.map(function (d) {
    return Number(Array.isArray(d)) && d[idx];
  }).filter(Number.isFinite).sort(numberSort);

  if (!lats.length) {
    return null;
  } // clamp to limit


  return [Math.max(lats[0], limit[0]), Math.min(lats[lats.length - 1], limit[1])];
}

function clamp(_ref) {
  var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
      min = _ref2[0],
      max = _ref2[1];

  var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return val <= min ? min : val >= max ? max : val;
}

function getSampleData(data) {
  var sampleSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var getValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (d) {
    return d;
  };
  var sampleStep = Math.max(Math.floor(data.length / sampleSize), 1);
  var output = [];

  for (var i = 0; i < data.length; i += sampleStep) {
    output.push(getValue(data[i]));
  }

  return output;
}
/**
 * Convert different time format to unix milliseconds
 */


function timeToUnixMilli(value, format) {
  if (notNullorUndefined(value)) {
    if (typeof value === 'string') {
      return _momentTimezone["default"].utc(value, format).valueOf();
    }

    if (typeof value === 'number') {
      return format === 'x' ? value * 1000 : value;
    }

    if (value instanceof Date) {
      return value.valueOf();
    }
  }

  return null;
}
/**
 * whether null or undefined
 */


function notNullorUndefined(d) {
  return d !== undefined && d !== null;
}
/**
 * Whether d is a number, this filtered out NaN as well
 */


function isNumber(d) {
  return Number.isFinite(d);
}
/**
 * whether object has property
 * @param {string} prop
 * @returns {boolean} - yes or no
 */


function hasOwnProperty(obj, prop) {
  return obj.hasOwnProperty(prop);
}

function numberSort(a, b) {
  return a - b;
}

function getSortingFunction(fieldType) {
  switch (fieldType) {
    case _constants.ALL_FIELD_TYPES.real:
    case _constants.ALL_FIELD_TYPES.integer:
    case _constants.ALL_FIELD_TYPES.timestamp:
      return numberSort;

    default:
      return undefined;
  }
}
/**
 * round number with exact number of decimals
 * return as a string
 */


function preciseRound(num, decimals) {
  var t = Math.pow(10, decimals);
  return (Math.round(num * t + (decimals > 0 ? 1 : 0) * (Math.sign(num) * (10 / Math.pow(100, decimals)))) / t).toFixed(decimals);
}
/**
 * round a giving number at most 4 decimal places
 * e.g. 10 -> 10, 1.12345 -> 1.2345, 2.0 -> 2
 */


function roundToFour(num) {
  // @ts-expect-error
  return Number("".concat(Math.round("".concat(num, "e+4")), "e-4"));
}
/**
 * get number of decimals to round to for slider from step
 * @param step
 * @returns- number of decimal
 */


function getRoundingDecimalFromStep(step) {
  if (isNaN(step)) {
    (0, _assert["default"])('step is not a number');
    (0, _assert["default"])(step);
  }

  var stepStr = step.toString(); // in case the step is a very small number e.g. 1e-7, return decimal e.g. 7 directly

  var splitExponential = stepStr.split('e-');

  if (splitExponential.length === 2) {
    var coeffZero = splitExponential[0].split('.');
    var coeffDecimal = coeffZero.length === 1 ? 0 : coeffZero[1].length;
    return parseInt(splitExponential[1], 10) + coeffDecimal;
  }

  var splitZero = stepStr.split('.');

  if (splitZero.length === 1) {
    return 0;
  }

  return splitZero[1].length;
}
/**
 * If marks is provided, snap to marks, if not normalize to step
 * @param val
 * @param minValue
 * @param step
 * @param marks
 */


function normalizeSliderValue(val, minValue, step, marks) {
  if (marks && marks.length) {
    // Use in slider, given a number and an array of numbers, return the nears number from the array
    return (0, _plot.snapToMarks)(val, marks);
  }

  return roundValToStep(minValue, step, val);
}
/**
 * round the value to step for the slider
 * @param minValue
 * @param step
 * @param val
 * @returns - rounded number
 */


function roundValToStep(minValue, step, val) {
  if (!isNumber(step) || !isNumber(minValue)) {
    return val;
  }

  var decimal = getRoundingDecimalFromStep(step);
  var steps = Math.floor((val - minValue) / step);
  var remain = val - (steps * step + minValue); // has to round because javascript turns 0.1 into 0.9999999999999987

  remain = Number(preciseRound(remain, 8));
  var closest;

  if (remain === 0) {
    closest = val;
  } else if (remain < step / 2) {
    closest = steps * step + minValue;
  } else {
    closest = (steps + 1) * step + minValue;
  } // precise round return a string rounded to the defined decimal


  var rounded = preciseRound(closest, decimal);
  return Number(rounded);
}
/**
 * Get the value format based on field and format options
 * Used in render tooltip value
 */


var defaultFormatter = function defaultFormatter(v) {
  return notNullorUndefined(v) ? String(v) : '';
};

exports.defaultFormatter = defaultFormatter;

var floatFormatter = function floatFormatter(v) {
  return isNumber(v) ? String(roundToFour(v)) : '';
};

exports.floatFormatter = floatFormatter;
var FIELD_DISPLAY_FORMAT = (_FIELD_DISPLAY_FORMAT = {}, (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.string, defaultFormatter), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.timestamp, defaultFormatter), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.integer, defaultFormatter), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.real, defaultFormatter), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES["boolean"], defaultFormatter), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.date, defaultFormatter), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.geojson, function (d) {
  return typeof d === 'string' ? d : (0, _utils.isPlainObject)(d) ? JSON.stringify(d) : Array.isArray(d) ? "[".concat(String(d), "]") : '';
}), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.geoarrow, function (d) {
  return d;
}), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.object, JSON.stringify), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.array, JSON.stringify), _FIELD_DISPLAY_FORMAT);
/**
 * Parse field value and type and return a string representation
 */

exports.FIELD_DISPLAY_FORMAT = FIELD_DISPLAY_FORMAT;

var parseFieldValue = function parseFieldValue(value, type) {
  if (!notNullorUndefined(value)) {
    return '';
  }

  return FIELD_DISPLAY_FORMAT[type] ? FIELD_DISPLAY_FORMAT[type](value) : String(value);
};

exports.parseFieldValue = parseFieldValue;

var arrayMoveMutate = function arrayMoveMutate(array, from, to) {
  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);
};
/**
 *
 * @param array
 * @param from
 * @param to
 */


var arrayMove = function arrayMove(array, from, to) {
  array = array.slice();
  arrayMoveMutate(array, from, to);
  return array;
};
/**
 * Get the value format based on field and format options
 * Used in render tooltip value
 * @param format
 * @param field
 */


exports.arrayMove = arrayMove;

function getFormatter(format, field) {
  if (!format) {
    return defaultFormatter;
  }

  var tooltipFormat = Object.values(_constants.TOOLTIP_FORMATS).find(function (f) {
    return f[_constants.TOOLTIP_KEY] === format;
  });

  if (tooltipFormat) {
    return applyDefaultFormat(tooltipFormat);
  } else if (typeof format === 'string' && field) {
    return applyCustomFormat(format, field);
  }

  return defaultFormatter;
}

function getColumnFormatter(colMeta) {
  var format = colMeta.format,
      displayFormat = colMeta.displayFormat;

  if (!format && !displayFormat) {
    return FIELD_DISPLAY_FORMAT[colMeta.type];
  }

  var tooltipFormat = Object.values(_constants.TOOLTIP_FORMATS).find(function (f) {
    return f[_constants.TOOLTIP_KEY] === displayFormat;
  });

  if (tooltipFormat) {
    return applyDefaultFormat(tooltipFormat);
  } else if (typeof displayFormat === 'string' && colMeta) {
    return applyCustomFormat(displayFormat, colMeta);
  } else if ((0, _typeof2["default"])(displayFormat) === 'object') {
    return applyValueMap(displayFormat);
  }

  return defaultFormatter;
}

function applyValueMap(format) {
  return function (v) {
    return format[v];
  };
}

function applyDefaultFormat(tooltipFormat) {
  if (!tooltipFormat || !tooltipFormat.format) {
    return defaultFormatter;
  }

  switch (tooltipFormat.type) {
    case _constants.TOOLTIP_FORMAT_TYPES.DECIMAL:
      return (0, _d3Format.format)(tooltipFormat.format);

    case _constants.TOOLTIP_FORMAT_TYPES.DATE:
    case _constants.TOOLTIP_FORMAT_TYPES.DATE_TIME:
      return datetimeFormatter(null)(tooltipFormat.format);

    case _constants.TOOLTIP_FORMAT_TYPES.PERCENTAGE:
      return function (v) {
        return "".concat((0, _d3Format.format)(_constants.TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_2.format)(v), "%");
      };

    case _constants.TOOLTIP_FORMAT_TYPES.BOOLEAN:
      return getBooleanFormatter(tooltipFormat.format);

    default:
      return defaultFormatter;
  }
}

function getBooleanFormatter(format) {
  switch (format) {
    case '01':
      return function (v) {
        return v ? '1' : '0';
      };

    case 'yn':
      return function (v) {
        return v ? 'yes' : 'no';
      };

    default:
      return defaultFormatter;
  }
} // Allow user to specify custom tooltip format via config


function applyCustomFormat(format, field) {
  switch (field.type) {
    case _constants.ALL_FIELD_TYPES.real:
    case _constants.ALL_FIELD_TYPES.integer:
      return (0, _d3Format.format)(format);

    case _constants.ALL_FIELD_TYPES.date:
    case _constants.ALL_FIELD_TYPES.timestamp:
      return datetimeFormatter(null)(format);

    default:
      return function (v) {
        return v;
      };
  }
}

function formatLargeNumber(n) {
  // SI-prefix with 4 significant digits
  return (0, _d3Format.format)('.4~s')(n);
}

function formatNumber(n, type) {
  switch (type) {
    case _constants.ALL_FIELD_TYPES.integer:
      if (n < 0) {
        return "-".concat(formatNumber(-n, 'integer'));
      }

      if (n < 1000) {
        return "".concat(Math.round(n));
      }

      if (n < 10 * 1000) {
        return (0, _d3Format.format)(',')(Math.round(n));
      }

      return formatLargeNumber(n);

    case _constants.ALL_FIELD_TYPES.real:
      if (n < 0) {
        return "-".concat(formatNumber(-n, 'number'));
      }

      if (n < 1000) {
        return (0, _d3Format.format)('.4~r')(n);
      }

      if (n < 10 * 1000) {
        return (0, _d3Format.format)(',.2~f')(n);
      }

      return formatLargeNumber(n);

    default:
      return formatNumber(n, 'real');
  }
}
/**
 * Format epoch milliseconds with a format string
 * @type timezone
 */


function datetimeFormatter(timezone) {
  return timezone ? function (format) {
    return function (ts) {
      return _momentTimezone["default"].utc(ts).tz(timezone).format(format);
    };
  } : // return empty string instead of 'Invalid date' if ts is undefined/null
  function (format) {
    return function (ts) {
      return ts ? _momentTimezone["default"].utc(ts).format(format) : '';
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,