import { point } from '@turf/helpers';
import transformTranslate from '@turf/transform-translate';
export function parseSetCameraType(strCameraType, viewState) {
  const modifiedViewState = { ...viewState
  };
  const match = strCameraType.match(/\b(?!to)\b\S+\w/g);
  const turfPoint = point([modifiedViewState.longitude, modifiedViewState.latitude]);

  if (match[0] === 'Orbit') {
    modifiedViewState.bearing = parseInt(match[1], 10);
  }

  const setChecker = new Set(['East', 'South', 'West', 'North']);

  if (setChecker.has(match[0])) {
    if (match[0] === 'East') {
      const translatedPoly = transformTranslate(turfPoint, 10, 270);
      modifiedViewState.longitude = translatedPoly.geometry.coordinates[0];
    } else if (match[0] === 'South') {
      const translatedPoly = transformTranslate(turfPoint, 10, 0);
      modifiedViewState.latitude = translatedPoly.geometry.coordinates[1];
    } else if (match[0] === 'West') {
      const translatedPoly = transformTranslate(turfPoint, 10, 90);
      modifiedViewState.longitude = translatedPoly.geometry.coordinates[0];
    } else if (match[0] === 'North') {
      const translatedPoly = transformTranslate(turfPoint, 10, 180);
      modifiedViewState.latitude = translatedPoly.geometry.coordinates[1];
    }
  }

  if (match[0] === 'Zoom') {
    if (match[1] === 'In') {
      modifiedViewState.zoom = modifiedViewState.zoom + 3;
    } else if (match[1] === 'Out') {
      modifiedViewState.zoom = modifiedViewState.zoom - 3;
    }
  }

  return modifiedViewState;
}
export function msConversion(durationMs) {
  const milliseconds = parseInt(durationMs % 1000, 10);
  let seconds = parseInt(durationMs / 1000 % 60, 10);
  let minutes = parseInt(durationMs / (1000 * 60) % 60, 10);
  minutes = minutes < 10 ? "0".concat(minutes) : minutes;
  seconds = seconds < 10 ? "0".concat(seconds) : seconds;
  return "".concat(minutes, ":").concat(seconds, ".").concat(milliseconds);
}
export function estimateFileSize(frameRate, resolution, durationMs, mediaType) {
  if (mediaType === 'gif') {
    const seconds = parseInt(durationMs / 1000, 10);
    return "".concat(parseInt(resolution[0] * resolution[1] * 6 / (8 * 1024 * 1024) * (frameRate * seconds) * 0.8, 10), " MB");
  }

  return 'Size estimation unavailable';
}
//# sourceMappingURL=utils.js.map