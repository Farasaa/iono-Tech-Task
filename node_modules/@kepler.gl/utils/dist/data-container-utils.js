"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDataContainer = createDataContainer;
exports.createIndexedDataContainer = createIndexedDataContainer;
exports.getSampleData = getSampleData;
exports.DataForm = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _arrowDataContainer = require("./arrow-data-container");

var _rowDataContainer = require("./row-data-container");

var _indexedDataContainer = require("./indexed-data-container");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DataForm = {
  ROWS_ARRAY: 'ROWS_ARRAY',
  COLS_ARRAY: 'COLS_ARRAY'
};
exports.DataForm = DataForm;
var defaultOptions = {
  inputDataFormat: DataForm.ROWS_ARRAY
};
/**
 * Creates a data container wrapper for the data.
 * @param data Data.
 * @param options Options.
 * @returns A data container object which is based on data and options.
 */

function createDataContainer(data) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  options = _objectSpread(_objectSpread({}, defaultOptions), options);

  if (options.inputDataFormat === DataForm.ROWS_ARRAY) {
    return new _rowDataContainer.RowDataContainer({
      rows: data,
      fields: options.fields
    });
  } else if (options.inputDataFormat === DataForm.COLS_ARRAY) {
    return new _arrowDataContainer.ArrowDataContainer({
      cols: data,
      fields: options.fields
    });
  }

  throw Error('Failed to create a data container: not implemented format');
}
/**
 * Creates a data container wrapper around another data container.
 * @param dataContainer Parent data container.
 * @param indices An array of row indices in the parent data container.
 */


function createIndexedDataContainer(dataContainer, indices) {
  return new _indexedDataContainer.IndexedDataContainer(dataContainer, indices);
}
/**
 * Get a sample of rows from a data container.
 * @param dataContainer Data container to get samples from.
 * @param sampleSize Max number of samples.
 * @returns A data container which contains samples from the original data container.
 */


function getSampleData(dataContainer) {
  var sampleSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var numberOfRows = dataContainer.numRows();
  var sampleStep = Math.max(Math.floor(numberOfRows / sampleSize), 1);
  var indices = [];

  for (var i = 0; i < numberOfRows; i += sampleStep) {
    indices.push(i);
  }

  return createIndexedDataContainer(dataContainer, indices);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhLWNvbnRhaW5lci11dGlscy50cyJdLCJuYW1lcyI6WyJEYXRhRm9ybSIsIlJPV1NfQVJSQVkiLCJDT0xTX0FSUkFZIiwiZGVmYXVsdE9wdGlvbnMiLCJpbnB1dERhdGFGb3JtYXQiLCJjcmVhdGVEYXRhQ29udGFpbmVyIiwiZGF0YSIsIm9wdGlvbnMiLCJSb3dEYXRhQ29udGFpbmVyIiwicm93cyIsImZpZWxkcyIsIkFycm93RGF0YUNvbnRhaW5lciIsImNvbHMiLCJFcnJvciIsImNyZWF0ZUluZGV4ZWREYXRhQ29udGFpbmVyIiwiZGF0YUNvbnRhaW5lciIsImluZGljZXMiLCJJbmRleGVkRGF0YUNvbnRhaW5lciIsImdldFNhbXBsZURhdGEiLCJzYW1wbGVTaXplIiwibnVtYmVyT2ZSb3dzIiwibnVtUm93cyIsInNhbXBsZVN0ZXAiLCJNYXRoIiwibWF4IiwiZmxvb3IiLCJpIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7Ozs7O0FBVU8sSUFBTUEsUUFBUSxHQUFHO0FBQ3RCQyxFQUFBQSxVQUFVLEVBQUUsWUFEVTtBQUV0QkMsRUFBQUEsVUFBVSxFQUFFO0FBRlUsQ0FBakI7O0FBS1AsSUFBTUMsY0FBb0MsR0FBRztBQUMzQ0MsRUFBQUEsZUFBZSxFQUFFSixRQUFRLENBQUNDO0FBRGlCLENBQTdDO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNJLG1CQUFULENBQ0xDLElBREssRUFHbUI7QUFBQSxNQUR4QkMsT0FDd0IsdUVBRFFKLGNBQ1I7QUFDeEJJLEVBQUFBLE9BQU8sbUNBQU9KLGNBQVAsR0FBMEJJLE9BQTFCLENBQVA7O0FBRUEsTUFBSUEsT0FBTyxDQUFDSCxlQUFSLEtBQTRCSixRQUFRLENBQUNDLFVBQXpDLEVBQXFEO0FBQ25ELFdBQU8sSUFBSU8sa0NBQUosQ0FBcUI7QUFBQ0MsTUFBQUEsSUFBSSxFQUFFSCxJQUFQO0FBQWFJLE1BQUFBLE1BQU0sRUFBRUgsT0FBTyxDQUFDRztBQUE3QixLQUFyQixDQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUlILE9BQU8sQ0FBQ0gsZUFBUixLQUE0QkosUUFBUSxDQUFDRSxVQUF6QyxFQUFxRDtBQUMxRCxXQUFPLElBQUlTLHNDQUFKLENBQXVCO0FBQUNDLE1BQUFBLElBQUksRUFBRU4sSUFBUDtBQUFhSSxNQUFBQSxNQUFNLEVBQUVILE9BQU8sQ0FBQ0c7QUFBN0IsS0FBdkIsQ0FBUDtBQUNEOztBQUVELFFBQU1HLEtBQUssQ0FBQywyREFBRCxDQUFYO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQywwQkFBVCxDQUNMQyxhQURLLEVBRUxDLE9BRkssRUFHbUI7QUFDeEIsU0FBTyxJQUFJQywwQ0FBSixDQUF5QkYsYUFBekIsRUFBd0NDLE9BQXhDLENBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0UsYUFBVCxDQUNMSCxhQURLLEVBR21CO0FBQUEsTUFEeEJJLFVBQ3dCLHVFQURYLEdBQ1c7QUFDeEIsTUFBTUMsWUFBWSxHQUFHTCxhQUFhLENBQUNNLE9BQWQsRUFBckI7QUFDQSxNQUFNQyxVQUFVLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTRCxJQUFJLENBQUNFLEtBQUwsQ0FBV0wsWUFBWSxHQUFHRCxVQUExQixDQUFULEVBQWdELENBQWhELENBQW5CO0FBRUEsTUFBTUgsT0FBaUIsR0FBRyxFQUExQjs7QUFDQSxPQUFLLElBQUlVLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdOLFlBQXBCLEVBQWtDTSxDQUFDLElBQUlKLFVBQXZDLEVBQW1EO0FBQ2pETixJQUFBQSxPQUFPLENBQUNXLElBQVIsQ0FBYUQsQ0FBYjtBQUNEOztBQUVELFNBQU9aLDBCQUEwQixDQUFDQyxhQUFELEVBQWdCQyxPQUFoQixDQUFqQztBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtBcnJvd0RhdGFDb250YWluZXJ9IGZyb20gJy4vYXJyb3ctZGF0YS1jb250YWluZXInO1xuaW1wb3J0IHtSb3dEYXRhQ29udGFpbmVyfSBmcm9tICcuL3Jvdy1kYXRhLWNvbnRhaW5lcic7XG5pbXBvcnQge0luZGV4ZWREYXRhQ29udGFpbmVyfSBmcm9tICcuL2luZGV4ZWQtZGF0YS1jb250YWluZXInO1xuXG5pbXBvcnQge0RhdGFDb250YWluZXJJbnRlcmZhY2V9IGZyb20gJy4vZGF0YS1jb250YWluZXItaW50ZXJmYWNlJztcbmltcG9ydCB7RmllbGR9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBEYXRhQ29udGFpbmVyT3B0aW9ucyA9IHtcbiAgaW5wdXREYXRhRm9ybWF0Pzogc3RyaW5nOyAvLyBvbmUgb2YgRGF0YUZvcm1cbiAgZmllbGRzPzogRmllbGRbXTtcbn07XG5cbmV4cG9ydCBjb25zdCBEYXRhRm9ybSA9IHtcbiAgUk9XU19BUlJBWTogJ1JPV1NfQVJSQVknLFxuICBDT0xTX0FSUkFZOiAnQ09MU19BUlJBWSdcbn07XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBEYXRhQ29udGFpbmVyT3B0aW9ucyA9IHtcbiAgaW5wdXREYXRhRm9ybWF0OiBEYXRhRm9ybS5ST1dTX0FSUkFZXG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkYXRhIGNvbnRhaW5lciB3cmFwcGVyIGZvciB0aGUgZGF0YS5cbiAqIEBwYXJhbSBkYXRhIERhdGEuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zLlxuICogQHJldHVybnMgQSBkYXRhIGNvbnRhaW5lciBvYmplY3Qgd2hpY2ggaXMgYmFzZWQgb24gZGF0YSBhbmQgb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURhdGFDb250YWluZXIoXG4gIGRhdGE6IGFueVtdLFxuICBvcHRpb25zOiBEYXRhQ29udGFpbmVyT3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zXG4pOiBEYXRhQ29udGFpbmVySW50ZXJmYWNlIHtcbiAgb3B0aW9ucyA9IHsuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9uc307XG5cbiAgaWYgKG9wdGlvbnMuaW5wdXREYXRhRm9ybWF0ID09PSBEYXRhRm9ybS5ST1dTX0FSUkFZKSB7XG4gICAgcmV0dXJuIG5ldyBSb3dEYXRhQ29udGFpbmVyKHtyb3dzOiBkYXRhLCBmaWVsZHM6IG9wdGlvbnMuZmllbGRzfSk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5pbnB1dERhdGFGb3JtYXQgPT09IERhdGFGb3JtLkNPTFNfQVJSQVkpIHtcbiAgICByZXR1cm4gbmV3IEFycm93RGF0YUNvbnRhaW5lcih7Y29sczogZGF0YSwgZmllbGRzOiBvcHRpb25zLmZpZWxkc30pO1xuICB9XG5cbiAgdGhyb3cgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgYSBkYXRhIGNvbnRhaW5lcjogbm90IGltcGxlbWVudGVkIGZvcm1hdCcpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBkYXRhIGNvbnRhaW5lciB3cmFwcGVyIGFyb3VuZCBhbm90aGVyIGRhdGEgY29udGFpbmVyLlxuICogQHBhcmFtIGRhdGFDb250YWluZXIgUGFyZW50IGRhdGEgY29udGFpbmVyLlxuICogQHBhcmFtIGluZGljZXMgQW4gYXJyYXkgb2Ygcm93IGluZGljZXMgaW4gdGhlIHBhcmVudCBkYXRhIGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUluZGV4ZWREYXRhQ29udGFpbmVyKFxuICBkYXRhQ29udGFpbmVyOiBEYXRhQ29udGFpbmVySW50ZXJmYWNlLFxuICBpbmRpY2VzOiBudW1iZXJbXVxuKTogRGF0YUNvbnRhaW5lckludGVyZmFjZSB7XG4gIHJldHVybiBuZXcgSW5kZXhlZERhdGFDb250YWluZXIoZGF0YUNvbnRhaW5lciwgaW5kaWNlcyk7XG59XG5cbi8qKlxuICogR2V0IGEgc2FtcGxlIG9mIHJvd3MgZnJvbSBhIGRhdGEgY29udGFpbmVyLlxuICogQHBhcmFtIGRhdGFDb250YWluZXIgRGF0YSBjb250YWluZXIgdG8gZ2V0IHNhbXBsZXMgZnJvbS5cbiAqIEBwYXJhbSBzYW1wbGVTaXplIE1heCBudW1iZXIgb2Ygc2FtcGxlcy5cbiAqIEByZXR1cm5zIEEgZGF0YSBjb250YWluZXIgd2hpY2ggY29udGFpbnMgc2FtcGxlcyBmcm9tIHRoZSBvcmlnaW5hbCBkYXRhIGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNhbXBsZURhdGEoXG4gIGRhdGFDb250YWluZXI6IERhdGFDb250YWluZXJJbnRlcmZhY2UsXG4gIHNhbXBsZVNpemUgPSA1MDBcbik6IERhdGFDb250YWluZXJJbnRlcmZhY2Uge1xuICBjb25zdCBudW1iZXJPZlJvd3MgPSBkYXRhQ29udGFpbmVyLm51bVJvd3MoKTtcbiAgY29uc3Qgc2FtcGxlU3RlcCA9IE1hdGgubWF4KE1hdGguZmxvb3IobnVtYmVyT2ZSb3dzIC8gc2FtcGxlU2l6ZSksIDEpO1xuXG4gIGNvbnN0IGluZGljZXM6IG51bWJlcltdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZSb3dzOyBpICs9IHNhbXBsZVN0ZXApIHtcbiAgICBpbmRpY2VzLnB1c2goaSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlSW5kZXhlZERhdGFDb250YWluZXIoZGF0YUNvbnRhaW5lciwgaW5kaWNlcyk7XG59XG4iXX0=