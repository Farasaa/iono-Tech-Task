"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log = log;
exports.payload_ = payload_;
exports.apply_ = apply_;
exports.with_ = with_;
exports.if_ = if_;
exports.compose_ = compose_;
exports.merge_ = merge_;
exports.pick_ = pick_;
exports.swap_ = swap_;
exports.map_ = map_;
exports.filterOutById = filterOutById;
exports.removeElementAtIndex = removeElementAtIndex;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _console = _interopRequireDefault(require("global/console"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var identity = function identity(state) {
  return state;
};
/** Returns a function that logs a value with a given message */


function log(text) {
  return function (value) {
    return _console["default"].log(text, value);
  };
}
/** Wraps a value in an object and stores it the `payload` field */


function payload_(payload) {
  return {
    payload: payload
  };
}
/** Wraps a value in an object and stores it the `payload` field */


function apply_(updater, payload) {
  return function (state) {
    return updater(state, payload);
  };
}

function with_(fn) {
  return function (state) {
    return fn(state)(state);
  };
}

function if_(pred, fn) {
  return pred ? fn : identity;
}

function compose_(fns) {
  return function (state) {
    return fns.reduce(function (state2, fn) {
      return fn(state2);
    }, state);
  };
}
/** Returns a reducer function that merges props with state */


function merge_(obj) {
  return function (state) {
    return _objectSpread(_objectSpread({}, state), obj);
  };
}

function pick_(prop) {
  return function (fn) {
    return function (state) {
      return _objectSpread(_objectSpread({}, state), {}, (0, _defineProperty2["default"])({}, prop, fn(state[prop])));
    };
  };
}

function swap_(item) {
  return function (arr) {
    return arr.map(function (a) {
      return a.id === item.id ? item : a;
    });
  };
}

function map_(fn) {
  return function (arr) {
    return arr.map(function (e) {
      return fn(e);
    });
  };
}

function filterOutById(id) {
  return function (arr) {
    return arr.filter(function (e) {
      return e.id !== id;
    });
  };
}

function removeElementAtIndex(index) {
  return function (arr) {
    return [].concat((0, _toConsumableArray2["default"])(arr.slice(0, index)), (0, _toConsumableArray2["default"])(arr.slice(index + 1, arr.length)));
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb3Nlci1oZWxwZXJzLnRzIl0sIm5hbWVzIjpbImlkZW50aXR5Iiwic3RhdGUiLCJsb2ciLCJ0ZXh0IiwidmFsdWUiLCJDb25zb2xlIiwicGF5bG9hZF8iLCJwYXlsb2FkIiwiYXBwbHlfIiwidXBkYXRlciIsIndpdGhfIiwiZm4iLCJpZl8iLCJwcmVkIiwiY29tcG9zZV8iLCJmbnMiLCJyZWR1Y2UiLCJzdGF0ZTIiLCJtZXJnZV8iLCJvYmoiLCJwaWNrXyIsInByb3AiLCJzd2FwXyIsIml0ZW0iLCJhcnIiLCJtYXAiLCJhIiwiaWQiLCJtYXBfIiwiZSIsImZpbHRlck91dEJ5SWQiLCJmaWx0ZXIiLCJyZW1vdmVFbGVtZW50QXRJbmRleCIsImluZGV4Iiwic2xpY2UiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOzs7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFBQyxLQUFLO0FBQUEsU0FBSUEsS0FBSjtBQUFBLENBQXRCO0FBRUE7OztBQUNPLFNBQVNDLEdBQVQsQ0FBYUMsSUFBYixFQUFpRDtBQUN0RCxTQUFPLFVBQUFDLEtBQUs7QUFBQSxXQUFJQyxvQkFBUUgsR0FBUixDQUFZQyxJQUFaLEVBQWtCQyxLQUFsQixDQUFKO0FBQUEsR0FBWjtBQUNEO0FBQ0Q7OztBQUNPLFNBQVNFLFFBQVQsQ0FBcUJDLE9BQXJCLEVBQWlDO0FBQ3RDLFNBQU87QUFBQ0EsSUFBQUEsT0FBTyxFQUFQQTtBQUFELEdBQVA7QUFDRDtBQUNEOzs7QUFDTyxTQUFTQyxNQUFULENBQ0xDLE9BREssRUFFTEYsT0FGSyxFQUdvQjtBQUN6QixTQUFPLFVBQUFOLEtBQUs7QUFBQSxXQUFJUSxPQUFPLENBQUNSLEtBQUQsRUFBUU0sT0FBUixDQUFYO0FBQUEsR0FBWjtBQUNEOztBQUdNLFNBQVNHLEtBQVQsQ0FBc0JDLEVBQXRCLEVBQStEO0FBQ3BFLFNBQU8sVUFBQVYsS0FBSztBQUFBLFdBQUlVLEVBQUUsQ0FBQ1YsS0FBRCxDQUFGLENBQVVBLEtBQVYsQ0FBSjtBQUFBLEdBQVo7QUFDRDs7QUFFTSxTQUFTVyxHQUFULENBQW9CQyxJQUFwQixFQUFtQ0YsRUFBbkMsRUFBeUY7QUFDOUYsU0FBT0UsSUFBSSxHQUFHRixFQUFILEdBQVFYLFFBQW5CO0FBQ0Q7O0FBRU0sU0FBU2MsUUFBVCxDQUF5QkMsR0FBekIsRUFBK0U7QUFDcEYsU0FBTyxVQUFBZCxLQUFLO0FBQUEsV0FBSWMsR0FBRyxDQUFDQyxNQUFKLENBQVcsVUFBQ0MsTUFBRCxFQUFTTixFQUFUO0FBQUEsYUFBZ0JBLEVBQUUsQ0FBQ00sTUFBRCxDQUFsQjtBQUFBLEtBQVgsRUFBdUNoQixLQUF2QyxDQUFKO0FBQUEsR0FBWjtBQUNEO0FBQ0Q7OztBQUNPLFNBQVNpQixNQUFULENBQXVCQyxHQUF2QixFQUFtRTtBQUN4RSxTQUFPLFVBQUFsQixLQUFLO0FBQUEsMkNBQVNBLEtBQVQsR0FBbUJrQixHQUFuQjtBQUFBLEdBQVo7QUFDRDs7QUFFTSxTQUFTQyxLQUFULENBQ0xDLElBREssRUFFMkY7QUFDaEcsU0FBTyxVQUFBVixFQUFFO0FBQUEsV0FBSSxVQUFBVixLQUFLO0FBQUEsNkNBQVNBLEtBQVQsNENBQWlCb0IsSUFBakIsRUFBd0JWLEVBQUUsQ0FBQ1YsS0FBSyxDQUFDb0IsSUFBRCxDQUFOLENBQTFCO0FBQUEsS0FBVDtBQUFBLEdBQVQ7QUFDRDs7QUFFTSxTQUFTQyxLQUFULENBQXVDQyxJQUF2QyxFQUFtRTtBQUN4RSxTQUFPLFVBQUFDLEdBQUc7QUFBQSxXQUFJQSxHQUFHLENBQUNDLEdBQUosQ0FBUSxVQUFBQyxDQUFDO0FBQUEsYUFBS0EsQ0FBQyxDQUFDQyxFQUFGLEtBQVNKLElBQUksQ0FBQ0ksRUFBZCxHQUFtQkosSUFBbkIsR0FBMEJHLENBQS9CO0FBQUEsS0FBVCxDQUFKO0FBQUEsR0FBVjtBQUNEOztBQUVNLFNBQVNFLElBQVQsQ0FBb0JqQixFQUFwQixFQUE0RDtBQUNqRSxTQUFPLFVBQUFhLEdBQUc7QUFBQSxXQUFJQSxHQUFHLENBQUNDLEdBQUosQ0FBUSxVQUFBSSxDQUFDO0FBQUEsYUFBSWxCLEVBQUUsQ0FBQ2tCLENBQUQsQ0FBTjtBQUFBLEtBQVQsQ0FBSjtBQUFBLEdBQVY7QUFDRDs7QUFFTSxTQUFTQyxhQUFULENBQStDSCxFQUEvQyxFQUE4RTtBQUNuRixTQUFPLFVBQUFILEdBQUc7QUFBQSxXQUFJQSxHQUFHLENBQUNPLE1BQUosQ0FBVyxVQUFBRixDQUFDO0FBQUEsYUFBSUEsQ0FBQyxDQUFDRixFQUFGLEtBQVNBLEVBQWI7QUFBQSxLQUFaLENBQUo7QUFBQSxHQUFWO0FBQ0Q7O0FBRU0sU0FBU0ssb0JBQVQsQ0FBaUNDLEtBQWpDLEVBQW1FO0FBQ3hFLFNBQU8sVUFBQVQsR0FBRztBQUFBLHlEQUFRQSxHQUFHLENBQUNVLEtBQUosQ0FBVSxDQUFWLEVBQWFELEtBQWIsQ0FBUix1Q0FBZ0NULEdBQUcsQ0FBQ1UsS0FBSixDQUFVRCxLQUFLLEdBQUcsQ0FBbEIsRUFBcUJULEdBQUcsQ0FBQ1csTUFBekIsQ0FBaEM7QUFBQSxHQUFWO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgQ29uc29sZSBmcm9tICdnbG9iYWwvY29uc29sZSc7XG5cbmNvbnN0IGlkZW50aXR5ID0gc3RhdGUgPT4gc3RhdGU7XG5cbi8qKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBsb2dzIGEgdmFsdWUgd2l0aCBhIGdpdmVuIG1lc3NhZ2UgKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2codGV4dDogc3RyaW5nKTogKHZhbHVlOiBhbnkpID0+IHZvaWQge1xuICByZXR1cm4gdmFsdWUgPT4gQ29uc29sZS5sb2codGV4dCwgdmFsdWUpO1xufVxuLyoqIFdyYXBzIGEgdmFsdWUgaW4gYW4gb2JqZWN0IGFuZCBzdG9yZXMgaXQgdGhlIGBwYXlsb2FkYCBmaWVsZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBheWxvYWRfPFA+KHBheWxvYWQ6IFApIHtcbiAgcmV0dXJuIHtwYXlsb2FkfTtcbn1cbi8qKiBXcmFwcyBhIHZhbHVlIGluIGFuIG9iamVjdCBhbmQgc3RvcmVzIGl0IHRoZSBgcGF5bG9hZGAgZmllbGQgKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseV88U3RhdGUsIFA+KFxuICB1cGRhdGVyOiAoc3RhdGU6IFN0YXRlLCBuZXh0UGF5bG9hZDogUCkgPT4gU3RhdGUsXG4gIHBheWxvYWQ6IFBcbik6IChzdGF0ZTogU3RhdGUpID0+IFN0YXRlIHtcbiAgcmV0dXJuIHN0YXRlID0+IHVwZGF0ZXIoc3RhdGUsIHBheWxvYWQpO1xufVxuXG50eXBlIEFyZzxTdGF0ZT4gPSAoc3RhdGU6IFN0YXRlKSA9PiAobmV4dFN0YXRlOiBTdGF0ZSkgPT4gU3RhdGU7XG5leHBvcnQgZnVuY3Rpb24gd2l0aF88U3RhdGU+KGZuOiBBcmc8U3RhdGU+KTogKHN0YXRlOiBTdGF0ZSkgPT4gU3RhdGUge1xuICByZXR1cm4gc3RhdGUgPT4gZm4oc3RhdGUpKHN0YXRlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlmXzxTdGF0ZT4ocHJlZDogYm9vbGVhbiwgZm46IChzdGF0ZTogU3RhdGUpID0+IFN0YXRlKTogKHN0YXRlOiBTdGF0ZSkgPT4gU3RhdGUge1xuICByZXR1cm4gcHJlZCA/IGZuIDogaWRlbnRpdHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlXzxTdGF0ZT4oZm5zOiBBcnJheTwoczogU3RhdGUpID0+IFN0YXRlPik6IChzOiBTdGF0ZSkgPT4gU3RhdGUge1xuICByZXR1cm4gc3RhdGUgPT4gZm5zLnJlZHVjZSgoc3RhdGUyLCBmbikgPT4gZm4oc3RhdGUyKSwgc3RhdGUpO1xufVxuLyoqIFJldHVybnMgYSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgbWVyZ2VzIHByb3BzIHdpdGggc3RhdGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZV88UHJvcHM+KG9iajogUHJvcHMpOiA8U3RhdGU+KHN0YXRlOiBTdGF0ZSkgPT4gU3RhdGUge1xuICByZXR1cm4gc3RhdGUgPT4gKHsuLi5zdGF0ZSwgLi4ub2JqfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwaWNrXzxQcm9wIGV4dGVuZHMgc3RyaW5nPihcbiAgcHJvcDogUHJvcFxuKTogPFZhbHVlPihmbjogKHA6IFZhbHVlKSA9PiBWYWx1ZSkgPT4gPFN0YXRlIGV4dGVuZHMgUmVjb3JkPFByb3AsIFZhbHVlPj4oc3RhdGU6IFN0YXRlKSA9PiBTdGF0ZSB7XG4gIHJldHVybiBmbiA9PiBzdGF0ZSA9PiAoey4uLnN0YXRlLCBbcHJvcF06IGZuKHN0YXRlW3Byb3BdKX0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3dhcF88WCBleHRlbmRzIHtpZDogc3RyaW5nfT4oaXRlbTogWCk6IChhcnI6IFhbXSkgPT4gWFtdIHtcbiAgcmV0dXJuIGFyciA9PiBhcnIubWFwKGEgPT4gKGEuaWQgPT09IGl0ZW0uaWQgPyBpdGVtIDogYSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwXzxYLCBUPihmbjogKHN0YXRlOiBYKSA9PiBUKTogKGFycjogWFtdKSA9PiBUW10ge1xuICByZXR1cm4gYXJyID0+IGFyci5tYXAoZSA9PiBmbihlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPdXRCeUlkPFggZXh0ZW5kcyB7aWQ6IHN0cmluZ30+KGlkOiBzdHJpbmcpOiAoYXJyOiBYW10pID0+IFhbXSB7XG4gIHJldHVybiBhcnIgPT4gYXJyLmZpbHRlcihlID0+IGUuaWQgIT09IGlkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnRBdEluZGV4PFg+KGluZGV4OiBudW1iZXIpOiAoYXJyOiBYW10pID0+IFhbXSB7XG4gIHJldHVybiBhcnIgPT4gWy4uLmFyci5zbGljZSgwLCBpbmRleCksIC4uLmFyci5zbGljZShpbmRleCArIDEsIGFyci5sZW5ndGgpXTtcbn1cbiJdfQ==