import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { loadLibrary, global } from '@loaders.gl/loader-utils';
var loadGifshotPromise;
export function loadGifshotModule() {
  return _loadGifshotModule.apply(this, arguments);
}

function _loadGifshotModule() {
  _loadGifshotModule = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
    var options,
        modules,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            modules = options.modules || {};

            if (!modules.gifshot) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", modules.gifshot);

          case 4:
            loadGifshotPromise = loadGifshotPromise || loadGifshot(options);
            _context.next = 7;
            return loadGifshotPromise;

          case 7:
            return _context.abrupt("return", _context.sent);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadGifshotModule.apply(this, arguments);
}

function loadGifshot(_x) {
  return _loadGifshot.apply(this, arguments);
}

function _loadGifshot() {
  _loadGifshot = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(options) {
    var gifshot;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options.libraryPath = options.libraryPath || 'libs/';
            _context2.next = 3;
            return loadLibrary('gifshot.js', 'gifshot', options);

          case 3:
            gifshot = _context2.sent;
            return _context2.abrupt("return", gifshot || global.gifshot);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadGifshot.apply(this, arguments);
}
//# sourceMappingURL=gifshot-loader.js.map