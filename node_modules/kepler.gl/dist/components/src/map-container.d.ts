import React from 'react';
import { Map, MapRef } from 'react-map-gl/maplibre';
import { VisStateActions, MapStateActions, UIStateActions } from '@kepler.gl/actions';
import MapPopoverFactory from './map/map-popover';
import MapControlFactory from './map/map-control';
import EditorFactory from './editor/editor';
import { generateMapboxLayers } from '@kepler.gl/layers';
import { MapState, MapControls, Viewport } from '@kepler.gl/types';
import { DatasetAttribution } from './types';
import { MapStyle, computeDeckLayers } from '@kepler.gl/reducers';
import { VisState } from '@kepler.gl/schemas';
export declare const isSplitSelector: (props: any) => any;
export declare const Droppable: ({ containerId }: {
    containerId: any;
}) => React.JSX.Element;
export declare const Attribution: React.FC<{
    showMapboxLogo: boolean;
    showOsmBasemapAttribution: boolean;
    datasetAttributions: DatasetAttribution[];
}>;
declare type MapboxStyle = string | object | undefined;
export interface MapContainerProps {
    visState: VisState;
    mapState: MapState;
    mapControls: MapControls;
    mapStyle: {
        bottomMapStyle?: MapboxStyle;
        topMapStyle?: MapboxStyle;
    } & MapStyle;
    mapboxApiAccessToken: string;
    mapboxApiUrl: string;
    visStateActions: typeof VisStateActions;
    mapStateActions: typeof MapStateActions;
    uiStateActions: typeof UIStateActions;
    primary?: boolean;
    readOnly?: boolean;
    isExport?: boolean;
    onMapToggleLayer?: Function;
    onMapStyleLoaded?: Function;
    onMapRender?: Function;
    getMapboxRef?: (mapbox?: MapRef | null, index?: number) => void;
    index?: number;
    deleteMapLabels?: (containerId: string, layerId: string) => void;
    containerId?: number;
    locale?: any;
    theme?: any;
    editor?: any;
    MapComponent?: typeof Map;
    deckGlProps?: any;
    onDeckInitialized?: (a: any, b: any) => void;
    onViewStateChange?: (viewport: Viewport) => void;
    topMapContainerProps: any;
    bottomMapContainerProps: any;
    transformRequest?: any;
    datasetAttributions?: DatasetAttribution[];
    generateMapboxLayers?: typeof generateMapboxLayers;
    generateDeckGLLayers?: typeof computeDeckLayers;
    onMouseMove?: (event: React.MouseEvent & {
        lngLat?: [number, number];
    }) => void;
    children?: React.ReactNode;
    deckRenderCallbacks?: {
        onDeckLoad?: () => void;
        onDeckRender?: (deckProps: Record<string, unknown>) => Record<string, unknown> | null;
        onDeckAfterRender?: (deckProps: Record<string, unknown>) => any;
    };
}
declare function MapContainerFactory(MapPopover: ReturnType<typeof MapPopoverFactory>, MapControl: ReturnType<typeof MapControlFactory>, Editor: ReturnType<typeof EditorFactory>): React.ComponentType<MapContainerProps>;
declare namespace MapContainerFactory {
    var deps: (typeof EditorFactory | typeof MapPopoverFactory | typeof MapControlFactory)[];
}
export default MapContainerFactory;
