import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { easing } from 'popmotion';
import { DeckAdapter, DeckScene, CameraKeyframes, WebMEncoder, JPEGSequenceEncoder, PNGSequenceEncoder, PreviewEncoder, GifEncoder } from '@hubble.gl/core';
import ExportVideoPanel from './export-video-panel';
import { parseSetCameraType } from './utils';
import { DEFAULT_FILENAME, getResolutionSetting } from './constants';
var ENCODERS = {
  gif: GifEncoder,
  webm: WebMEncoder,
  jpeg: JPEGSequenceEncoder,
  png: PNGSequenceEncoder
};
export var ExportVideoPanelContainer = function (_Component) {
  _inherits(ExportVideoPanelContainer, _Component);

  var _super = _createSuper(ExportVideoPanelContainer);

  function ExportVideoPanelContainer(props) {
    var _this;

    _classCallCheck(this, ExportVideoPanelContainer);

    _this = _super.call(this, props);
    _this.setMediaType = _this.setMediaType.bind(_assertThisInitialized(_this));
    _this.setCameraPreset = _this.setCameraPreset.bind(_assertThisInitialized(_this));
    _this.setFileName = _this.setFileName.bind(_assertThisInitialized(_this));
    _this.setResolution = _this.setResolution.bind(_assertThisInitialized(_this));
    _this.setViewState = _this.setViewState.bind(_assertThisInitialized(_this));
    _this.getCameraKeyframes = _this.getCameraKeyframes.bind(_assertThisInitialized(_this));
    _this.getDeckScene = _this.getDeckScene.bind(_assertThisInitialized(_this));
    _this.onPreviewVideo = _this.onPreviewVideo.bind(_assertThisInitialized(_this));
    _this.onRenderVideo = _this.onRenderVideo.bind(_assertThisInitialized(_this));
    _this.setDuration = _this.setDuration.bind(_assertThisInitialized(_this));
    _this.setViewState = _this.setViewState.bind(_assertThisInitialized(_this));
    var initialState = props.initialState,
        mapState = props.mapData.mapState,
        glContext = props.glContext;
    _this.state = _objectSpread({
      mediaType: 'gif',
      cameraPreset: 'Orbit (90ยบ)',
      fileName: '',
      resolution: '1280x720',
      durationMs: 1000,
      viewState: mapState,
      adapter: new DeckAdapter(_this.getDeckScene, glContext)
    }, initialState || {});
    return _this;
  }

  _createClass(ExportVideoPanelContainer, [{
    key: "getFileName",
    value: function getFileName() {
      var fileName = this.state.fileName;
      if (fileName === '') return DEFAULT_FILENAME;
      return fileName;
    }
  }, {
    key: "getCanvasSize",
    value: function getCanvasSize() {
      var resolution = this.state.resolution;
      return getResolutionSetting(resolution);
    }
  }, {
    key: "getEncoderSettings",
    value: function getEncoderSettings() {
      var fileName = this.getFileName();

      var _this$getCanvasSize = this.getCanvasSize(),
          width = _this$getCanvasSize.width,
          height = _this$getCanvasSize.height;

      return {
        framerate: 30,
        webm: {
          quality: 0.8
        },
        jpeg: {
          quality: 0.8
        },
        gif: {
          sampleInterval: 1000,
          width: width,
          height: height
        },
        filename: fileName
      };
    }
  }, {
    key: "getEncoder",
    value: function getEncoder() {
      var mediaType = this.state.mediaType;
      return ENCODERS[mediaType];
    }
  }, {
    key: "getCameraKeyframes",
    value: function getCameraKeyframes() {
      var prevCamera = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var _this$state = this.state,
          viewState = _this$state.viewState,
          cameraPreset = _this$state.cameraPreset,
          durationMs = _this$state.durationMs;
      var longitude = viewState.longitude,
          latitude = viewState.latitude,
          zoom = viewState.zoom,
          pitch = viewState.pitch,
          bearing = viewState.bearing;
      return new CameraKeyframes({
        timings: [0, durationMs],
        keyframes: [{
          longitude: longitude,
          latitude: latitude,
          zoom: zoom,
          pitch: pitch,
          bearing: bearing
        }, parseSetCameraType(cameraPreset, viewState)],
        easings: [easing.easeInOut]
      });
    }
  }, {
    key: "getDeckScene",
    value: function getDeckScene(animationLoop) {
      var durationMs = this.state.durationMs;

      var _this$getCanvasSize2 = this.getCanvasSize(),
          width = _this$getCanvasSize2.width,
          height = _this$getCanvasSize2.height;

      var keyframes = {
        camera: this.getCameraKeyframes()
      };
      var currentCamera = animationLoop.timeline.attachAnimation(keyframes.camera);
      return new DeckScene({
        animationLoop: animationLoop,
        keyframes: keyframes,
        lengthMs: durationMs,
        width: width,
        height: height,
        currentCamera: currentCamera
      });
    }
  }, {
    key: "setStateAndNotify",
    value: function setStateAndNotify(update) {
      var onSettingsChange = this.props.onSettingsChange,
          state = this.state;
      this.setState(_objectSpread(_objectSpread({}, state), update));

      if (onSettingsChange) {
        var mediaType = state.mediaType,
            cameraPreset = state.cameraPreset,
            fileName = state.fileName,
            resolution = state.resolution,
            durationMs = state.durationMs;
        onSettingsChange(_objectSpread({
          mediaType: mediaType,
          cameraPreset: cameraPreset,
          fileName: fileName,
          resolution: resolution,
          durationMs: durationMs
        }, update));
      }
    }
  }, {
    key: "setMediaType",
    value: function setMediaType(mediaType) {
      this.setStateAndNotify({
        mediaType: mediaType
      });
    }
  }, {
    key: "setCameraPreset",
    value: function setCameraPreset(cameraPreset) {
      this.setStateAndNotify({
        cameraPreset: cameraPreset
      });
    }
  }, {
    key: "setFileName",
    value: function setFileName(fileName) {
      this.setStateAndNotify({
        fileName: fileName
      });
    }
  }, {
    key: "setResolution",
    value: function setResolution(resolution) {
      this.setStateAndNotify({
        resolution: resolution
      });
    }
  }, {
    key: "setViewState",
    value: function setViewState(vs) {
      this.setState({
        viewState: vs.viewState
      });
    }
  }, {
    key: "onPreviewVideo",
    value: function onPreviewVideo() {
      var _this2 = this;

      var adapter = this.state.adapter;
      var encoderSettings = this.getEncoderSettings();

      var onStop = function onStop() {
        _this2.forceUpdate();
      };

      adapter.render(PreviewEncoder, encoderSettings, onStop, this.getCameraKeyframes);
    }
  }, {
    key: "onRenderVideo",
    value: function onRenderVideo() {
      var adapter = this.state.adapter;
      var Encoder = this.getEncoder();
      var encoderSettings = this.getEncoderSettings();

      var onStop = function onStop() {};

      adapter.render(Encoder, encoderSettings, onStop, this.getCameraKeyframes);
    }
  }, {
    key: "setDuration",
    value: function setDuration(durationMs) {
      var adapter = this.state.adapter;
      adapter.scene.lengthMs = durationMs;
      this.setStateAndNotify({
        durationMs: durationMs
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          exportVideoWidth = _this$props.exportVideoWidth,
          handleClose = _this$props.handleClose,
          mapData = _this$props.mapData,
          header = _this$props.header;
      var _this$state2 = this.state,
          adapter = _this$state2.adapter,
          durationMs = _this$state2.durationMs,
          mediaType = _this$state2.mediaType,
          cameraPreset = _this$state2.cameraPreset,
          fileName = _this$state2.fileName,
          resolution = _this$state2.resolution,
          viewState = _this$state2.viewState;
      var settingsData = {
        mediaType: mediaType,
        cameraPreset: cameraPreset,
        fileName: fileName,
        resolution: resolution
      };
      var encoderSettings = this.getEncoderSettings();

      var _this$getCanvasSize3 = this.getCanvasSize(),
          width = _this$getCanvasSize3.width,
          height = _this$getCanvasSize3.height;

      return React.createElement(ExportVideoPanel, {
        exportVideoWidth: exportVideoWidth,
        handleClose: handleClose,
        header: header,
        mapData: mapData,
        viewState: viewState,
        setViewState: this.setViewState,
        settingsData: settingsData,
        setMediaType: this.setMediaType,
        setCameraPreset: this.setCameraPreset,
        setFileName: this.setFileName,
        setResolution: this.setResolution,
        adapter: adapter,
        handlePreviewVideo: this.onPreviewVideo,
        handleRenderVideo: this.onRenderVideo,
        durationMs: durationMs,
        setDuration: this.setDuration,
        frameRate: encoderSettings.framerate,
        resolution: [width, height],
        mediaType: mediaType
      });
    }
  }]);

  return ExportVideoPanelContainer;
}(Component);
ExportVideoPanelContainer.defaultProps = {
  exportVideoWidth: 540,
  header: true,
  glContext: undefined
};
//# sourceMappingURL=export-video-panel-container.js.map