"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSupportedFilterFields = getSupportedFilterFields;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = require("../../common/styled-components");

var _filterPanelHeader = _interopRequireDefault(require("../../side-panel/filter-panel/filter-panel-header"));

var _sourceDataSelector = _interopRequireDefault(require("../../side-panel/common/source-data-selector"));

var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
NewFilterPanelFactory.deps = [_filterPanelHeader["default"], _sourceDataSelector["default"], _fieldSelector["default"]];

function getSupportedFilterFields(supportedFilterTypes, fields) {
  return supportedFilterTypes ? fields.filter(function (field) {
    return supportedFilterTypes.includes(field.type);
  }) : fields;
}

function NewFilterPanelFactory(FilterPanelHeader, SourceDataSelector, FieldSelector) {
  var NewFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
        filter = _ref.filter,
        datasets = _ref.datasets,
        allAvailableFields = _ref.allAvailableFields,
        setFilter = _ref.setFilter,
        removeFilter = _ref.removeFilter;
    var onFieldSelector = (0, _react.useCallback)(function (field) {
      return setFilter(idx, 'name', field.name);
    }, [idx, setFilter]);
    var onSourceDataSelector = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'dataId', value);
    }, [idx, setFilter]);
    var dataset = datasets[filter.dataId[0]];
    var supportedFields = (0, _react.useMemo)(function () {
      return getSupportedFilterFields(dataset.supportedFilterTypes, allAvailableFields);
    }, [dataset.supportedFilterTypes, allAvailableFields]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(FilterPanelHeader, {
      datasets: [dataset],
      filter: filter,
      removeFilter: removeFilter
    }, /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      inputTheme: "secondary",
      fields: supportedFields,
      value: Array.isArray(filter.name) ? filter.name[0] : filter.name,
      erasable: false,
      onSelect: onFieldSelector
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents.StyledFilterContent, {
      className: "filter-panel__content"
    }, Object.keys(datasets).length > 1 && /*#__PURE__*/_react["default"].createElement(SourceDataSelector, {
      inputTheme: "secondary",
      datasets: datasets,
      disabled: filter.freeze,
      dataId: filter.dataId,
      onSelect: onSourceDataSelector
    })));
  });

  NewFilterPanel.displayName = 'NewFilterPanel';
  return NewFilterPanel;
}

var _default = NewFilterPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maWx0ZXJzL2ZpbHRlci1wYW5lbHMvbmV3LWZpbHRlci1wYW5lbC50c3giXSwibmFtZXMiOlsiTmV3RmlsdGVyUGFuZWxGYWN0b3J5IiwiZGVwcyIsIkZpbHRlclBhbmVsSGVhZGVyRmFjdG9yeSIsIlNvdXJjZURhdGFTZWxlY3RvckZhY3RvcnkiLCJGaWVsZFNlbGVjdG9yRmFjdG9yeSIsImdldFN1cHBvcnRlZEZpbHRlckZpZWxkcyIsInN1cHBvcnRlZEZpbHRlclR5cGVzIiwiZmllbGRzIiwiZmlsdGVyIiwiZmllbGQiLCJpbmNsdWRlcyIsInR5cGUiLCJGaWx0ZXJQYW5lbEhlYWRlciIsIlNvdXJjZURhdGFTZWxlY3RvciIsIkZpZWxkU2VsZWN0b3IiLCJOZXdGaWx0ZXJQYW5lbCIsIlJlYWN0IiwibWVtbyIsImlkeCIsImRhdGFzZXRzIiwiYWxsQXZhaWxhYmxlRmllbGRzIiwic2V0RmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwib25GaWVsZFNlbGVjdG9yIiwibmFtZSIsIm9uU291cmNlRGF0YVNlbGVjdG9yIiwidmFsdWUiLCJkYXRhc2V0IiwiZGF0YUlkIiwic3VwcG9ydGVkRmllbGRzIiwiQXJyYXkiLCJpc0FycmF5IiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImZyZWV6ZSIsImRpc3BsYXlOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFQQTtBQUNBO0FBV0FBLHFCQUFxQixDQUFDQyxJQUF0QixHQUE2QixDQUMzQkMsNkJBRDJCLEVBRTNCQyw4QkFGMkIsRUFHM0JDLHlCQUgyQixDQUE3Qjs7QUFNTyxTQUFTQyx3QkFBVCxDQUNMQyxvQkFESyxFQUVMQyxNQUZLLEVBR0w7QUFDQSxTQUFPRCxvQkFBb0IsR0FDdkJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLFVBQUFDLEtBQUs7QUFBQSxXQUFJSCxvQkFBb0IsQ0FBQ0ksUUFBckIsQ0FBOEJELEtBQUssQ0FBQ0UsSUFBcEMsQ0FBSjtBQUFBLEdBQW5CLENBRHVCLEdBRXZCSixNQUZKO0FBR0Q7O0FBRUQsU0FBU1AscUJBQVQsQ0FDRVksaUJBREYsRUFFRUMsa0JBRkYsRUFHRUMsYUFIRixFQUlFO0FBQ0EsTUFBTUMsY0FBMkQsZ0JBQUdDLGtCQUFNQyxJQUFOLENBQ2xFLGdCQUEwRTtBQUFBLFFBQXhFQyxHQUF3RSxRQUF4RUEsR0FBd0U7QUFBQSxRQUFuRVYsTUFBbUUsUUFBbkVBLE1BQW1FO0FBQUEsUUFBM0RXLFFBQTJELFFBQTNEQSxRQUEyRDtBQUFBLFFBQWpEQyxrQkFBaUQsUUFBakRBLGtCQUFpRDtBQUFBLFFBQTdCQyxTQUE2QixRQUE3QkEsU0FBNkI7QUFBQSxRQUFsQkMsWUFBa0IsUUFBbEJBLFlBQWtCO0FBQ3hFLFFBQU1DLGVBQWUsR0FBRyx3QkFBWSxVQUFBZCxLQUFLO0FBQUEsYUFBSVksU0FBUyxDQUFDSCxHQUFELEVBQU0sTUFBTixFQUFjVCxLQUFLLENBQUNlLElBQXBCLENBQWI7QUFBQSxLQUFqQixFQUF5RCxDQUMvRU4sR0FEK0UsRUFFL0VHLFNBRitFLENBQXpELENBQXhCO0FBS0EsUUFBTUksb0JBQW9CLEdBQUcsd0JBQVksVUFBQUMsS0FBSztBQUFBLGFBQUlMLFNBQVMsQ0FBQ0gsR0FBRCxFQUFNLFFBQU4sRUFBZ0JRLEtBQWhCLENBQWI7QUFBQSxLQUFqQixFQUFzRCxDQUNqRlIsR0FEaUYsRUFFakZHLFNBRmlGLENBQXRELENBQTdCO0FBS0EsUUFBTU0sT0FBb0IsR0FBR1IsUUFBUSxDQUFDWCxNQUFNLENBQUNvQixNQUFQLENBQWMsQ0FBZCxDQUFELENBQXJDO0FBQ0EsUUFBTUMsZUFBZSxHQUFHLG9CQUN0QjtBQUFBLGFBQU14Qix3QkFBd0IsQ0FBQ3NCLE9BQU8sQ0FBQ3JCLG9CQUFULEVBQStCYyxrQkFBL0IsQ0FBOUI7QUFBQSxLQURzQixFQUV0QixDQUFDTyxPQUFPLENBQUNyQixvQkFBVCxFQUErQmMsa0JBQS9CLENBRnNCLENBQXhCO0FBS0Esd0JBQ0UsK0VBQ0UsZ0NBQUMsaUJBQUQ7QUFBbUIsTUFBQSxRQUFRLEVBQUUsQ0FBQ08sT0FBRCxDQUE3QjtBQUF3QyxNQUFBLE1BQU0sRUFBRW5CLE1BQWhEO0FBQXdELE1BQUEsWUFBWSxFQUFFYztBQUF0RSxvQkFDRSxnQ0FBQyxhQUFEO0FBQ0UsTUFBQSxVQUFVLEVBQUMsV0FEYjtBQUVFLE1BQUEsTUFBTSxFQUFFTyxlQUZWO0FBR0UsTUFBQSxLQUFLLEVBQUVDLEtBQUssQ0FBQ0MsT0FBTixDQUFjdkIsTUFBTSxDQUFDZ0IsSUFBckIsSUFBNkJoQixNQUFNLENBQUNnQixJQUFQLENBQVksQ0FBWixDQUE3QixHQUE4Q2hCLE1BQU0sQ0FBQ2dCLElBSDlEO0FBSUUsTUFBQSxRQUFRLEVBQUUsS0FKWjtBQUtFLE1BQUEsUUFBUSxFQUFFRDtBQUxaLE1BREYsQ0FERixlQVVFLGdDQUFDLHFDQUFEO0FBQXFCLE1BQUEsU0FBUyxFQUFDO0FBQS9CLE9BQ0dTLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZZCxRQUFaLEVBQXNCZSxNQUF0QixHQUErQixDQUEvQixpQkFDQyxnQ0FBQyxrQkFBRDtBQUNFLE1BQUEsVUFBVSxFQUFDLFdBRGI7QUFFRSxNQUFBLFFBQVEsRUFBRWYsUUFGWjtBQUdFLE1BQUEsUUFBUSxFQUFFWCxNQUFNLENBQUMyQixNQUhuQjtBQUlFLE1BQUEsTUFBTSxFQUFFM0IsTUFBTSxDQUFDb0IsTUFKakI7QUFLRSxNQUFBLFFBQVEsRUFBRUg7QUFMWixNQUZKLENBVkYsQ0FERjtBQXdCRCxHQTFDaUUsQ0FBcEU7O0FBNkNBVixFQUFBQSxjQUFjLENBQUNxQixXQUFmLEdBQTZCLGdCQUE3QjtBQUVBLFNBQU9yQixjQUFQO0FBQ0Q7O2VBRWNmLHFCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2ssIHVzZU1lbW99IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7U3R5bGVkRmlsdGVyQ29udGVudH0gZnJvbSAnLi4vLi4vY29tbW9uL3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBGaWx0ZXJQYW5lbEhlYWRlckZhY3RvcnkgZnJvbSAnLi4vLi4vc2lkZS1wYW5lbC9maWx0ZXItcGFuZWwvZmlsdGVyLXBhbmVsLWhlYWRlcic7XG5pbXBvcnQgU291cmNlRGF0YVNlbGVjdG9yRmFjdG9yeSBmcm9tICcuLi8uLi9zaWRlLXBhbmVsL2NvbW1vbi9zb3VyY2UtZGF0YS1zZWxlY3Rvcic7XG5pbXBvcnQgRmllbGRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL2ZpZWxkLXNlbGVjdG9yJztcbmltcG9ydCB7RmlsdGVyUGFuZWxDb21wb25lbnR9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtLZXBsZXJUYWJsZX0gZnJvbSAnQGtlcGxlci5nbC90YWJsZSc7XG5pbXBvcnQge0ZpZWxkLCBGaWx0ZXJCYXNlLCBMaW5lQ2hhcnR9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG5OZXdGaWx0ZXJQYW5lbEZhY3RvcnkuZGVwcyA9IFtcbiAgRmlsdGVyUGFuZWxIZWFkZXJGYWN0b3J5LFxuICBTb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5LFxuICBGaWVsZFNlbGVjdG9yRmFjdG9yeVxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1cHBvcnRlZEZpbHRlckZpZWxkcyhcbiAgc3VwcG9ydGVkRmlsdGVyVHlwZXM6IEtlcGxlclRhYmxlWydzdXBwb3J0ZWRGaWx0ZXJUeXBlcyddLFxuICBmaWVsZHM6IEZpZWxkW11cbikge1xuICByZXR1cm4gc3VwcG9ydGVkRmlsdGVyVHlwZXNcbiAgICA/IGZpZWxkcy5maWx0ZXIoZmllbGQgPT4gc3VwcG9ydGVkRmlsdGVyVHlwZXMuaW5jbHVkZXMoZmllbGQudHlwZSkpXG4gICAgOiBmaWVsZHM7XG59XG5cbmZ1bmN0aW9uIE5ld0ZpbHRlclBhbmVsRmFjdG9yeShcbiAgRmlsdGVyUGFuZWxIZWFkZXI6IFJldHVyblR5cGU8dHlwZW9mIEZpbHRlclBhbmVsSGVhZGVyRmFjdG9yeT4sXG4gIFNvdXJjZURhdGFTZWxlY3RvcjogUmV0dXJuVHlwZTx0eXBlb2YgU291cmNlRGF0YVNlbGVjdG9yRmFjdG9yeT4sXG4gIEZpZWxkU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIEZpZWxkU2VsZWN0b3JGYWN0b3J5PlxuKSB7XG4gIGNvbnN0IE5ld0ZpbHRlclBhbmVsOiBGaWx0ZXJQYW5lbENvbXBvbmVudDxGaWx0ZXJCYXNlPExpbmVDaGFydD4+ID0gUmVhY3QubWVtbyhcbiAgICAoe2lkeCwgZmlsdGVyLCBkYXRhc2V0cywgYWxsQXZhaWxhYmxlRmllbGRzLCBzZXRGaWx0ZXIsIHJlbW92ZUZpbHRlcn0pID0+IHtcbiAgICAgIGNvbnN0IG9uRmllbGRTZWxlY3RvciA9IHVzZUNhbGxiYWNrKGZpZWxkID0+IHNldEZpbHRlcihpZHgsICduYW1lJywgZmllbGQubmFtZSksIFtcbiAgICAgICAgaWR4LFxuICAgICAgICBzZXRGaWx0ZXJcbiAgICAgIF0pO1xuXG4gICAgICBjb25zdCBvblNvdXJjZURhdGFTZWxlY3RvciA9IHVzZUNhbGxiYWNrKHZhbHVlID0+IHNldEZpbHRlcihpZHgsICdkYXRhSWQnLCB2YWx1ZSksIFtcbiAgICAgICAgaWR4LFxuICAgICAgICBzZXRGaWx0ZXJcbiAgICAgIF0pO1xuXG4gICAgICBjb25zdCBkYXRhc2V0OiBLZXBsZXJUYWJsZSA9IGRhdGFzZXRzW2ZpbHRlci5kYXRhSWRbMF1dO1xuICAgICAgY29uc3Qgc3VwcG9ydGVkRmllbGRzID0gdXNlTWVtbyhcbiAgICAgICAgKCkgPT4gZ2V0U3VwcG9ydGVkRmlsdGVyRmllbGRzKGRhdGFzZXQuc3VwcG9ydGVkRmlsdGVyVHlwZXMsIGFsbEF2YWlsYWJsZUZpZWxkcyksXG4gICAgICAgIFtkYXRhc2V0LnN1cHBvcnRlZEZpbHRlclR5cGVzLCBhbGxBdmFpbGFibGVGaWVsZHNdXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIDxGaWx0ZXJQYW5lbEhlYWRlciBkYXRhc2V0cz17W2RhdGFzZXRdfSBmaWx0ZXI9e2ZpbHRlcn0gcmVtb3ZlRmlsdGVyPXtyZW1vdmVGaWx0ZXJ9PlxuICAgICAgICAgICAgPEZpZWxkU2VsZWN0b3JcbiAgICAgICAgICAgICAgaW5wdXRUaGVtZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgIGZpZWxkcz17c3VwcG9ydGVkRmllbGRzfVxuICAgICAgICAgICAgICB2YWx1ZT17QXJyYXkuaXNBcnJheShmaWx0ZXIubmFtZSkgPyBmaWx0ZXIubmFtZVswXSA6IGZpbHRlci5uYW1lfVxuICAgICAgICAgICAgICBlcmFzYWJsZT17ZmFsc2V9XG4gICAgICAgICAgICAgIG9uU2VsZWN0PXtvbkZpZWxkU2VsZWN0b3J9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRmlsdGVyUGFuZWxIZWFkZXI+XG4gICAgICAgICAgPFN0eWxlZEZpbHRlckNvbnRlbnQgY2xhc3NOYW1lPVwiZmlsdGVyLXBhbmVsX19jb250ZW50XCI+XG4gICAgICAgICAgICB7T2JqZWN0LmtleXMoZGF0YXNldHMpLmxlbmd0aCA+IDEgJiYgKFxuICAgICAgICAgICAgICA8U291cmNlRGF0YVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgaW5wdXRUaGVtZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgZGF0YXNldHM9e2RhdGFzZXRzfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtmaWx0ZXIuZnJlZXplfVxuICAgICAgICAgICAgICAgIGRhdGFJZD17ZmlsdGVyLmRhdGFJZH1cbiAgICAgICAgICAgICAgICBvblNlbGVjdD17b25Tb3VyY2VEYXRhU2VsZWN0b3J9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvU3R5bGVkRmlsdGVyQ29udGVudD5cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgKTtcblxuICBOZXdGaWx0ZXJQYW5lbC5kaXNwbGF5TmFtZSA9ICdOZXdGaWx0ZXJQYW5lbCc7XG5cbiAgcmV0dXJuIE5ld0ZpbHRlclBhbmVsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBOZXdGaWx0ZXJQYW5lbEZhY3Rvcnk7XG4iXX0=