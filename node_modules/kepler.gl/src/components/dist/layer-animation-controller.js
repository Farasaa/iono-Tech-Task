"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));

// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
LayerAnimationControllerFactory.deps = [_animationController["default"]];

function LayerAnimationControllerFactory(AnimationController) {
  var LayerAnimationController = function LayerAnimationController(_ref) {
    var animationConfig = _ref.animationConfig,
        setLayerAnimationTime = _ref.setLayerAnimationTime,
        children = _ref.children;
    var timeSteps = animationConfig.timeSteps,
        domain = animationConfig.domain;
    var setTimelineValue = (0, _react.useCallback)(function (value) {
      if (Array.isArray(timeSteps)) {
        setLayerAnimationTime((0, _utils.snapToMarks)((0, _utils.toArray)(value)[0], timeSteps)); // TODO: merge slider in to avoid this step
      } else if (domain && value >= domain[0] && value <= domain[1]) {
        setLayerAnimationTime(value);
      }
    }, [domain, setLayerAnimationTime, timeSteps]);
    var timeline = (0, _utils.getTimelineFromAnimationConfig)(animationConfig);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "layer-control",
      value: Number(animationConfig.currentTime),
      domain: animationConfig.domain,
      speed: animationConfig.speed,
      isAnimating: animationConfig.isAnimating,
      steps: animationConfig.timeSteps,
      animationWindow: animationConfig.timeSteps ? _constants.ANIMATION_WINDOW.interval : _constants.ANIMATION_WINDOW.point,
      setTimelineValue: setTimelineValue,
      timeline: timeline,
      children: children
    });
  };

  return LayerAnimationController;
}

var _default = LayerAnimationControllerFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sYXllci1hbmltYXRpb24tY29udHJvbGxlci50c3giXSwibmFtZXMiOlsiTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSIsImRlcHMiLCJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSIsIkFuaW1hdGlvbkNvbnRyb2xsZXIiLCJMYXllckFuaW1hdGlvbkNvbnRyb2xsZXIiLCJhbmltYXRpb25Db25maWciLCJzZXRMYXllckFuaW1hdGlvblRpbWUiLCJjaGlsZHJlbiIsInRpbWVTdGVwcyIsImRvbWFpbiIsInNldFRpbWVsaW5lVmFsdWUiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsInRpbWVsaW5lIiwiTnVtYmVyIiwiY3VycmVudFRpbWUiLCJzcGVlZCIsImlzQW5pbWF0aW5nIiwiQU5JTUFUSU9OX1dJTkRPVyIsImludGVydmFsIiwicG9pbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBUEE7QUFDQTtBQXFCQUEsK0JBQStCLENBQUNDLElBQWhDLEdBQXVDLENBQUNDLCtCQUFELENBQXZDOztBQUVBLFNBQVNGLCtCQUFULENBQ0VHLG1CQURGLEVBRUU7QUFDQSxNQUFNQyx3QkFBaUUsR0FBRyxTQUFwRUEsd0JBQW9FLE9BSXBFO0FBQUEsUUFISkMsZUFHSSxRQUhKQSxlQUdJO0FBQUEsUUFGSkMscUJBRUksUUFGSkEscUJBRUk7QUFBQSxRQURKQyxRQUNJLFFBREpBLFFBQ0k7QUFBQSxRQUNHQyxTQURILEdBQ3dCSCxlQUR4QixDQUNHRyxTQURIO0FBQUEsUUFDY0MsTUFEZCxHQUN3QkosZUFEeEIsQ0FDY0ksTUFEZDtBQUdKLFFBQU1DLGdCQUFnQixHQUFHLHdCQUN2QixVQUFDQyxLQUFELEVBQW1CO0FBQ2pCLFVBQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjTCxTQUFkLENBQUosRUFBOEI7QUFDNUJGLFFBQUFBLHFCQUFxQixDQUFDLHdCQUFZLG9CQUFRSyxLQUFSLEVBQWUsQ0FBZixDQUFaLEVBQStCSCxTQUEvQixDQUFELENBQXJCLENBRDRCLENBRzVCO0FBQ0QsT0FKRCxNQUlPLElBQUlDLE1BQU0sSUFBSUUsS0FBSyxJQUFJRixNQUFNLENBQUMsQ0FBRCxDQUF6QixJQUFnQ0UsS0FBSyxJQUFJRixNQUFNLENBQUMsQ0FBRCxDQUFuRCxFQUF3RDtBQUM3REgsUUFBQUEscUJBQXFCLENBQUNLLEtBQUQsQ0FBckI7QUFDRDtBQUNGLEtBVHNCLEVBVXZCLENBQUNGLE1BQUQsRUFBU0gscUJBQVQsRUFBZ0NFLFNBQWhDLENBVnVCLENBQXpCO0FBYUEsUUFBTU0sUUFBUSxHQUFHLDJDQUErQlQsZUFBL0IsQ0FBakI7QUFFQSx3QkFDRSxnQ0FBQyxtQkFBRDtBQUNFLE1BQUEsR0FBRyxFQUFDLGVBRE47QUFFRSxNQUFBLEtBQUssRUFBRVUsTUFBTSxDQUFDVixlQUFlLENBQUNXLFdBQWpCLENBRmY7QUFHRSxNQUFBLE1BQU0sRUFBRVgsZUFBZSxDQUFDSSxNQUgxQjtBQUlFLE1BQUEsS0FBSyxFQUFFSixlQUFlLENBQUNZLEtBSnpCO0FBS0UsTUFBQSxXQUFXLEVBQUVaLGVBQWUsQ0FBQ2EsV0FML0I7QUFNRSxNQUFBLEtBQUssRUFBRWIsZUFBZSxDQUFDRyxTQU56QjtBQU9FLE1BQUEsZUFBZSxFQUNiSCxlQUFlLENBQUNHLFNBQWhCLEdBQTRCVyw0QkFBaUJDLFFBQTdDLEdBQXdERCw0QkFBaUJFLEtBUjdFO0FBVUUsTUFBQSxnQkFBZ0IsRUFBRVgsZ0JBVnBCO0FBV0UsTUFBQSxRQUFRLEVBQUVJLFFBWFo7QUFZRSxNQUFBLFFBQVEsRUFBRVA7QUFaWixNQURGO0FBZ0JELEdBdENEOztBQXVDQSxTQUFPSCx3QkFBUDtBQUNEOztlQUVjSiwrQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0FOSU1BVElPTl9XSU5ET1d9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7QW5pbWF0aW9uQ29uZmlnLCBUaW1lbGluZX0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge3NuYXBUb01hcmtzLCBnZXRUaW1lbGluZUZyb21BbmltYXRpb25Db25maWcsIHRvQXJyYXl9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuaW1wb3J0IEFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IGZyb20gJy4vY29tbW9uL2FuaW1hdGlvbi1jb250cm9sL2FuaW1hdGlvbi1jb250cm9sbGVyJztcblxuaW50ZXJmYWNlIExheWVyQW5pbWF0aW9uQ29udHJvbGxlclByb3BzIHtcbiAgYW5pbWF0aW9uQ29uZmlnOiBBbmltYXRpb25Db25maWc7XG4gIHNldExheWVyQW5pbWF0aW9uVGltZTogKHg6IG51bWJlcikgPT4gdm9pZDtcbiAgY2hpbGRyZW4/OiAoXG4gICAgaXNBbmltYXRpbmc6IGJvb2xlYW4gfCB1bmRlZmluZWQsXG4gICAgc3RhcnRBbmltYXRpb246ICgpID0+IHZvaWQsXG4gICAgcGF1c2VBbmltYXRpb246ICgpID0+IHZvaWQsXG4gICAgcmVzZXRBbmltYXRpb246ICgpID0+IHZvaWQsXG4gICAgdGltZWxpbmU6IFRpbWVsaW5lIHwgdW5kZWZpbmVkLFxuICAgIHNldFRpbWVsaW5lVmFsdWU6ICh4OiBhbnkpID0+IHZvaWRcbiAgKSA9PiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsO1xufVxuXG5MYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5LmRlcHMgPSBbQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnldO1xuXG5mdW5jdGlvbiBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5KFxuICBBbmltYXRpb25Db250cm9sbGVyOiBSZXR1cm5UeXBlPHR5cGVvZiBBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeT5cbikge1xuICBjb25zdCBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXI6IFJlYWN0LkZDPExheWVyQW5pbWF0aW9uQ29udHJvbGxlclByb3BzPiA9ICh7XG4gICAgYW5pbWF0aW9uQ29uZmlnLFxuICAgIHNldExheWVyQW5pbWF0aW9uVGltZSxcbiAgICBjaGlsZHJlblxuICB9KSA9PiB7XG4gICAgY29uc3Qge3RpbWVTdGVwcywgZG9tYWlufSA9IGFuaW1hdGlvbkNvbmZpZztcblxuICAgIGNvbnN0IHNldFRpbWVsaW5lVmFsdWUgPSB1c2VDYWxsYmFjayhcbiAgICAgICh2YWx1ZTogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRpbWVTdGVwcykpIHtcbiAgICAgICAgICBzZXRMYXllckFuaW1hdGlvblRpbWUoc25hcFRvTWFya3ModG9BcnJheSh2YWx1ZSlbMF0sIHRpbWVTdGVwcykpO1xuXG4gICAgICAgICAgLy8gVE9ETzogbWVyZ2Ugc2xpZGVyIGluIHRvIGF2b2lkIHRoaXMgc3RlcFxuICAgICAgICB9IGVsc2UgaWYgKGRvbWFpbiAmJiB2YWx1ZSA+PSBkb21haW5bMF0gJiYgdmFsdWUgPD0gZG9tYWluWzFdKSB7XG4gICAgICAgICAgc2V0TGF5ZXJBbmltYXRpb25UaW1lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtkb21haW4sIHNldExheWVyQW5pbWF0aW9uVGltZSwgdGltZVN0ZXBzXVxuICAgICk7XG5cbiAgICBjb25zdCB0aW1lbGluZSA9IGdldFRpbWVsaW5lRnJvbUFuaW1hdGlvbkNvbmZpZyhhbmltYXRpb25Db25maWcpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBbmltYXRpb25Db250cm9sbGVyXG4gICAgICAgIGtleT1cImxheWVyLWNvbnRyb2xcIlxuICAgICAgICB2YWx1ZT17TnVtYmVyKGFuaW1hdGlvbkNvbmZpZy5jdXJyZW50VGltZSl9XG4gICAgICAgIGRvbWFpbj17YW5pbWF0aW9uQ29uZmlnLmRvbWFpbn1cbiAgICAgICAgc3BlZWQ9e2FuaW1hdGlvbkNvbmZpZy5zcGVlZH1cbiAgICAgICAgaXNBbmltYXRpbmc9e2FuaW1hdGlvbkNvbmZpZy5pc0FuaW1hdGluZ31cbiAgICAgICAgc3RlcHM9e2FuaW1hdGlvbkNvbmZpZy50aW1lU3RlcHN9XG4gICAgICAgIGFuaW1hdGlvbldpbmRvdz17XG4gICAgICAgICAgYW5pbWF0aW9uQ29uZmlnLnRpbWVTdGVwcyA/IEFOSU1BVElPTl9XSU5ET1cuaW50ZXJ2YWwgOiBBTklNQVRJT05fV0lORE9XLnBvaW50XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZWxpbmVWYWx1ZT17c2V0VGltZWxpbmVWYWx1ZX1cbiAgICAgICAgdGltZWxpbmU9e3RpbWVsaW5lfVxuICAgICAgICBjaGlsZHJlbj17Y2hpbGRyZW59XG4gICAgICAvPlxuICAgICk7XG4gIH07XG4gIHJldHVybiBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExheWVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3Rvcnk7XG4iXX0=