{"version":3,"sources":["../../../src/adapters/deck-adapter.js"],"names":["PreviewEncoder","DeckScene","VideoCapture","DeckAdapter","constructor","sceneBuilder","glContext","undefined","videoCapture","shouldAnimate","enabled","getProps","bind","render","stop","_deckOnLoad","_getViewState","_getLayers","_applyScene","deckRef","setReady","onNextFrame","props","onLoad","current","deck","then","_animate","onAfterRender","scene","keyframes","camera","controller","viewState","hasLayers","layers","width","height","gl","Encoder","encoderSettings","onStop","updateCamera","animationLoop","timeline","detachAnimation","currentCamera","attachAnimation","innerOnStop","lengthMs","setTime","startOffsetMs","callback","pause","Promise","resolve","frame","getFrame","renderLayers","proceedToNextFrame","capture","canvas","nextTimeMs"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable no-console */\nimport {PreviewEncoder} from '../encoders';\n// eslint-disable-next-line no-unused-vars\nimport {DeckScene} from '../scene';\nimport {VideoCapture} from '../capture/video-capture';\n\nexport default class DeckAdapter {\n  /** @type {DeckScene} */\n  scene;\n  /** @type {(animationLoop: any) => Promise<DeckScene> | DeckScene} */\n  sceneBuilder;\n  /** @type {boolean} */\n  shouldAnimate;\n  /** @type {boolean} */\n  enabled;\n  /** @type {WebGL2RenderingContext} */\n  glContext;\n\n  /**\n   * @param {(animationLoop: any) => DeckScene | Promise<DeckScene>} sceneBuilder\n   * @param {WebGL2RenderingContext} glContext\n   */\n  constructor(sceneBuilder, glContext = undefined) {\n    this.sceneBuilder = sceneBuilder;\n    this.glContext = glContext;\n    this.videoCapture = new VideoCapture();\n    this.shouldAnimate = true;\n    this.enabled = false;\n    this.getProps = this.getProps.bind(this);\n    this.render = this.render.bind(this);\n    this.stop = this.stop.bind(this);\n    this._deckOnLoad = this._deckOnLoad.bind(this);\n    this._getViewState = this._getViewState.bind(this);\n    this._getLayers = this._getLayers.bind(this);\n    this._applyScene = this._applyScene.bind(this);\n  }\n\n  /**\n   * @param {{ current: { deck: any; }; }} deckRef\n   * @param {(ready: boolean) => void} setReady\n   * @param {(nextTimeMs: number) => void} onNextFrame\n   */\n  getProps(deckRef, setReady, onNextFrame = undefined) {\n    const props = {\n      onLoad: () =>\n        this._deckOnLoad(deckRef.current.deck).then(() => {\n          setReady(true);\n        }),\n      _animate: this.shouldAnimate\n    };\n\n    if (onNextFrame) {\n      // Remove the underscore to make it public? Please verify\n      props.onAfterRender = () => this.onAfterRender(onNextFrame);\n    }\n\n    // Animating the camera is optional, but if a keyframe is defined then viewState is controlled by camera keyframe.\n    if (this.scene && this.scene.keyframes.camera && this.enabled) {\n      props.controller = false;\n      props.viewState = this._getViewState();\n    }\n\n    // Only replace layers when use defines scene layers\n    // TODO: Could potentially concat instead of replace, but layers are supposed to be static.\n    if (this.scene && this.scene.hasLayers()) {\n      props.layers = this._getLayers();\n    }\n\n    if (this.scene) {\n      props.width = this.scene.width;\n      props.height = this.scene.height;\n    }\n\n    if (this.glContext) {\n      props.gl = this.glContext;\n    }\n    return props;\n  }\n\n  /**\n   * @param {typeof import('../encoders').FrameEncoder} Encoder\n   * @param {import('types').FrameEncoderSettings} encoderSettings\n   * @param {() => void} onStop\n   * @param {(prevCamera: import('../keyframes').CameraKeyframes) => void} updateCamera\n   */\n  render(\n    Encoder = PreviewEncoder,\n    encoderSettings = {},\n    onStop = undefined,\n    updateCamera = undefined\n  ) {\n    if (updateCamera) {\n      // Optional camera and keyframes defined by the user at runtime\n      this.scene.animationLoop.timeline.detachAnimation(this.scene.currentCamera);\n      this.scene.keyframes.camera = updateCamera(this.scene.keyframes.camera);\n      this.scene.currentCamera = this.scene.animationLoop.timeline.attachAnimation(\n        this.scene.keyframes.camera\n      );\n    }\n\n    const innerOnStop = () => {\n      this.enabled = false;\n      if (onStop) {\n        onStop();\n      }\n    };\n    this.shouldAnimate = true;\n    this.videoCapture.render(Encoder, encoderSettings, this.scene.lengthMs, innerOnStop);\n    this.scene.animationLoop.timeline.setTime(this.videoCapture.encoderSettings.startOffsetMs);\n    this.enabled = true;\n  }\n\n  /**\n   * @param {() => void} callback\n   */\n  stop(callback) {\n    this.enabled = false;\n    this.shouldAnimate = false;\n    this.videoCapture.stop(callback);\n  }\n\n  async _deckOnLoad(deck) {\n    this.deck = deck;\n\n    const animationLoop = deck.animationLoop;\n    animationLoop.timeline.pause();\n    animationLoop.timeline.setTime(0);\n\n    await Promise.resolve(this.sceneBuilder(animationLoop)).then(scene => {\n      this._applyScene(scene);\n    });\n  }\n\n  // TODO: allow user to change scenes at runtime.\n  _applyScene(scene) {\n    this.scene = scene;\n  }\n\n  _getViewState() {\n    if (!this.scene) {\n      return null;\n    }\n    const frame = this.scene.keyframes.camera.getFrame();\n    return frame;\n  }\n\n  _getLayers() {\n    if (!this.scene) {\n      return [];\n    }\n    return this.scene.renderLayers();\n  }\n\n  /**\n   * @param {(nextTimeMs: number) => void} proceedToNextFrame\n   */\n  onAfterRender(proceedToNextFrame) {\n    this.videoCapture.capture(this.deck.canvas, nextTimeMs => {\n      this.scene.animationLoop.timeline.setTime(nextTimeMs);\n      proceedToNextFrame(nextTimeMs);\n    });\n  }\n}\n"],"file":"deck-adapter.js"}