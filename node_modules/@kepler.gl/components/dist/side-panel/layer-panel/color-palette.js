"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _templateObject, _templateObject2, _templateObject3;

var defaultProps = {
  height: 10,
  colors: [],
  className: '',
  isSelected: false,
  isReversed: false
};

var PaletteWrapper = _styledComponents["default"].div.attrs({
  className: 'color-range-palette__inner'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  border-radius: 2px;\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n  justify-content: space-between;\n  overflow: hidden;\n"])));

var PaletteContainer = _styledComponents["default"].div.attrs(function (props) {
  return {
    className: (0, _classnames["default"])('color-range-palette', props.className)
  };
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-grow: 1;\n  border-width: 1px;\n  border-style: solid;\n  border-color: ", ";\n  padding: 4px;\n  border-radius: 4px;\n"])), function (props) {
  return props.isSelected ? '#FFFFFF' : 'transparent';
});

var StyledColorBlock = _styledComponents["default"].div.attrs({
  className: 'color-range-palette__block'
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  flex-grow: 1;\n"])));

var ColorPalette = function ColorPalette(_ref) {
  var colors = _ref.colors,
      height = _ref.height,
      className = _ref.className,
      isSelected = _ref.isSelected,
      isReversed = _ref.isReversed;
  return /*#__PURE__*/_react["default"].createElement(PaletteContainer, {
    className: className,
    isSelected: isSelected
  }, /*#__PURE__*/_react["default"].createElement(PaletteWrapper, {
    style: {
      height: height,
      transform: "scale(".concat(isReversed ? -1 : 1, ", 1)")
    }
  }, colors.map(function (color, index) {
    return /*#__PURE__*/_react["default"].createElement(StyledColorBlock, {
      key: "".concat(color, "-").concat(index),
      style: {
        backgroundColor: String(color)
      }
    });
  })));
};

ColorPalette.defaultProps = defaultProps;
var _default = ColorPalette;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2NvbG9yLXBhbGV0dGUudHN4Il0sIm5hbWVzIjpbImRlZmF1bHRQcm9wcyIsImhlaWdodCIsImNvbG9ycyIsImNsYXNzTmFtZSIsImlzU2VsZWN0ZWQiLCJpc1JldmVyc2VkIiwiUGFsZXR0ZVdyYXBwZXIiLCJzdHlsZWQiLCJkaXYiLCJhdHRycyIsIlBhbGV0dGVDb250YWluZXIiLCJwcm9wcyIsIlN0eWxlZENvbG9yQmxvY2siLCJDb2xvclBhbGV0dGUiLCJ0cmFuc2Zvcm0iLCJtYXAiLCJjb2xvciIsImluZGV4IiwiYmFja2dyb3VuZENvbG9yIiwiU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUdBOztBQUVBOztBQUNBOzs7O0FBVUEsSUFBTUEsWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxNQUFNLEVBQUUsRUFEVztBQUVuQkMsRUFBQUEsTUFBTSxFQUFFLEVBRlc7QUFHbkJDLEVBQUFBLFNBQVMsRUFBRSxFQUhRO0FBSW5CQyxFQUFBQSxVQUFVLEVBQUUsS0FKTztBQUtuQkMsRUFBQUEsVUFBVSxFQUFFO0FBTE8sQ0FBckI7O0FBUUEsSUFBTUMsY0FBYyxHQUFHQyw2QkFBT0MsR0FBUCxDQUFXQyxLQUFYLENBQWlCO0FBQ3RDTixFQUFBQSxTQUFTLEVBQUU7QUFEMkIsQ0FBakIsQ0FBSCxrT0FBcEI7O0FBV0EsSUFBTU8sZ0JBQWdCLEdBQUdILDZCQUFPQyxHQUFQLENBQVdDLEtBQVgsQ0FBaUIsVUFBQUUsS0FBSztBQUFBLFNBQUs7QUFDbERSLElBQUFBLFNBQVMsRUFBRSw0QkFBVyxxQkFBWCxFQUFrQ1EsS0FBSyxDQUFDUixTQUF4QztBQUR1QyxHQUFMO0FBQUEsQ0FBdEIsQ0FBSCwyT0FPSixVQUFBUSxLQUFLO0FBQUEsU0FBS0EsS0FBSyxDQUFDUCxVQUFOLEdBQW1CLFNBQW5CLEdBQStCLGFBQXBDO0FBQUEsQ0FQRCxDQUF0Qjs7QUFZQSxJQUFNUSxnQkFBZ0IsR0FBR0wsNkJBQU9DLEdBQVAsQ0FBV0MsS0FBWCxDQUFpQjtBQUN4Q04sRUFBQUEsU0FBUyxFQUFFO0FBRDZCLENBQWpCLENBQUgsMkdBQXRCOztBQU1BLElBQU1VLFlBQXlDLEdBQUcsU0FBNUNBLFlBQTRDO0FBQUEsTUFDaERYLE1BRGdELFFBQ2hEQSxNQURnRDtBQUFBLE1BRWhERCxNQUZnRCxRQUVoREEsTUFGZ0Q7QUFBQSxNQUdoREUsU0FIZ0QsUUFHaERBLFNBSGdEO0FBQUEsTUFJaERDLFVBSmdELFFBSWhEQSxVQUpnRDtBQUFBLE1BS2hEQyxVQUxnRCxRQUtoREEsVUFMZ0Q7QUFBQSxzQkFPaEQsZ0NBQUMsZ0JBQUQ7QUFBa0IsSUFBQSxTQUFTLEVBQUVGLFNBQTdCO0FBQXdDLElBQUEsVUFBVSxFQUFFQztBQUFwRCxrQkFDRSxnQ0FBQyxjQUFEO0FBQWdCLElBQUEsS0FBSyxFQUFFO0FBQUNILE1BQUFBLE1BQU0sRUFBTkEsTUFBRDtBQUFTYSxNQUFBQSxTQUFTLGtCQUFXVCxVQUFVLEdBQUcsQ0FBQyxDQUFKLEdBQVEsQ0FBN0I7QUFBbEI7QUFBdkIsS0FDR0gsTUFBTSxDQUFDYSxHQUFQLENBQVcsVUFBQ0MsS0FBRCxFQUF5QkMsS0FBekI7QUFBQSx3QkFDVixnQ0FBQyxnQkFBRDtBQUFrQixNQUFBLEdBQUcsWUFBS0QsS0FBTCxjQUFjQyxLQUFkLENBQXJCO0FBQTRDLE1BQUEsS0FBSyxFQUFFO0FBQUNDLFFBQUFBLGVBQWUsRUFBRUMsTUFBTSxDQUFDSCxLQUFEO0FBQXhCO0FBQW5ELE1BRFU7QUFBQSxHQUFYLENBREgsQ0FERixDQVBnRDtBQUFBLENBQWxEOztBQWdCQUgsWUFBWSxDQUFDYixZQUFiLEdBQTRCQSxZQUE1QjtlQUVlYSxZIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7SGV4Q29sb3IsIFJHQkNvbG9yfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbnR5cGUgQ29sb3JQYWxldHRlUHJvcHMgPSB7XG4gIGNvbG9yczogUkdCQ29sb3IgfCBIZXhDb2xvcltdO1xuICBoZWlnaHQ/OiBudW1iZXI7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaXNTZWxlY3RlZD86IGJvb2xlYW47XG4gIGlzUmV2ZXJzZWQ/OiBib29sZWFuO1xufTtcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICBoZWlnaHQ6IDEwLFxuICBjb2xvcnM6IFtdLFxuICBjbGFzc05hbWU6ICcnLFxuICBpc1NlbGVjdGVkOiBmYWxzZSxcbiAgaXNSZXZlcnNlZDogZmFsc2Vcbn07XG5cbmNvbnN0IFBhbGV0dGVXcmFwcGVyID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2NvbG9yLXJhbmdlLXBhbGV0dGVfX2lubmVyJ1xufSlgXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgZmxleC1ncm93OiAxO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIG92ZXJmbG93OiBoaWRkZW47XG5gO1xuXG5jb25zdCBQYWxldHRlQ29udGFpbmVyID0gc3R5bGVkLmRpdi5hdHRycyhwcm9wcyA9PiAoe1xuICBjbGFzc05hbWU6IGNsYXNzbmFtZXMoJ2NvbG9yLXJhbmdlLXBhbGV0dGUnLCBwcm9wcy5jbGFzc05hbWUpXG59KSk8e2lzU2VsZWN0ZWQ/OiBib29sZWFufT5gXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZ3JvdzogMTtcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIGJvcmRlci1jb2xvcjogJHtwcm9wcyA9PiAocHJvcHMuaXNTZWxlY3RlZCA/ICcjRkZGRkZGJyA6ICd0cmFuc3BhcmVudCcpfTtcbiAgcGFkZGluZzogNHB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRDb2xvckJsb2NrID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2NvbG9yLXJhbmdlLXBhbGV0dGVfX2Jsb2NrJ1xufSlgXG4gIGZsZXgtZ3JvdzogMTtcbmA7XG5cbmNvbnN0IENvbG9yUGFsZXR0ZTogUmVhY3QuRkM8Q29sb3JQYWxldHRlUHJvcHM+ID0gKHtcbiAgY29sb3JzLFxuICBoZWlnaHQsXG4gIGNsYXNzTmFtZSxcbiAgaXNTZWxlY3RlZCxcbiAgaXNSZXZlcnNlZFxufSkgPT4gKFxuICA8UGFsZXR0ZUNvbnRhaW5lciBjbGFzc05hbWU9e2NsYXNzTmFtZX0gaXNTZWxlY3RlZD17aXNTZWxlY3RlZH0+XG4gICAgPFBhbGV0dGVXcmFwcGVyIHN0eWxlPXt7aGVpZ2h0LCB0cmFuc2Zvcm06IGBzY2FsZSgke2lzUmV2ZXJzZWQgPyAtMSA6IDF9LCAxKWB9fT5cbiAgICAgIHtjb2xvcnMubWFwKChjb2xvcjogbnVtYmVyIHwgc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiAoXG4gICAgICAgIDxTdHlsZWRDb2xvckJsb2NrIGtleT17YCR7Y29sb3J9LSR7aW5kZXh9YH0gc3R5bGU9e3tiYWNrZ3JvdW5kQ29sb3I6IFN0cmluZyhjb2xvcil9fSAvPlxuICAgICAgKSl9XG4gICAgPC9QYWxldHRlV3JhcHBlcj5cbiAgPC9QYWxldHRlQ29udGFpbmVyPlxuKTtcblxuQ29sb3JQYWxldHRlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JQYWxldHRlO1xuIl19