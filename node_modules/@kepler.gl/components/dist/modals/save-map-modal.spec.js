"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _saveMapModal = _interopRequireDefault(require("./save-map-modal"));

var _componentJestUtils = require("test/helpers/component-jest-utils");

var _useCloudListProvider = require("../hooks/use-cloud-list-provider");

var _src = require("@kepler.gl/constants/src");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SaveMapModal = (0, _saveMapModal["default"])();
var DEFAULT_PROS = {
  mapInfo: {
    title: 'Test Map',
    description: 'test'
  },
  exportImage: jest.fn(),
  isProviderLoading: false,
  providerError: null,
  onUpdateImageSetting: jest.fn(),
  cleanupExportImage: jest.fn(),
  onSetMapInfo: jest.fn(),
  onCancel: jest.fn(),
  onConfirm: jest.fn()
};

var UNDEFINED_MAP_TITLE_PROPS = _objectSpread(_objectSpread({}, DEFAULT_PROS), {}, {
  mapInfo: {
    description: undefined,
    title: undefined
  }
});

var DEFAULT_PROVIDER = {
  name: 'test provider',
  icon: jest.fn(),
  getManagementUrl: jest.fn().mockImplementation(function () {
    return 'provider.url';
  })
};
jest.mock('../hooks/use-cloud-list-provider', function () {
  return {
    useCloudListProvider: jest.fn().mockImplementation(function () {
      return {
        provider: null,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    })
  };
});
describe('SaveMapModal', function () {
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('renders SaveMapModal component with provider set to null and map title set', function () {
    var _renderWithTheme = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
        getByText = _renderWithTheme.getByText;

    var confirmButton = getByText('modal.button.save');
    expect(confirmButton).toBeInTheDocument();
    expect(confirmButton).toBeDisabled();
  });
  test('renders SaveMapModal component with provider set to null and map title not set', function () {
    var _renderWithTheme2 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, UNDEFINED_MAP_TITLE_PROPS)),
        getByText = _renderWithTheme2.getByText;

    var confirmButton = getByText('modal.button.save');
    expect(confirmButton).toBeInTheDocument();
    expect(confirmButton).toBeDisabled();
  });
  test('renders SaveMapModal component with provider correctly set and map title not set', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });

    var _renderWithTheme3 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, UNDEFINED_MAP_TITLE_PROPS)),
        getByText = _renderWithTheme3.getByText;

    var confirmButton = getByText('modal.button.save');
    expect(confirmButton).toBeInTheDocument();
    expect(confirmButton).toBeDisabled();
  });
  test('renders SaveMapModal component with provider correctly set and map title set', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });

    var _renderWithTheme4 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
        getByText = _renderWithTheme4.getByText;

    var confirmButton = getByText('modal.button.save');
    expect(confirmButton).toBeInTheDocument();
    expect(confirmButton).toBeEnabled();
  });
  test('calls onCancel when cancel button is clicked', function () {
    var _renderWithTheme5 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
        getByText = _renderWithTheme5.getByText;

    _react2.fireEvent.click(getByText('modal.button.defaultCancel'));

    expect(DEFAULT_PROS.onCancel).toHaveBeenCalled();
  });
  test('calls onConfirm with provider when confirm button is clicked', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });

    var _renderWithTheme6 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
        getByText = _renderWithTheme6.getByText;

    var confirmButton = getByText('modal.button.save');

    _react2.fireEvent.click(confirmButton);

    expect(DEFAULT_PROS.onConfirm).toHaveBeenCalled();
  });
  test('does not render loading animation when isProviderLoading is true', function () {
    var _renderWithTheme7 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
        queryAllByTestId = _renderWithTheme7.queryAllByTestId;

    expect(queryAllByTestId(_src.dataTestIds.providerLoading)).toHaveLength(0);
  });
  test('renders loading animation when isProviderLoading is true', function () {
    var _renderWithTheme8 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, (0, _extends2["default"])({}, DEFAULT_PROS, {
      isProviderLoading: true
    }))),
        getByTestId = _renderWithTheme8.getByTestId;

    expect(getByTestId(_src.dataTestIds.providerLoading)).toBeInTheDocument();
  });
  test('renders no error if provider error is undefined', function () {
    var _renderWithTheme9 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
        queryAllByText = _renderWithTheme9.queryAllByText;

    expect(queryAllByText('modal.statusPanel.error')).toHaveLength(0);
  });
  test('displays provider error message when providerError is present', function () {
    var _renderWithTheme10 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, (0, _extends2["default"])({}, DEFAULT_PROS, {
      providerError: {
        message: 'Error message'
      }
    }))),
        getByText = _renderWithTheme10.getByText;

    expect(getByText('modal.statusPanel.error')).toBeInTheDocument();
  });
  test('call onSetMapInfo upon typing map (provider is set)', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });

    var _renderWithTheme11 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, UNDEFINED_MAP_TITLE_PROPS)),
        getByTestId = _renderWithTheme11.getByTestId,
        getByPlaceholderText = _renderWithTheme11.getByPlaceholderText;

    var mapInfoPanel = getByTestId(_src.dataTestIds.providerMapInfoPanel);
    expect(mapInfoPanel).toBeInTheDocument();
    var titleInput = getByPlaceholderText('Type map title');
    expect(titleInput).toBeInTheDocument();

    _react2.fireEvent.change(titleInput, {
      target: {
        value: 'first kepler map'
      }
    });

    expect(DEFAULT_PROS.onSetMapInfo).toHaveBeenCalledWith({
      title: 'first kepler map'
    });
  });
  test('call onUpdateImageSetting', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });

    (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, UNDEFINED_MAP_TITLE_PROPS)); // first time the component mount

    expect(DEFAULT_PROS.onUpdateImageSetting).toHaveBeenCalledWith({
      exporting: true
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,