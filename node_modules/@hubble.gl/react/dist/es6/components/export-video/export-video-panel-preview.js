import _extends from "@babel/runtime/helpers/esm/extends";
import React, { Component } from 'react';
import DeckGL from '@deck.gl/react';
import { StaticMap } from 'react-map-gl';
import { MapboxLayer } from '@deck.gl/mapbox';
export class ExportVideoPanelPreview extends Component {
  constructor(props) {
    super(props);
    const user = this.props.mapData.mapStyle.bottomMapStyle.owner;
    const mapId = this.props.mapData.mapStyle.bottomMapStyle.id;
    this.mapRef = React.createRef();
    this.deckRef = React.createRef();
    this.state = {
      timestamp: {
        latitude: 47.65,
        longitude: 7
      },
      mapStyle: "mapbox://styles/".concat(user, "/").concat(mapId),
      glContext: undefined,
      memoDevicePixelRatio: window.devicePixelRatio
    };
    this._onLayerSetDomain = this._onLayerSetDomain.bind(this);
    this._renderLayer = this._renderLayer.bind(this);
    this._onMapLoad = this._onMapLoad.bind(this);
    this._resizeVideo = this._resizeVideo.bind(this);
    this._getContainerHeight = this._getContainerHeight.bind(this);

    this._resizeVideo();
  }

  componentDidUpdate(prevProps) {
    if (prevProps.resolution !== this.props.resolution) {
      this._resizeVideo();
    }
  }

  componentWillUnmount() {
    const {
      memoDevicePixelRatio
    } = this.state;

    this._setDevicePixelRatio(memoDevicePixelRatio);
  }

  _resizeVideo() {
    const {
      exportVideoWidth,
      resolution
    } = this.props;

    this._setDevicePixelRatio(resolution[0] / exportVideoWidth);

    if (this.mapRef.current) {
      const map = this.mapRef.current.getMap();
      map.resize();
    }
  }

  _setDevicePixelRatio(devicePixelRatio) {
    window.devicePixelRatio = devicePixelRatio;
  }

  _onLayerSetDomain(idx, colorDomain) {}

  _renderLayer(overlays, idx) {
    const {
      mapData: {
        visState,
        mapState
      }
    } = this.props;
    const {
      datasets,
      layers,
      layerData,
      hoverInfo,
      clicked,
      interactionConfig,
      animationConfig
    } = visState;
    const layer = layers[idx];
    const data = layerData[idx];
    const {
      gpuFilter
    } = datasets[layer.config.dataId] || {};
    const objectHovered = clicked || hoverInfo;
    const layerCallbacks = {
      onSetLayerDomain: val => this._onLayerSetDomain(idx, val)
    };
    const layerOverlay = layer.renderLayer({
      data,
      gpuFilter,
      idx,
      interactionConfig,
      layerCallbacks,
      mapState,
      animationConfig,
      objectHovered
    });
    return overlays.concat(layerOverlay || []);
  }

  _getContainerHeight() {
    const {
      exportVideoWidth,
      resolution
    } = this.props;
    const aspectRatio = resolution[0] / resolution[1];
    return exportVideoWidth / aspectRatio;
  }

  _onMapLoad() {
    const map = this.mapRef.current.getMap();
    const deck = this.deckRef.current.deck;
    map.addLayer(new MapboxLayer({
      id: 'my-deck',
      deck
    }));
    map.on('render', () => this.props.adapter.onAfterRender(() => {
      this.forceUpdate();
    }));
    map.resize();
  }

  render() {
    const layerOrder = this.props.mapData.visState.layerOrder;
    let deckGlLayers = [];

    if (layerOrder && layerOrder.length) {
      deckGlLayers = layerOrder.slice().reverse().reduce(this._renderLayer, []);
    }

    const deckStyle = {
      width: '100%',
      height: '100%'
    };
    const containerStyle = {
      width: "".concat(this.props.exportVideoWidth, "px"),
      height: "".concat(this._getContainerHeight(), "px"),
      position: 'relative',
      overflow: 'auto'
    };
    return React.createElement("div", {
      id: "deck-canvas",
      style: containerStyle
    }, React.createElement(DeckGL, _extends({
      ref: this.deckRef,
      viewState: this.props.viewState,
      id: "hubblegl-overlay",
      layers: deckGlLayers,
      style: deckStyle,
      controller: true,
      glOptions: {
        stencil: true
      },
      onWebGLInitialized: gl => this.setState({
        glContext: gl
      }),
      onViewStateChange: this.props.setViewState
    }, this.props.adapter.getProps(this.deckRef, () => {})), this.state.glContext && React.createElement(StaticMap, {
      ref: this.mapRef,
      mapStyle: this.state.mapStyle,
      preventStyleDiffing: true,
      gl: this.state.glContext,
      onLoad: this._onMapLoad
    })));
  }

}
//# sourceMappingURL=export-video-panel-preview.js.map